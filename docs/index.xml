<?xml version="1.0" encoding="UTF-8"?>
<rss  xmlns:atom="http://www.w3.org/2005/Atom" 
      xmlns:media="http://search.yahoo.com/mrss/" 
      xmlns:content="http://purl.org/rss/1.0/modules/content/" 
      xmlns:dc="http://purl.org/dc/elements/1.1/" 
      version="2.0">
<channel>
<title>Sagar Thacker</title>
<link>https://sagarthacker.com/index.html</link>
<atom:link href="https://sagarthacker.com/index.xml" rel="self" type="application/rss+xml"/>
<description></description>
<generator>quarto-1.1.251</generator>
<lastBuildDate>Wed, 21 Jun 2023 04:00:00 GMT</lastBuildDate>
<item>
  <title>Deployment of Dockerized ML Models with AWS Kinesis and Lambda</title>
  <dc:creator>Sagar Thacker</dc:creator>
  <link>https://sagarthacker.com/posts/mlops/aws-deployment-lambda-kinesis.html</link>
  <description><![CDATA[ 




<p>This post explains the deployment of a Dockerized ML model using AWS Kinesis as the event stream and AWS Lambda as the consumer. The Dockerized ML model will be registered on AWS ECR.</p>
<p>The workflow involves triggering an AWS Lambda function upon receiving a request on AWS Kinesis, which will then invoke the ML model and push the results to another AWS Kinesis stream.</p>
<p align="center">
<img src="https://sagarthacker.com/posts/mlops/images/lambda-kinesis/aws-deployment.png" alt="AWS deployment - lambda, kinesis, and ecr">
</p>
<p>The interaction with AWS services and resources will be performed from a local machine using the AWS CLI.</p>
<section id="prerequisites" class="level2">
<h2 class="anchored" data-anchor-id="prerequisites">Prerequisites</h2>
<p>To follow along with this post, you’ll need the <a href="https://docs.aws.amazon.com/cli/latest/userguide/getting-started-install.html">AWS Command Line Interface (AWS CLI) version 2</a>. To check if you have AWS CLI installed, run the following command:</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode numberSource bash number-lines code-with-copy"><code class="sourceCode bash"><span id="cb1-1"><span class="ex" style="color: null;">aws</span> <span class="at" style="color: #657422;">--version</span></span></code></pre></div>
</section>
<section id="create-an-iam-role" class="level2">
<h2 class="anchored" data-anchor-id="create-an-iam-role">Create an IAM role</h2>
<p>Create an IAM role that you can use to access AWS services and resources. Follow these steps:</p>
<ol type="1">
<li>Sign in to the AWS Management Console and open the <a href="https://console.aws.amazon.com/iam/home#/roles">roles page</a> in the IAM console.</li>
<li>Click on <strong>Create role</strong>.</li>
<li>Give the role the following properties:
<ul>
<li><strong>Trusted entity</strong>: AWS service</li>
<li><strong>Use case</strong>: Lambda</li>
<li><strong>Permissions</strong>: AWSLambdaKinesisExecutionRole</li>
<li><strong>Role name</strong>: <code>lamdba-kinesis-role</code></li>
</ul></li>
</ol>
<p>The <strong>AWSLambdaKinesisExecutionRole</strong> policy has the permissions that the function needs to read items from Kinesis and write logs to CloudWatch Logs.</p>
</section>
<section id="create-a-lambda-function" class="level2">
<h2 class="anchored" data-anchor-id="create-a-lambda-function">Create a Lambda function</h2>
<p>We’ll create a Lambda function that reads records from a Kinesis stream and writes them to CloudWatch Logs. Follow these steps:</p>
<ol type="1">
<li>Open the <a href="https://console.aws.amazon.com/lambda/">Lambda console</a> in the AWS Management Console.</li>
<li>Choose <strong>Create function</strong>.</li>
<li>Give the function the following properties:
<ul>
<li>Select <strong>Author from scratch</strong>.</li>
<li><strong>Function name</strong>: <code>ride-duration-prediction-test</code></li>
<li><strong>Runtime</strong>: Python 3.9</li>
<li><strong>Permissions</strong>: Toggle the <code>Change default execution role</code> and select <code>Use an existing role</code>. Choose the <code>lamdba-kinesis-role</code> role that you created earlier.</li>
</ul></li>
<li>Choose <strong>Create function</strong>.</li>
</ol>
<p>Once the function is created, you’ll see code editor with a file name <code>lambda_function.py</code> created for you.</p>
<p>Inside the file you might have noticed the <code>lambda_handler</code> function. The handler function is the entry point for Lambda functions. It’s the python function that get’s executed when the Lambda function is invoked.</p>
<p>The handler function always takes two arguments: <code>event</code> and <code>context</code>.</p>
<section id="event" class="level3">
<h3 class="anchored" data-anchor-id="event">Event</h3>
<p>The <code>event</code> argument is the data that’s passed to the function when it’s invoked. For example, if the lambda function is invoked by an HTTP request, the <code>event</code> argument will contain information about the HTTP request.</p>
<p>Think of the <code>event</code> argument as the input to the function, the function then processes the input based on some logic and may or may not return an output. The functions can be triggered by different events such as an HTTP request, a message in a queue, a file upload to S3, etc.</p>
</section>
<section id="context" class="level3">
<h3 class="anchored" data-anchor-id="context">Context</h3>
<p>The <code>context</code> argument provides information about the function and the execution environment. For example, the <code>context</code> argument contains the name of the function, the function version, the execution time, etc.</p>
<p><code>context</code> is a Python object that implements methods and has properties that you can use to get information about the function and the execution environment. For example, you can use the <code>context.get_remaining_time_in_millis()</code> method to get the remaining execution time for the function in milliseconds.</p>
<p>Let’s add some code to the <code>lambda_handler</code> function to log the <code>event</code> and <code>context</code> arguments:</p>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb2-1"><span class="im" style="color: #00769E;">import</span> json</span>
<span id="cb2-2"></span>
<span id="cb2-3"><span class="kw" style="color: #003B4F;">def</span> lambda_handler(event, context):</span>
<span id="cb2-4">    <span class="bu" style="color: null;">print</span>(<span class="st" style="color: #20794D;">"Received event: "</span> <span class="op" style="color: #5E5E5E;">+</span> json.dumps(event))</span>
<span id="cb2-5">    <span class="bu" style="color: null;">print</span>(<span class="st" style="color: #20794D;">"Remaining time (ms): "</span> <span class="op" style="color: #5E5E5E;">+</span> <span class="bu" style="color: null;">str</span>(context.get_remaining_time_in_millis()))</span>
<span id="cb2-6">    <span class="cf" style="color: #003B4F;">return</span> {</span>
<span id="cb2-7">        <span class="st" style="color: #20794D;">'statusCode'</span>: <span class="dv" style="color: #AD0000;">200</span>,</span>
<span id="cb2-8">        <span class="st" style="color: #20794D;">'body'</span>: json.dumps(<span class="st" style="color: #20794D;">'Hello from Lambda!'</span>)</span>
<span id="cb2-9">    }</span></code></pre></div>
<div class="callout-note callout callout-style-default callout-captioned">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-caption-container flex-fill">
Note
</div>
</div>
<div class="callout-body-container callout-body">
<p>Everytime you make changes to the Lambda function, you need to deploy the changes. You can deploy the changes by clicking on the <strong>Deploy</strong> button in the top right corner of the Lambda console.</p>
</div>
</div>
<p>To test the function, click on the <strong>Test</strong> button and create a new test event. Give the test event a name, for example <code>test-event</code>.</p>
<p>You’ll notice there is a drop down for the event template. For now we’ll use the default <code>hello-world</code> template, however I encourage you to explore the other templates.</p>
<p>Click on the <strong>Save</strong> button and then click on the <strong>Test</strong> button again.</p>
</section>
</section>
<section id="create-a-kinesis-stream" class="level2">
<h2 class="anchored" data-anchor-id="create-a-kinesis-stream">Create a Kinesis stream</h2>
<p>Create a Kinesis stream that you can use to send data to the Lambda function. Follow these steps:</p>
<ol type="1">
<li>Open the <a href="https://console.aws.amazon.com/kinesis">Kinesis console</a> in the AWS Management Console.</li>
<li>Choose <strong>Kinesis Data Streams</strong> and then choose <strong>Create data stream</strong>.</li>
<li>Give the stream the following properties:
<ul>
<li><strong>Stream name</strong>: <code>ride-event</code></li>
<li><strong>Capacity mode</strong>: Provisioned</li>
<li><strong>Provisioned shards</strong>: 1</li>
</ul></li>
<li>Choose <strong>Create data stream</strong>.</li>
</ol>
</section>
<section id="add-a-trigger-to-the-lambda-function" class="level2">
<h2 class="anchored" data-anchor-id="add-a-trigger-to-the-lambda-function">Add a trigger to the Lambda function</h2>
<p>A trigger is a configurable resource that enables an AWS service to invoke your function in response to specific events or conditions. Your function can be associated with multiple triggers, allowing it to respond to various event-driven scenarios.</p>
<p>Add a trigger to the Lambda function that we created earlier. Follow these steps:</p>
<ol type="1">
<li>Navigate back to the <code>ride-duration-prediction-test</code> Lambda function in the Lambda console.</li>
<li>In the <strong>Function overview</strong> section, choose <strong>Add trigger</strong> button.</li>
<li>Choose <strong>Kinesis</strong> from the list of triggers.</li>
<li>Give the trigger the following properties:
<ul>
<li><strong>Kinesis stream</strong>: <code>ride-event</code></li>
</ul></li>
<li>Choose <strong>Add</strong>.</li>
</ol>
</section>
<section id="create-a-iam-user-and-policy" class="level2">
<h2 class="anchored" data-anchor-id="create-a-iam-user-and-policy">Create a IAM user and policy</h2>
<p>To interact with AWS services and resources from your local machine we need to create an IAM user and policy.</p>
<p>The IAM user represents the human user or workload who uses the IAM user to interact with AWS. A user in AWS consists of a name and credentials.</p>
<p>The credentials are used to authenticate the user when they interact with AWS.</p>
<p>The IAM policy defines the permissions that the user has to access AWS services and resources. We attach the policy to the user to grant the user permissions to access AWS services and resources.</p>
<p>Follow these steps to create an IAM user and policy:</p>
<section id="policy" class="level3">
<h3 class="anchored" data-anchor-id="policy">Policy</h3>
<ol type="1">
<li>Sign in to the AWS Management Console and open the <a href="https://console.aws.amazon.com/iam/home#/policies">policies page</a> in the IAM console.</li>
<li>Choose <strong>Create policy</strong>.</li>
<li>Search for <code>kinesis</code> and click on it.</li>
<li>Under the <strong>Access level</strong> section, for <strong>Write</strong> select the <strong>PutRecord</strong> and <strong>PutRecords</strong> actions.</li>
<li>Under the <strong>Resources</strong> section, select <strong>Specific</strong> and then <strong>Add ARN</strong>.</li>
<li>Choose the <strong>Text</strong> tab and Copy-Paste the ARN of the Kinesis stream that you created earlier. You can find the ARN of the Kinesis stream in the Kinesis console under the <strong>Data stream summary</strong> section.</li>
<li>Choose <strong>Add ARNs</strong> and then <strong>Next</strong>.</li>
<li>Give the policy the following properties:
<ul>
<li><strong>Name</strong>: <code>kinesis-write-policy</code></li>
<li><strong>Description</strong>: <code>Allows write access to the Kinesis stream</code></li>
</ul></li>
<li>Choose <strong>Create policy</strong>.</li>
</ol>
</section>
<section id="user" class="level3">
<h3 class="anchored" data-anchor-id="user">User</h3>
<ol type="1">
<li>Sign in to the AWS Management Console and open the <a href="https://console.aws.amazon.com/iam/home#/users">users page</a> in the IAM console.</li>
<li>Choose <strong>Add users</strong>.</li>
<li>Name the user <code>kinesis-user</code>.</li>
<li>Select <strong>Add user to group</strong> and then <strong>Create group</strong>.</li>
<li>Name the group <code>kinesis-write-group</code>.</li>
<li>Search for the policy that you created earlier and select it. In this case it’s <code>kinesis-write-policy</code>.</li>
<li>Choose <strong>Create user group</strong>.</li>
<li>Select the user group that you created earlier and choose <strong>Next</strong>.</li>
<li>Choose <strong>Create user</strong>.</li>
</ol>
</section>
<section id="create-access-keys-for-the-iam-user" class="level3">
<h3 class="anchored" data-anchor-id="create-access-keys-for-the-iam-user">Create access keys for the IAM user</h3>
<p>Select the IAM user that you created earlier.</p>
<ol type="1">
<li>Choose <strong>Security credentials</strong>.</li>
<li>Under the <strong>Access keys</strong> section, choose <strong>Create access key</strong>.</li>
<li>Choose <strong>Other</strong> and then <strong>Next</strong>.</li>
<li>Choose <strong>Create access key</strong>.</li>
</ol>
<div class="callout-note callout callout-style-default callout-captioned">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-caption-container flex-fill">
Note
</div>
</div>
<div class="callout-body-container callout-body">
<p>Make sure you download the access key file. You will not be able to access the secret access key again after you close the dialog box.</p>
</div>
</div>
<p>Next we’ll configure the AWS CLI to use the access keys that we just created.</p>
<div class="callout-note callout callout-style-default callout-captioned">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-caption-container flex-fill">
Note
</div>
</div>
<div class="callout-body-container callout-body">
<p>Make sure you have the <a href="https://docs.aws.amazon.com/cli/latest/userguide/getting-started-install.html">AWS CLI</a> installed.</p>
</div>
</div>
<p>Run the following command to configure the AWS CLI:</p>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode numberSource bash number-lines code-with-copy"><code class="sourceCode bash"><span id="cb3-1"><span class="ex" style="color: null;">aws</span> configure</span></code></pre></div>
<p>Enter the access key ID and secret access key that you downloaded earlier. For the default region name, enter the region that you created the Kinesis stream in.</p>
</section>
</section>
<section id="send-data-to-the-kinesis-stream" class="level2">
<h2 class="anchored" data-anchor-id="send-data-to-the-kinesis-stream">Send data to the Kinesis stream</h2>
<p>Now that we have a Lambda function and a Kinesis stream, let’s send some data to the Kinesis stream. Follow these steps:</p>
<p>Open terminal or command prompt and run the following command to send data to the Kinesis stream:</p>
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode numberSource bash number-lines code-with-copy"><code class="sourceCode bash"><span id="cb4-1"><span class="va" style="color: #111111;">KINESIS_STREAM_NAME</span><span class="op" style="color: #5E5E5E;">=</span>ride-event</span>
<span id="cb4-2"><span class="ex" style="color: null;">aws</span> kinesis put-record <span class="dt" style="color: #AD0000;">\</span></span>
<span id="cb4-3">    <span class="at" style="color: #657422;">--stream-name</span> <span class="va" style="color: #111111;">${KINESIS_STREAM_NAME}</span> <span class="dt" style="color: #AD0000;">\</span></span>
<span id="cb4-4">    <span class="at" style="color: #657422;">--partition-key</span> 1 <span class="dt" style="color: #AD0000;">\</span></span>
<span id="cb4-5">    <span class="at" style="color: #657422;">--data</span> <span class="st" style="color: #20794D;">"Hello, this is a test."</span> <span class="dt" style="color: #AD0000;">\</span></span>
<span id="cb4-6">    <span class="at" style="color: #657422;">--cli-binary-format</span> raw-in-base64-out</span></code></pre></div>
<p>You should see the following output:</p>
<div class="sourceCode" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode numberSource bash number-lines code-with-copy"><code class="sourceCode bash"><span id="cb5-1"><span class="kw" style="color: #003B4F;">{</span></span>
<span id="cb5-2">    <span class="st" style="color: #20794D;">"ShardId"</span><span class="ex" style="color: null;">:</span> <span class="st" style="color: #20794D;">"shardId-000000000000"</span>,</span>
<span id="cb5-3">    <span class="st" style="color: #20794D;">"SequenceNumber"</span><span class="ex" style="color: null;">:</span> <span class="st" style="color: #20794D;">"49605507193692568746561138951989197221575295936257281026"</span></span>
<span id="cb5-4"><span class="kw" style="color: #003B4F;">}</span></span></code></pre></div>
<p>Press <code>q</code> to exit the output.</p>
<section id="view-the-logs" class="level3">
<h3 class="anchored" data-anchor-id="view-the-logs">View the logs</h3>
<p>Now that we have sent some data to the Kinesis stream, let’s view the logs in CloudWatch Logs. Follow these steps:</p>
<ol type="1">
<li>Navigate back to the <code>ride-duration-prediction-test</code> Lambda function in the Lambda console.</li>
<li>Choose the <strong>Monitor</strong> tab and then choose <strong>Logs</strong>.</li>
<li>Choose <code>View CloudWatch Logs</code> to view the logs in CloudWatch Logs.</li>
<li>Under the <strong>Log streams</strong> tab, choose the latest log stream.</li>
</ol>
<p>You’ll see the log messages. Find the log message that says <code>Received event:</code> and you’ll see the request body that we sent to the Kinesis stream. It should look something like this:</p>
<div class="sourceCode" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode numberSource bash number-lines code-with-copy"><code class="sourceCode bash"><span id="cb6-1"><span class="ex" style="color: null;">Received</span> event: {</span>
<span id="cb6-2">    <span class="st" style="color: #20794D;">"Records"</span><span class="ex" style="color: null;">:</span> [</span>
<span id="cb6-3">        <span class="kw" style="color: #003B4F;">{</span></span>
<span id="cb6-4">            <span class="st" style="color: #20794D;">"kinesis"</span><span class="ex" style="color: null;">:</span> {</span>
<span id="cb6-5">                <span class="st" style="color: #20794D;">"kinesisSchemaVersion"</span><span class="ex" style="color: null;">:</span> <span class="st" style="color: #20794D;">"1.0"</span>,</span>
<span id="cb6-6">                <span class="st" style="color: #20794D;">"partitionKey"</span><span class="ex" style="color: null;">:</span> <span class="st" style="color: #20794D;">"1"</span>,</span>
<span id="cb6-7">                <span class="st" style="color: #20794D;">"sequenceNumber"</span><span class="ex" style="color: null;">:</span> <span class="st" style="color: #20794D;">"49641836346418405924036776538604986498724303454435540994"</span>,</span>
<span id="cb6-8">                <span class="st" style="color: #20794D;">"data"</span><span class="ex" style="color: null;">:</span> <span class="st" style="color: #20794D;">"SGVsbG8sIFRoaXMgaXMgYSB0ZXN0IG1lc3NhZ2U="</span>,</span>
<span id="cb6-9">                <span class="st" style="color: #20794D;">"approximateArrivalTimestamp"</span><span class="ex" style="color: null;">:</span> 1687115491.219</span>
<span id="cb6-10">            <span class="ex" style="color: null;">},</span></span>
<span id="cb6-11">            <span class="st" style="color: #20794D;">"eventSource"</span><span class="ex" style="color: null;">:</span> <span class="st" style="color: #20794D;">"aws:kinesis"</span>,</span>
<span id="cb6-12">            <span class="st" style="color: #20794D;">"eventVersion"</span><span class="ex" style="color: null;">:</span> <span class="st" style="color: #20794D;">"1.0"</span>,</span>
<span id="cb6-13">            <span class="st" style="color: #20794D;">"eventID"</span><span class="ex" style="color: null;">:</span> <span class="st" style="color: #20794D;">"shardId-000000000000:49641836346418405924036776538604986498724303454435540994"</span>,</span>
<span id="cb6-14">            <span class="st" style="color: #20794D;">"eventName"</span><span class="ex" style="color: null;">:</span> <span class="st" style="color: #20794D;">"aws:kinesis:record"</span>,</span>
<span id="cb6-15">            <span class="st" style="color: #20794D;">"invokeIdentityArn"</span><span class="ex" style="color: null;">:</span> <span class="st" style="color: #20794D;">"arn:aws:iam::247894370182:role/lamdba-kinesis-role"</span>,</span>
<span id="cb6-16">            <span class="st" style="color: #20794D;">"awsRegion"</span><span class="ex" style="color: null;">:</span> <span class="st" style="color: #20794D;">"us-east-1"</span>,</span>
<span id="cb6-17">            <span class="st" style="color: #20794D;">"eventSourceARN"</span><span class="ex" style="color: null;">:</span> <span class="st" style="color: #20794D;">"arn:aws:kinesis:us-east-1:247894370182:stream/ride-event"</span></span>
<span id="cb6-18">        <span class="kw" style="color: #003B4F;">}</span></span>
<span id="cb6-19">    <span class="ex" style="color: null;">]</span></span>
<span id="cb6-20"><span class="er" style="color: #AD0000;">}</span></span></code></pre></div>
<p>You’ll notice that the data is base64 encoded. Let’s decode the data and print it to the logs. Add the following code to the <code>lambda_handler</code> function:</p>
<div class="sourceCode" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb7-1"><span class="co" style="color: #5E5E5E;"># Add the following code to the lambda_handler function</span></span>
<span id="cb7-2"><span class="im" style="color: #00769E;">import</span> base64</span>
<span id="cb7-3"></span>
<span id="cb7-4">record <span class="op" style="color: #5E5E5E;">=</span> event[<span class="st" style="color: #20794D;">'Records'</span>][<span class="dv" style="color: #AD0000;">0</span>]</span>
<span id="cb7-5"><span class="bu" style="color: null;">print</span>(<span class="st" style="color: #20794D;">"Decoded message: "</span> <span class="op" style="color: #5E5E5E;">+</span> base64.b64decode(record[<span class="st" style="color: #20794D;">'kinesis'</span>][<span class="st" style="color: #20794D;">'data'</span>]).decode(<span class="st" style="color: #20794D;">'utf-8'</span>))</span></code></pre></div>
<p>Deploy the changes and send some data to the Kinesis stream again. You should see the decoded message in the logs.</p>
<div class="callout-note callout callout-style-default callout-captioned">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-caption-container flex-fill">
Note
</div>
</div>
<div class="callout-body-container callout-body">
<p>Everytime you make changes and deploy the Lambda function, there will be a <strong>new entry</strong> in the <strong>Log streams</strong> tab. Make sure you choose the latest log stream.</p>
</div>
</div>
<p>Usually after the model prediction is made, we would want to send the prediction to another service. In the next section, we’ll send the prediction to another Kinesis stream.</p>
</section>
</section>
<section id="send-the-prediction-to-another-kinesis-stream" class="level2">
<h2 class="anchored" data-anchor-id="send-the-prediction-to-another-kinesis-stream">Send the prediction to another Kinesis stream</h2>
<p>In this section, we’ll send the prediction to another Kinesis stream. Follow these steps:</p>
<ol type="1">
<li>Open the <a href="https://console.aws.amazon.com/kinesis">Kinesis console</a> in the AWS Management Console.</li>
<li>Choose <strong>Kinesis Data Streams</strong> and then choose <strong>Create data stream</strong>.</li>
<li>Give the stream the following properties:
<ul>
<li><strong>Stream name</strong>: <code>ride-prediction</code></li>
<li><strong>Capacity mode</strong>: Provisioned</li>
<li><strong>Provisioned shards</strong>: 1</li>
</ul></li>
<li>Choose <strong>Create data stream</strong>.</li>
</ol>
<p>Now, that we have created the Kinesis stream, we want the lambda function to send the prediction to the Kinesis stream.</p>
<p>However, lambda function doesn’t have the permission to write to the Kinesis stream. Let’s add the permission to the <code>lambda-kinesis-role</code> role.</p>
<p>Follow these steps to create a policy and attach it to the role:</p>
<section id="create-a-policy" class="level3">
<h3 class="anchored" data-anchor-id="create-a-policy">Create a policy</h3>
<ol type="1">
<li>Sign in to the AWS Management Console and open the <a href="https://console.aws.amazon.com/iam/home#/policies">policies page</a> in the IAM console.</li>
<li>Choose <strong>Create policy</strong>.</li>
<li>Search for <code>kinesis</code> and click on it.</li>
<li>Under the <strong>Access level</strong> section, for <strong>Write</strong> select the <strong>PutRecord</strong> and <strong>PutRecords</strong> actions.</li>
<li>Under the <strong>Resources</strong> section, select <strong>Specific</strong> and then <strong>Add ARN</strong>.</li>
<li>Choose the <strong>Text</strong> tab and Copy-Paste the ARN of the Kinesis stream for <code>ride-prediction</code>. You can find the ARN of the Kinesis stream in the Kinesis console under the <strong>Data stream summary</strong> section.</li>
<li>Choose <strong>Add ARNs</strong> and then <strong>Next</strong>.</li>
<li>Give the policy the following properties:
<ul>
<li><strong>Name</strong>: <code>kinesis-write-policy-prediction</code></li>
<li><strong>Description</strong>: <code>Allows write access to the Prediction Kinesis stream</code></li>
</ul></li>
<li>Choose <strong>Create policy</strong>.</li>
</ol>
</section>
<section id="attach-the-policy-to-the-role" class="level3">
<h3 class="anchored" data-anchor-id="attach-the-policy-to-the-role">Attach the policy to the role</h3>
<ol type="1">
<li>Sign in to the AWS Management Console and open the <a href="https://console.aws.amazon.com/iam/home#/roles">roles page</a> in the IAM console.</li>
<li>Search for <code>lambda-kinesis-role</code> and click on it.</li>
<li>Under the <strong>Add Permissions</strong> dropdown, click on <strong>Attach policies</strong>.</li>
<li>Search for <code>kinesis-write-policy-prediction</code> and click on it. Chooes <strong>Add Permissions</strong>.</li>
</ol>
<p>Before moving forward to the next section, let’s review what we have done so far.</p>
</section>
</section>
<section id="review-what-we-have-done-so-far-optional" class="level2">
<h2 class="anchored" data-anchor-id="review-what-we-have-done-so-far-optional">Review what we have done so far [Optional]</h2>
<p>I’ll divide the review into three parts:</p>
<section id="part-1-create-a-lambda-function-and-a-kinesis-stream" class="level3">
<h3 class="anchored" data-anchor-id="part-1-create-a-lambda-function-and-a-kinesis-stream">Part 1: Create a Lambda function and a Kinesis stream</h3>
<ul>
<li>We created a Lambda function and explained how it works.</li>
<li>We also tried to modify the Lambda function and tested it.</li>
<li>We created a Kinesis stream that will receive the data.</li>
<li>We added a Kinesis trigger to the Lambda function, so that the Lambda function is invoked when data is sent to the Kinesis stream.</li>
<li>However, the Lambda function doesn’t have the permission to read from the Kinesis stream. So, we added the <code>AWSLambdaKinesisExecutionRole</code> permission to the <code>lambda-kinesis-role</code> role.</li>
</ul>
</section>
<section id="part-2-send-data-to-the-kinesis-stream" class="level3">
<h3 class="anchored" data-anchor-id="part-2-send-data-to-the-kinesis-stream">Part 2: Send data to the Kinesis stream</h3>
<ul>
<li>To test what we have done in part 1, we sent some data to the Kinesis stream.</li>
<li>Since, we are performing this action from our local machine, we need to have the AWS CLI installed and configured.</li>
<li>For a individual (user) to interact with the AWS resources, we created an IAM user. However, what are the permissions that we gave to the IAM user? We gave the permissions to send data to the Kinesis stream. We did this by attaching the <code>kinesis-write-policy</code> policy to the IAM user, allowing the user to write on <code>ride-event</code> Kinesis stream.</li>
<li>Similar to how we use API key to authenticate ourselves to a service, we used the <code>access key</code> and <code>secret key</code> of the IAM user to authenticate ourselves to AWS.</li>
<li>Lastly, we used the AWS CLI to send data to the Kinesis stream and view the logs in CloudWatch Logs.</li>
</ul>
</section>
<section id="part-3-send-the-prediction-to-another-kinesis-stream" class="level3">
<h3 class="anchored" data-anchor-id="part-3-send-the-prediction-to-another-kinesis-stream">Part 3: Send the prediction to another Kinesis stream</h3>
<ul>
<li>We created another Kinesis stream called <code>ride-prediction</code> which will receive the prediction from the Lambda function.</li>
<li>However, does the Lambda function have the permission to write to the Kinesis stream? No, it doesn’t. So, we created a policy called <code>kinesis-write-policy-prediction</code> that allows the Lambda function to write to the Kinesis stream.</li>
<li>We attached this policy to the <code>lambda-kinesis-role</code> role.</li>
<li>We’ll now update the Lambda function to send the prediction to the Kinesis stream.</li>
</ul>
</section>
</section>
<section id="update-the-lambda-function-to-send-the-prediction-to-the-kinesis-stream" class="level2">
<h2 class="anchored" data-anchor-id="update-the-lambda-function-to-send-the-prediction-to-the-kinesis-stream">Update the Lambda function to send the prediction to the Kinesis stream</h2>
<p>Now that we have created the policy and attached it to the role, let’s update the lambda function to send the prediction to the Kinesis stream.</p>
<div class="sourceCode" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb8-1"><span class="im" style="color: #00769E;">import</span> os</span>
<span id="cb8-2"><span class="im" style="color: #00769E;">import</span> json</span>
<span id="cb8-3"><span class="im" style="color: #00769E;">import</span> boto3</span>
<span id="cb8-4"><span class="im" style="color: #00769E;">import</span> base64</span>
<span id="cb8-5"></span>
<span id="cb8-6"><span class="co" style="color: #5E5E5E;"># Create a Kinesis client</span></span>
<span id="cb8-7">kinesis_client <span class="op" style="color: #5E5E5E;">=</span> boto3.client(<span class="st" style="color: #20794D;">'kinesis'</span>)</span>
<span id="cb8-8"></span>
<span id="cb8-9"><span class="co" style="color: #5E5E5E;"># Get the name of the Kinesis stream from the environment variable</span></span>
<span id="cb8-10">PREDICTIONS_STREAM_NAME <span class="op" style="color: #5E5E5E;">=</span> os.getenv(<span class="st" style="color: #20794D;">'PREDICTIONS_STREAM_NAME'</span>)</span>
<span id="cb8-11"></span>
<span id="cb8-12"><span class="kw" style="color: #003B4F;">def</span> lambda_handler(event, context):</span>
<span id="cb8-13">    <span class="bu" style="color: null;">print</span>(<span class="st" style="color: #20794D;">"Received event: "</span> <span class="op" style="color: #5E5E5E;">+</span> json.dumps(event))</span>
<span id="cb8-14">    record <span class="op" style="color: #5E5E5E;">=</span> event[<span class="st" style="color: #20794D;">'Records'</span>][<span class="dv" style="color: #AD0000;">0</span>]</span>
<span id="cb8-15">    decoded_data <span class="op" style="color: #5E5E5E;">=</span> base64.b64decode(record[<span class="st" style="color: #20794D;">'kinesis'</span>][<span class="st" style="color: #20794D;">'data'</span>]).decode(<span class="st" style="color: #20794D;">'utf-8'</span>)</span>
<span id="cb8-16">    <span class="bu" style="color: null;">print</span>(<span class="st" style="color: #20794D;">"Decoded message: "</span> <span class="op" style="color: #5E5E5E;">+</span> decoded_data)</span>
<span id="cb8-17">    </span>
<span id="cb8-18">    ride_event <span class="op" style="color: #5E5E5E;">=</span> json.loads(decoded_data)</span>
<span id="cb8-19">    ride_id <span class="op" style="color: #5E5E5E;">=</span> ride_event[<span class="st" style="color: #20794D;">'ride_id'</span>]</span>
<span id="cb8-20">    </span>
<span id="cb8-21">    <span class="co" style="color: #5E5E5E;"># Create a dummy prediction</span></span>
<span id="cb8-22">    prediction <span class="op" style="color: #5E5E5E;">=</span> {</span>
<span id="cb8-23">        <span class="st" style="color: #20794D;">'model'</span>: <span class="st" style="color: #20794D;">'ride_duration_prediction_model'</span>,</span>
<span id="cb8-24">        <span class="st" style="color: #20794D;">'version'</span>: <span class="st" style="color: #20794D;">'12345'</span>,</span>
<span id="cb8-25">        <span class="st" style="color: #20794D;">'prediction'</span>: {</span>
<span id="cb8-26">            <span class="st" style="color: #20794D;">'ride_id'</span>: ride_id,</span>
<span id="cb8-27">            <span class="st" style="color: #20794D;">'ride_duration'</span>: <span class="fl" style="color: #AD0000;">10.0</span></span>
<span id="cb8-28">        }</span>
<span id="cb8-29">    }</span>
<span id="cb8-30"></span>
<span id="cb8-31">    <span class="co" style="color: #5E5E5E;"># Write the prediction on the prediction-kinesis-stream</span></span>
<span id="cb8-32">    kinesis_client.put_record(</span>
<span id="cb8-33">        StreamName<span class="op" style="color: #5E5E5E;">=</span>PREDICTIONS_STREAM_NAME,</span>
<span id="cb8-34">        Data<span class="op" style="color: #5E5E5E;">=</span>json.dumps(prediction),</span>
<span id="cb8-35">        PartitionKey<span class="op" style="color: #5E5E5E;">=</span><span class="bu" style="color: null;">str</span>(ride_id)</span>
<span id="cb8-36">    )</span>
<span id="cb8-37"></span>
<span id="cb8-38">    <span class="cf" style="color: #003B4F;">return</span> {</span>
<span id="cb8-39">        <span class="st" style="color: #20794D;">'statusCode'</span>: <span class="dv" style="color: #AD0000;">200</span>,</span>
<span id="cb8-40">        <span class="st" style="color: #20794D;">'body'</span>: json.dumps(<span class="st" style="color: #20794D;">'Hello from Lambda!'</span>)</span>
<span id="cb8-41">    }</span></code></pre></div>
<p>We used <code>boto3</code> to create a Kinesis client. We then used the <code>put_record</code> method to write the prediction to the Kinesis stream. We used the <code>PREDICTIONS_STREAM_NAME</code> environment variable to get the name of the Kinesis stream.</p>
<p><code>Deploy</code> the Lambda function.</p>
<p>Setup the environment variable by following these steps:</p>
<ol type="1">
<li>Go to the Lambda console and click on the <strong>Configuration</strong> tab.</li>
<li>Under the <strong>Environment variables</strong> section, click on <strong>Edit</strong>.</li>
<li>Choose <strong>Add environment variable</strong>.</li>
<li>Give the environment variable the following properties:
<ul>
<li><strong>Key</strong>: <code>PREDICTIONS_STREAM_NAME</code></li>
<li><strong>Value</strong>: <code>ride-prediction</code></li>
</ul></li>
<li>Click on <strong>Save</strong>.</li>
</ol>
<p>Now, that we have updated the Lambda function, let’s test it.</p>
<section id="test-the-lambda-function" class="level3">
<h3 class="anchored" data-anchor-id="test-the-lambda-function">Test the Lambda function</h3>
<p>Use the following code to test the Lambda function:</p>
<div class="sourceCode" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode numberSource bash number-lines code-with-copy"><code class="sourceCode bash"><span id="cb9-1"><span class="va" style="color: #111111;">KINESIS_STREAM_NAME</span><span class="op" style="color: #5E5E5E;">=</span>ride-event</span>
<span id="cb9-2"><span class="ex" style="color: null;">aws</span> kinesis put-record <span class="dt" style="color: #AD0000;">\</span></span>
<span id="cb9-3">    <span class="at" style="color: #657422;">--stream-name</span> <span class="va" style="color: #111111;">${KINESIS_STREAM_NAME}</span> <span class="dt" style="color: #AD0000;">\</span></span>
<span id="cb9-4">    <span class="at" style="color: #657422;">--partition-key</span> 1 <span class="dt" style="color: #AD0000;">\</span></span>
<span id="cb9-5">    <span class="at" style="color: #657422;">--data</span> <span class="st" style="color: #20794D;">'{"ride_id": 1}'</span> <span class="dt" style="color: #AD0000;">\</span></span>
<span id="cb9-6">    <span class="at" style="color: #657422;">--cli-binary-format</span> raw-in-base64-out</span></code></pre></div>
<p>Like before you can view the logs in CloudWatch Logs.</p>
</section>
<section id="view-the-prediction-in-the-kinesis-stream" class="level3">
<h3 class="anchored" data-anchor-id="view-the-prediction-in-the-kinesis-stream">View the prediction in the Kinesis stream</h3>
<p>For the user to view the prediction, we need to give the user the permission to read from the Kinesis stream. We’ll do this by attaching the <code>kinesis-read-policy-prediction</code> policy to the <code>kinesis-user</code>.</p>
<p>Create the <code>kinesis-read-policy-prediction</code> policy by following these steps:</p>
<ol type="1">
<li>Sign in to the AWS Management Console and open the <a href="https://console.aws.amazon.com/iam/home#/policies">policies page</a> in the IAM console.</li>
<li>Choose <strong>Create policy</strong>.</li>
<li>Search for <code>kinesis</code> and click on it.</li>
<li>Under the <strong>Access level</strong> section, for <strong>Read</strong> select the <strong>GetRecords</strong> and <strong>GetShardIterator</strong> actions.</li>
<li>Under the <strong>Resources</strong> section, select <strong>Specific</strong> and then <strong>Add ARN</strong>.</li>
<li>Choose the <strong>Text</strong> tab and Copy-Paste the ARN of the Kinesis stream for <code>ride-prediction</code>. You can find the ARN of the Kinesis stream in the Kinesis console under the <strong>Data stream summary</strong> section.</li>
<li>Choose <strong>Add ARNs</strong> and then <strong>Next</strong>.</li>
<li>Give the policy the following properties:
<ul>
<li><strong>Name</strong>: <code>kinesis-read-policy-prediction</code></li>
<li><strong>Description</strong>: <code>Allows read access to the Prediction Kinesis stream</code></li>
</ul></li>
<li>Choose <strong>Create policy</strong>.</li>
</ol>
<p>Attach the <code>kinesis-read-policy-prediction</code> policy to the <code>kinesis-user</code> by following these steps:</p>
<ol type="1">
<li>Sign in to the AWS Management Console and open the <a href="https://console.aws.amazon.com/iam/home#/users">users page</a> in the IAM console.</li>
<li>Choose <strong>kinesis-user</strong>.</li>
<li>Choose the <strong>Add Permissions</strong> tab and then <strong>Add permissions</strong>.</li>
<li>Choose <strong>Attach existing policies directly</strong>.</li>
<li>Search for <code>kinesis-read-policy-prediction</code> and select it. Choose <strong>Next</strong>.</li>
<li>Choose <strong>Add permissions</strong>.</li>
</ol>
<p>Now that we push the prediction to the prediction stream, we can view the prediction in the Kinesis stream. Use the following code in the terminal to view the prediction:</p>
<div class="sourceCode" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode numberSource bash number-lines code-with-copy"><code class="sourceCode bash"><span id="cb10-1"><span class="va" style="color: #111111;">KINESIS_STREAM_OUTPUT</span><span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'ride-prediction'</span></span>
<span id="cb10-2"><span class="co" style="color: #5E5E5E;"># Get the shard id, since we only have one shard we can hardcode it</span></span>
<span id="cb10-3"><span class="va" style="color: #111111;">SHARD</span><span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'shardId-000000000000'</span></span>
<span id="cb10-4"></span>
<span id="cb10-5"><span class="co" style="color: #5E5E5E;"># Get the shard iterator</span></span>
<span id="cb10-6"><span class="va" style="color: #111111;">SHARD_ITERATOR</span><span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">$(</span><span class="ex" style="color: null;">aws</span> kinesis <span class="dt" style="color: #AD0000;">\</span></span>
<span id="cb10-7">    get-shard-iterator <span class="dt" style="color: #AD0000;">\</span></span>
<span id="cb10-8">        <span class="at" style="color: #657422;">--shard-id</span> <span class="va" style="color: #111111;">${SHARD}</span> <span class="dt" style="color: #AD0000;">\</span></span>
<span id="cb10-9">        <span class="at" style="color: #657422;">--shard-iterator-type</span> TRIM_HORIZON <span class="dt" style="color: #AD0000;">\</span></span>
<span id="cb10-10">        <span class="at" style="color: #657422;">--stream-name</span> <span class="va" style="color: #111111;">${KINESIS_STREAM_OUTPUT}</span> <span class="dt" style="color: #AD0000;">\</span></span>
<span id="cb10-11">        <span class="at" style="color: #657422;">--query</span> <span class="st" style="color: #20794D;">'ShardIterator'</span> <span class="dt" style="color: #AD0000;">\</span></span>
<span id="cb10-12"><span class="va" style="color: #111111;">)</span></span>
<span id="cb10-13"></span>
<span id="cb10-14"><span class="co" style="color: #5E5E5E;"># Get the records</span></span>
<span id="cb10-15"><span class="va" style="color: #111111;">RESULT</span><span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">$(</span><span class="ex" style="color: null;">aws</span> kinesis get-records <span class="at" style="color: #657422;">--shard-iterator</span> <span class="va" style="color: #111111;">$SHARD_ITERATOR)</span></span>
<span id="cb10-16"></span>
<span id="cb10-17"><span class="co" style="color: #5E5E5E;"># Print the data</span></span>
<span id="cb10-18"><span class="bu" style="color: null;">echo</span> <span class="va" style="color: #111111;">${RESULT}</span> </span>
<span id="cb10-19"></span>
<span id="cb10-20"><span class="co" style="color: #5E5E5E;"># Print the data in a more readable format for a specific record</span></span>
<span id="cb10-21"><span class="bu" style="color: null;">echo</span> <span class="va" style="color: #111111;">${RESULT}</span> <span class="kw" style="color: #003B4F;">|</span> <span class="ex" style="color: null;">jq</span> <span class="at" style="color: #657422;">-r</span> <span class="st" style="color: #20794D;">'.Records[0].Data'</span> <span class="kw" style="color: #003B4F;">|</span> <span class="fu" style="color: #4758AB;">base64</span> <span class="at" style="color: #657422;">--decode</span></span></code></pre></div>
<p>A shard iterator specifies the shard position from which to start reading data records sequentially.</p>
<p>There are many types of shard iterators. We are using the <code>TRIM_HORIZON</code> shard iterator type. This type causes the shard iterator to point to the last untrimmed record in the shard in the system, which is the oldest data record in the shard.</p>
<p>For more information on shard iterators, see <a href="https://docs.aws.amazon.com/kinesis/latest/APIReference/API_GetShardIterator.html">here</a>.</p>
<p>We get the data from the iterator and print it.</p>
<div class="callout-tip callout callout-style-default callout-captioned">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-caption-container flex-fill">
Tip
</div>
</div>
<div class="callout-body-container callout-body">
<p>jq is a lightweight and flexible command-line JSON processor. If you don’t have <code>jq</code> installed on your machine, you can install it by following these <a href="https://jqlang.github.io/jq/download/">instructions</a></p>
</div>
</div>
</section>
</section>
<section id="dockerize-the-prediction-service" class="level2">
<h2 class="anchored" data-anchor-id="dockerize-the-prediction-service">Dockerize the prediction service</h2>
<p>Until now, we have been using a dummy script to generate the prediction. In this section, we will upload model to S3 and then use it to generate the prediction. We will use Docker to containerize the prediction service.</p>
<section id="upload-the-model-to-s3" class="level3">
<h3 class="anchored" data-anchor-id="upload-the-model-to-s3">Upload the model to S3</h3>
<p>We will use the <code>lin_reg.bin</code> file that I had created for you. You can find it <a href="https://drive.google.com/file/d/1XbjfjLkk55LSLrgjMWnvsURK981hATjF/view?usp=sharing">here</a>. Download the file and upload it to the <code>s3://ride-prediction-model</code> bucket. Follow these steps to upload the file:</p>
<ol type="1">
<li>Go to the <a href="https://console.aws.amazon.com/s3">S3 console</a> and click on the <code>Create bucket</code> button.</li>
<li>Give the bucket the following properties:
<ul>
<li><strong>Bucket name</strong>: <code>ride-prediction-model</code></li>
</ul></li>
<li>Click on <strong>Create Bucket</strong>.</li>
<li>Click on the bucket name.</li>
<li>Click on the <strong>Upload</strong> button.</li>
<li>Click on <strong>Add files</strong> and select the <code>lin_reg.bin</code> file.</li>
<li>Click on <strong>Upload</strong>.</li>
</ol>
</section>
<section id="update-the-lambda-function" class="level3">
<h3 class="anchored" data-anchor-id="update-the-lambda-function">Update the lambda function</h3>
<p>Locally create a <code>lambda_function.py</code> file with the following code:</p>
<div class="sourceCode" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb11-1"><span class="im" style="color: #00769E;">import</span> os</span>
<span id="cb11-2"><span class="im" style="color: #00769E;">import</span> json</span>
<span id="cb11-3"><span class="im" style="color: #00769E;">import</span> s3fs</span>
<span id="cb11-4"><span class="im" style="color: #00769E;">import</span> boto3</span>
<span id="cb11-5"><span class="im" style="color: #00769E;">import</span> base64</span>
<span id="cb11-6"><span class="im" style="color: #00769E;">import</span> pickle</span>
<span id="cb11-7"></span>
<span id="cb11-8">s3 <span class="op" style="color: #5E5E5E;">=</span> s3fs.S3FileSystem(anon<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">False</span>)</span>
<span id="cb11-9">kinesis_client <span class="op" style="color: #5E5E5E;">=</span> boto3.client(<span class="st" style="color: #20794D;">'kinesis'</span>)</span>
<span id="cb11-10">PREDICTIONS_STREAM_NAME <span class="op" style="color: #5E5E5E;">=</span> os.getenv(<span class="st" style="color: #20794D;">'PREDICTIONS_STREAM_NAME'</span>)</span>
<span id="cb11-11"></span>
<span id="cb11-12"><span class="bu" style="color: null;">file</span> <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">'s3://ride-prediction-model/lin_reg.bin'</span></span>
<span id="cb11-13"><span class="cf" style="color: #003B4F;">with</span> s3.<span class="bu" style="color: null;">open</span>(<span class="bu" style="color: null;">file</span>, <span class="st" style="color: #20794D;">'rb'</span>) <span class="im" style="color: #00769E;">as</span> handle:</span>
<span id="cb11-14">    dv, model <span class="op" style="color: #5E5E5E;">=</span> pickle.load(handle)</span>
<span id="cb11-15"></span>
<span id="cb11-16">TEST_RUN <span class="op" style="color: #5E5E5E;">=</span> os.getenv(<span class="st" style="color: #20794D;">'TEST_RUN'</span>, <span class="st" style="color: #20794D;">'False'</span>) <span class="op" style="color: #5E5E5E;">==</span> <span class="st" style="color: #20794D;">'True'</span></span>
<span id="cb11-17"></span>
<span id="cb11-18"><span class="kw" style="color: #003B4F;">def</span> prepare_features(ride):</span>
<span id="cb11-19">    features <span class="op" style="color: #5E5E5E;">=</span> {}</span>
<span id="cb11-20">    features[<span class="st" style="color: #20794D;">'PU_DO'</span>] <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">'</span><span class="sc" style="color: #5E5E5E;">%s</span><span class="st" style="color: #20794D;">_</span><span class="sc" style="color: #5E5E5E;">%s</span><span class="st" style="color: #20794D;">'</span> <span class="op" style="color: #5E5E5E;">%</span> (ride[<span class="st" style="color: #20794D;">'PULocationID'</span>], ride[<span class="st" style="color: #20794D;">'DOLocationID'</span>])</span>
<span id="cb11-21">    features[<span class="st" style="color: #20794D;">'trip_distance'</span>] <span class="op" style="color: #5E5E5E;">=</span> ride[<span class="st" style="color: #20794D;">'trip_distance'</span>]</span>
<span id="cb11-22">    <span class="cf" style="color: #003B4F;">return</span> features</span>
<span id="cb11-23"></span>
<span id="cb11-24"><span class="kw" style="color: #003B4F;">def</span> predict(features):</span>
<span id="cb11-25">    X <span class="op" style="color: #5E5E5E;">=</span> dv.transform(features)</span>
<span id="cb11-26">    pred <span class="op" style="color: #5E5E5E;">=</span> model.predict(X)</span>
<span id="cb11-27">    <span class="cf" style="color: #003B4F;">return</span> <span class="bu" style="color: null;">float</span>(pred[<span class="dv" style="color: #AD0000;">0</span>])</span>
<span id="cb11-28"></span>
<span id="cb11-29"><span class="kw" style="color: #003B4F;">def</span> lambda_handler(event, context):  </span>
<span id="cb11-30">    predictions_events <span class="op" style="color: #5E5E5E;">=</span> []</span>
<span id="cb11-31">    </span>
<span id="cb11-32">    <span class="cf" style="color: #003B4F;">for</span> record <span class="kw" style="color: #003B4F;">in</span> event[<span class="st" style="color: #20794D;">'Records'</span>]:</span>
<span id="cb11-33">        encoded_data <span class="op" style="color: #5E5E5E;">=</span> record[<span class="st" style="color: #20794D;">'kinesis'</span>][<span class="st" style="color: #20794D;">'data'</span>]</span>
<span id="cb11-34">        decoded_data <span class="op" style="color: #5E5E5E;">=</span> base64.b64decode(encoded_data).decode(<span class="st" style="color: #20794D;">'utf-8'</span>)</span>
<span id="cb11-35">        ride_event <span class="op" style="color: #5E5E5E;">=</span> json.loads(decoded_data)</span>
<span id="cb11-36"></span>
<span id="cb11-37">        ride <span class="op" style="color: #5E5E5E;">=</span> ride_event[<span class="st" style="color: #20794D;">'ride'</span>]</span>
<span id="cb11-38">        ride_id <span class="op" style="color: #5E5E5E;">=</span> ride_event[<span class="st" style="color: #20794D;">'ride_id'</span>]</span>
<span id="cb11-39">    </span>
<span id="cb11-40">        features <span class="op" style="color: #5E5E5E;">=</span> prepare_features(ride)</span>
<span id="cb11-41">        prediction <span class="op" style="color: #5E5E5E;">=</span> predict(features)</span>
<span id="cb11-42">    </span>
<span id="cb11-43">        prediction_event <span class="op" style="color: #5E5E5E;">=</span> {</span>
<span id="cb11-44">            <span class="st" style="color: #20794D;">'model'</span>: <span class="st" style="color: #20794D;">'ride_duration_prediction_model'</span>,</span>
<span id="cb11-45">            <span class="st" style="color: #20794D;">'version'</span>: <span class="st" style="color: #20794D;">'123'</span>,</span>
<span id="cb11-46">            <span class="st" style="color: #20794D;">'prediction'</span>: {</span>
<span id="cb11-47">                <span class="st" style="color: #20794D;">'ride_duration'</span>: prediction,</span>
<span id="cb11-48">                <span class="st" style="color: #20794D;">'ride_id'</span>: ride_id   </span>
<span id="cb11-49">            }</span>
<span id="cb11-50">        }</span>
<span id="cb11-51"></span>
<span id="cb11-52">        <span class="co" style="color: #5E5E5E;"># Comment the below if statement if you want to test the lambda function locally</span></span>
<span id="cb11-53">        <span class="cf" style="color: #003B4F;">if</span> <span class="kw" style="color: #003B4F;">not</span> TEST_RUN:</span>
<span id="cb11-54">            kinesis_client.put_record(</span>
<span id="cb11-55">                StreamName<span class="op" style="color: #5E5E5E;">=</span>PREDICTIONS_STREAM_NAME,</span>
<span id="cb11-56">                Data<span class="op" style="color: #5E5E5E;">=</span>json.dumps(prediction_event),</span>
<span id="cb11-57">                PartitionKey<span class="op" style="color: #5E5E5E;">=</span><span class="bu" style="color: null;">str</span>(ride_id)</span>
<span id="cb11-58">            )</span>
<span id="cb11-59">        </span>
<span id="cb11-60">        predictions_events.append(prediction_event)</span>
<span id="cb11-61"></span>
<span id="cb11-62">    <span class="cf" style="color: #003B4F;">return</span> {</span>
<span id="cb11-63">        <span class="st" style="color: #20794D;">'predictions'</span>: predictions_events</span>
<span id="cb11-64">    }</span></code></pre></div>
</section>
<section id="create-a-virtual-environment" class="level3">
<h3 class="anchored" data-anchor-id="create-a-virtual-environment">Create a virtual environment</h3>
<p>Create a virtual environment and install the required packages:</p>
<div class="sourceCode" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode numberSource bash number-lines code-with-copy"><code class="sourceCode bash"><span id="cb12-1"><span class="ex" style="color: null;">pipenv</span> install boto3 scikit-learn s3fs <span class="at" style="color: #657422;">--python</span> 3.9</span></code></pre></div>
</section>
<section id="create-a-dockerfile" class="level3">
<h3 class="anchored" data-anchor-id="create-a-dockerfile">Create a Dockerfile</h3>
<p>Create a <code>Dockerfile</code> with the following content:</p>
<div class="sourceCode" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode numberSource dockerfile number-lines code-with-copy"><code class="sourceCode dockerfile"><span id="cb13-1"><span class="kw" style="color: #003B4F;">FROM</span> public.ecr.aws/lambda/python:3.9</span>
<span id="cb13-2"></span>
<span id="cb13-3"><span class="kw" style="color: #003B4F;">RUN</span> <span class="ex" style="color: null;">pip</span> install <span class="at" style="color: #657422;">-U</span> pip</span>
<span id="cb13-4"><span class="kw" style="color: #003B4F;">RUN</span> <span class="ex" style="color: null;">pip</span> install pipenv</span>
<span id="cb13-5"></span>
<span id="cb13-6"><span class="kw" style="color: #003B4F;">COPY</span> [<span class="st" style="color: #20794D;">"Pipfile"</span>, <span class="st" style="color: #20794D;">"Pipfile.lock"</span>, <span class="st" style="color: #20794D;">"./"</span>]</span>
<span id="cb13-7"></span>
<span id="cb13-8"><span class="kw" style="color: #003B4F;">RUN</span> <span class="ex" style="color: null;">pipenv</span> install <span class="at" style="color: #657422;">--system</span> <span class="at" style="color: #657422;">--deploy</span></span>
<span id="cb13-9"></span>
<span id="cb13-10"><span class="kw" style="color: #003B4F;">COPY</span> [<span class="st" style="color: #20794D;">"lambda_function.py"</span>, <span class="st" style="color: #20794D;">"./"</span>]</span>
<span id="cb13-11"></span>
<span id="cb13-12"><span class="kw" style="color: #003B4F;">CMD</span> [<span class="st" style="color: #20794D;">"lambda_function.lambda_handler"</span>]</span></code></pre></div>
</section>
<section id="build-the-docker-image" class="level3">
<h3 class="anchored" data-anchor-id="build-the-docker-image">Build the Docker image</h3>
<p>Build the Docker image:</p>
<div class="sourceCode" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode numberSource bash number-lines code-with-copy"><code class="sourceCode bash"><span id="cb14-1"><span class="co" style="color: #5E5E5E;"># Windows/Linux users</span></span>
<span id="cb14-2"><span class="ex" style="color: null;">docker</span> build <span class="at" style="color: #657422;">-t</span> stream-model-duration:v1 .</span>
<span id="cb14-3"></span>
<span id="cb14-4"><span class="co" style="color: #5E5E5E;"># Mac users</span></span>
<span id="cb14-5"><span class="ex" style="color: null;">docker</span> build <span class="at" style="color: #657422;">-t</span> stream-model-duration:v1 . <span class="at" style="color: #657422;">--platform</span><span class="op" style="color: #5E5E5E;">=</span>linux/amd64</span></code></pre></div>
</section>
<section id="give-lambda-access-to-s3" class="level3">
<h3 class="anchored" data-anchor-id="give-lambda-access-to-s3">Give lambda access to s3</h3>
<p>We need to give the lambda function access to the <code>ride-prediction-model</code> bucket. Follow these steps to give the lambda function access to the bucket:</p>
<p>Create the <code>s3-list-read</code> policy by following these steps:</p>
<ol type="1">
<li>Sign in to the AWS Management Console and open the <a href="https://console.aws.amazon.com/iam/home#/policies">policies page</a> in the IAM console.</li>
<li>Choose <strong>Create policy</strong>.</li>
<li>Search for <code>s3</code> and click on it.</li>
<li>Under the <strong>Access level</strong> section, for <strong>Read</strong> select the <strong>GetObject</strong> action and <strong>List</strong> select the <strong>ListBucket</strong> action.</li>
<li>Under the <strong>Resources</strong> section, select <strong>Specific</strong> and then <strong>Add ARN</strong>. You’ll need to add the ARNs for s3 bucket and <code>lin_reg.bin</code> object in s3. See the image below for an example.</li>
</ol>
<p><img src="https://sagarthacker.com/posts/mlops/images/lambda-kinesis/s3-arn.png" class="img-fluid"></p>
<ol start="6" type="1">
<li>Choose the <strong>Text</strong> tab and Copy-Paste the ARN of the S3 bucket and object.</li>
<li>Choose <strong>Add ARNs</strong> and then <strong>Next</strong>.</li>
<li>Give the policy the following properties:
<ul>
<li><strong>Name</strong>: <code>s3-list-read</code></li>
<li><strong>Description</strong>: <code>Allows lambda to list and read objects from s3</code></li>
</ul></li>
<li>Choose <strong>Create policy</strong>.</li>
</ol>
<p>Attach the policy to the role:</p>
<ol type="1">
<li>Sign in to the AWS Management Console and open the <a href="https://console.aws.amazon.com/iam/home#/roles">roles page</a> in the IAM console.</li>
<li>Search for <code>lambda-kinesis-role</code> and click on it.</li>
<li>Under the <strong>Add Permissions</strong> dropdown, click on <strong>Attach policies</strong>.</li>
<li>Search for <code>s3-list-read</code> and click on it. Chooes <strong>Add Permissions</strong>.</li>
</ol>
</section>
<section id="create-ecr-repository" class="level3">
<h3 class="anchored" data-anchor-id="create-ecr-repository">Create ECR Repository</h3>
<p>We will use ECR to store the Docker image. Follow these steps to create a repository in ECR:</p>
<ol type="1">
<li>Go to the <a href="https://console.aws.amazon.com/ecr">ECR console</a>.</li>
<li>Click on <strong>Create repository</strong>.</li>
<li>Give the repository the following properties:
<ul>
<li><strong>Repository name</strong>: <code>duration-model</code></li>
</ul></li>
<li>Click on <strong>Create repository</strong>.</li>
</ol>
</section>
<section id="attach-permissions-to-the-user-that-will-push-the-docker-image-to-ecr" class="level3">
<h3 class="anchored" data-anchor-id="attach-permissions-to-the-user-that-will-push-the-docker-image-to-ecr">Attach permissions to the user that will push the Docker image to ECR</h3>
<p>Create the <code>ecr-read-write</code> policy by following these steps:</p>
<ol type="1">
<li>Sign in to the AWS Management Console and open the <a href="https://console.aws.amazon.com/iam/home#/policies">policies page</a> in the IAM console.</li>
<li>Choose <strong>Create policy</strong>.</li>
<li>Search for <code>ecr</code> and click on it.</li>
<li>Under the <strong>Access level</strong> section,
<ul>
<li><strong>Read</strong> select <strong>BatchCheckLayerAvailability</strong> and <strong>GetAuthorizationToken</strong></li>
<li><strong>Write</strong> select <strong>CompleteLayerUpload</strong>, <strong>InitiateLayerUpload</strong>, <strong>PutImage</strong>, and <strong>UploadLayerPart</strong>.</li>
</ul></li>
<li>Under the <strong>Resources</strong> section, select <strong>Specific</strong> and then <strong>Add ARN</strong>. You’ll need to add the ARNs for ecr repository.</li>
<li>Choose the <strong>Text</strong> tab and Copy-Paste the ARN of the ecr repo.</li>
<li>Choose <strong>Add ARNs</strong> and then <strong>Next</strong>.</li>
<li>Give the policy the following properties:
<ul>
<li><strong>Name</strong>: <code>ecr-read-write</code></li>
<li><strong>Description</strong>: <code>Allows user to read and write to ecr repo</code></li>
</ul></li>
<li>Choose <strong>Create policy</strong>.</li>
</ol>
<p>Attach the policy to the role:</p>
<ol type="1">
<li>Sign in to the AWS Management Console and open the <a href="https://console.aws.amazon.com/iam/home#/roles">roles page</a> in the IAM console.</li>
<li>Search for <code>lambda-kinesis-role</code> and click on it.</li>
<li>Under the <strong>Add Permissions</strong> dropdown, click on <strong>Attach policies</strong>.</li>
<li>Search for <code>ecr-read-write</code> and click on it. Chooes <strong>Add Permissions</strong>.</li>
</ol>
</section>
<section id="upload-the-docker-image-to-ecr" class="level3">
<h3 class="anchored" data-anchor-id="upload-the-docker-image-to-ecr">Upload the Docker image to ECR</h3>
<p>Authenticate Docker to an Amazon ECR registry with <code>get-login-password</code>:</p>
<div class="sourceCode" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode numberSource bash number-lines code-with-copy"><code class="sourceCode bash"><span id="cb15-1"><span class="co" style="color: #5E5E5E;"># Authenticate Docker to an Amazon ECR registry with get-login-password</span></span>
<span id="cb15-2"><span class="ex" style="color: null;">aws</span> ecr get-login-password <span class="at" style="color: #657422;">--region</span> <span class="op" style="color: #5E5E5E;">&lt;</span>REGION<span class="op" style="color: #5E5E5E;">&gt;</span> <span class="kw" style="color: #003B4F;">|</span> <span class="ex" style="color: null;">docker</span> login <span class="at" style="color: #657422;">--username</span> AWS <span class="at" style="color: #657422;">--password-stdin</span> <span class="op" style="color: #5E5E5E;">&lt;</span>AWS_ACCOUNT_ID<span class="op" style="color: #5E5E5E;">&gt;</span>.dkr.ecr.us-east-1.amazonaws.com</span></code></pre></div>
<p>Replace the <code>&lt;REGION&gt;</code> and <code>&lt;AWS_ACCOUNT_ID&gt;</code> with the region and account id of your AWS account.</p>
<p>Tag the Docker image and push it to ECR:</p>
<div class="sourceCode" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode numberSource bash number-lines code-with-copy"><code class="sourceCode bash"><span id="cb16-1"><span class="co" style="color: #5E5E5E;"># Store the URI of the ECR repository</span></span>
<span id="cb16-2"><span class="va" style="color: #111111;">REMOTE_URI</span><span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"&lt;AWS_ACCOUNT_ID&gt;.dkr.ecr.us-east-2.amazonaws.com/duration-model"</span></span>
<span id="cb16-3"><span class="va" style="color: #111111;">REMOTE_TAG</span><span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"v1"</span></span>
<span id="cb16-4"><span class="va" style="color: #111111;">REMOTE_IMAGE</span><span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">${REMOTE_URI}</span>:<span class="va" style="color: #111111;">${REMOTE_TAG}</span></span>
<span id="cb16-5"></span>
<span id="cb16-6"><span class="co" style="color: #5E5E5E;"># Tag the local image with the remote image URI</span></span>
<span id="cb16-7"><span class="va" style="color: #111111;">LOCAL_IMAGE</span><span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"stream-model-duration:v1"</span></span>
<span id="cb16-8"><span class="ex" style="color: null;">docker</span> tag <span class="va" style="color: #111111;">${LOCAL_IMAGE}</span> <span class="va" style="color: #111111;">${REMOTE_IMAGE}</span></span>
<span id="cb16-9"></span>
<span id="cb16-10"><span class="co" style="color: #5E5E5E;"># Push the image to ECR</span></span>
<span id="cb16-11"><span class="ex" style="color: null;">docker</span> push <span class="va" style="color: #111111;">${REMOTE_IMAGE}</span></span></code></pre></div>
</section>
<section id="create-a-lambda-function-1" class="level3">
<h3 class="anchored" data-anchor-id="create-a-lambda-function-1">Create a lambda function</h3>
<p>We’ll create a lambda function using the docker image that we created. Follow these steps to create the lambda function:</p>
<ol type="1">
<li>Go to the <a href="https://console.aws.amazon.com/lambda">lambda console</a>.</li>
<li>Click on <strong>Create function</strong>.</li>
<li>Choose <strong>Container image</strong> option.</li>
<li>Give the function the following properties:
<ul>
<li><strong>Function name</strong>: <code>ride-duration-prediction</code></li>
<li><strong>Container image URI</strong>: Browse and select the image that we pushed to ECR.</li>
</ul></li>
<li>Toggle the <code>Change default execution role</code>.</li>
<li>Choose the <code>Use an existing role</code> option.</li>
<li>Select the <code>lambda-kinesis-role</code> role.</li>
<li>Click on <strong>Create function</strong>.</li>
</ol>
<p>Setup the environment variable by following these steps:</p>
<ol type="1">
<li>Go to the Lambda console and click on the <strong>Configuration</strong> tab.</li>
<li>Under the <strong>Environment variables</strong> section, click on <strong>Edit</strong>.</li>
<li>Choose <strong>Add environment variable</strong>.</li>
<li>Give the environment variable the following properties:
<ul>
<li><strong>Key</strong>: <code>PREDICTIONS_STREAM_NAME</code></li>
<li><strong>Value</strong>: <code>ride-prediction</code></li>
</ul></li>
<li>Click on <strong>Save</strong>.</li>
</ol>
<p>Update the timeout and memory settings by following these steps:</p>
<ol type="1">
<li>Go to the Lambda console and click on the <strong>Configuration</strong> tab.</li>
<li>Under the <strong>General configuration</strong> section, click on <strong>Edit</strong>.</li>
<li>Increase the <strong>Timeout</strong> to <code>30 seconds</code> and <strong>Memory</strong> to <code>256 MB</code>.</li>
</ol>
</section>
<section id="add-a-trigger-to-the-lambda-function-1" class="level3">
<h3 class="anchored" data-anchor-id="add-a-trigger-to-the-lambda-function-1">Add a trigger to the lambda function</h3>
<p>We’ll add a trigger to the lambda function so that it gets invoked when a new object is created in the <code>ride-prediction-model</code> bucket. Follow these steps to add a trigger to the lambda function:</p>
<ol type="1">
<li>Navigate back to the <code>ride-duration-prediction</code> Lambda function in the Lambda console.</li>
<li>In the <strong>Function overview</strong> section, choose <strong>Add trigger</strong> button.</li>
<li>Choose <strong>Kinesis</strong> from the list of triggers.</li>
<li>Give the trigger the following properties:
<ul>
<li><strong>Kinesis stream</strong>: <code>ride-event</code></li>
</ul></li>
<li>Choose <strong>Add</strong>.</li>
</ol>
<div class="callout-tip callout callout-style-default callout-captioned">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-caption-container flex-fill">
Tip
</div>
</div>
<div class="callout-body-container callout-body">
<p>You can delete the <code>ride-duration-prediction-test</code> lambda function that we created earlier. Since the trigger for both the lambda functions is the same, we don’t want to trigger both the lambda functions.</p>
</div>
</div>
</section>
<section id="test-the-lambda-function-1" class="level3">
<h3 class="anchored" data-anchor-id="test-the-lambda-function-1">Test the lambda function</h3>
<p>We’ll test the lambda function by invoking it with a sample event. Run the following command to invoke the lambda function:</p>
<div class="sourceCode" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode numberSource bash number-lines code-with-copy"><code class="sourceCode bash"><span id="cb17-1"><span class="va" style="color: #111111;">KINESIS_STREAM_INPUT</span><span class="op" style="color: #5E5E5E;">=</span>ride-event</span>
<span id="cb17-2"><span class="ex" style="color: null;">aws</span> kinesis put-record <span class="dt" style="color: #AD0000;">\</span></span>
<span id="cb17-3">    <span class="at" style="color: #657422;">--stream-name</span> <span class="va" style="color: #111111;">${KINESIS_STREAM_INPUT}</span> <span class="dt" style="color: #AD0000;">\</span></span>
<span id="cb17-4">    <span class="at" style="color: #657422;">--partition-key</span> 1 <span class="dt" style="color: #AD0000;">\</span></span>
<span id="cb17-5">    <span class="at" style="color: #657422;">--data</span> <span class="st" style="color: #20794D;">'{"ride": {"PULocationID": 130,"DOLocationID": 205,"trip_distance": 3.66}, "ride_id": 156}'</span> <span class="dt" style="color: #AD0000;">\</span></span>
<span id="cb17-6">    <span class="at" style="color: #657422;">--cli-binary-format</span> raw-in-base64-out</span></code></pre></div>
<p>Navigate to the <a href="https://console.aws.amazon.com/cloudwatch">CloudWatch console</a> and click on <strong>Logs</strong>. You should see a log stream for the <code>ride-duration-prediction</code> lambda function. Click on the log stream and you should see the log messages from the lambda function.</p>
<p>Similar to how we read the output from the <code>ride-prediction</code> stream, you can follow the same steps to read the output from the <code>ride-prediction</code> stream.</p>
</section>
</section>
<section id="clean-up-your-resources" class="level2">
<h2 class="anchored" data-anchor-id="clean-up-your-resources">Clean up your resources</h2>
<p>To avoid incurring future charges, delete the resources you created unless you want to retain them for future use.</p>
<ol type="1">
<li>Delete the <code>ride-prediction</code> stream.</li>
<li>Delete the <code>ride-event</code> stream.</li>
<li>Delete the <code>ride-duration-prediction</code> lambda function.</li>
<li>Delete the <code>ride-prediction-model</code> bucket.</li>
<li>Delete the <code>duration-model</code> repository from ECR.</li>
<li>Delete all the policies, roles, and users that we created.</li>
</ol>
</section>
<section id="references" class="level2">
<h2 class="anchored" data-anchor-id="references">References</h2>
<ol type="1">
<li><a href="https://aws-lambda-for-python-developers.readthedocs.io/en/latest/02_event_and_context/">AWS event &amp; context</a></li>
<li><a href="https://docs.aws.amazon.com/lambda/latest/dg/with-kinesis-example.html">Tutorial: Using AWS Lambda with Amazon Kinesis</a></li>
<li><a href="https://gallery.ecr.aws/lambda/python">AWS lambda/python docker images</a></li>
<li><a href="https://docs.aws.amazon.com/AmazonECR/latest/userguide/registry_auth.html">AWS ECR Private Registry Authentication</a></li>
<li><a href="https://docs.aws.amazon.com/AmazonECR/latest/userguide/docker-push-ecr-image.html">Pushing a Docker Image to AWS ECR</a></li>
</ol>
</section>
<section id="conclusion" class="level2">
<h2 class="anchored" data-anchor-id="conclusion">Conclusion</h2>
<p>In this article, you learned how to build a real-time streaming application using Kinesis Data Streams and Lambda. Also, dockerized the machine learning model, registered it with ECR, and used it in the lambda function.</p>
<p>I hope you enjoyed this article. If you have any questions, feel free to reach out to me on Twitter or Email.</p>
<p>👏 Upvote if you liked it, 💬 comment if you loved it. Hope to see you guys in the next one. ✌️ Peace!</p>


</section>

 ]]></description>
  <category>MLOps</category>
  <category>AWS Lambda</category>
  <category>AWS Kinesis</category>
  <category>AWS ECR</category>
  <category>Docker</category>
  <category>Deployment</category>
  <guid>https://sagarthacker.com/posts/mlops/aws-deployment-lambda-kinesis.html</guid>
  <pubDate>Wed, 21 Jun 2023 04:00:00 GMT</pubDate>
  <media:content url="https://sagarthacker.com/posts/mlops/images/lambda-kinesis/aws-deployment.png" medium="image" type="image/png" height="70" width="144"/>
</item>
<item>
  <title>Prefect Cloud Deployment</title>
  <dc:creator>Sagar Thacker</dc:creator>
  <link>https://sagarthacker.com/posts/mlops/prefect-cloud.html</link>
  <description><![CDATA[ 




<p>Prefect Cloud is a hosted platform for managing your data workflows. That means you don’t have to own your own servers. We know Prefect follows a hybrid approach, which means the storage of your flow and the execution environment (prefect server) are seperate from each other.</p>
<p>Why should this matter to you? Simply, it means you can run your code on your own infrastructure keeping the code and data on your own servers. Only the metadata about the run is sent to Prefect Cloud. This is a great way to keep your data secure.</p>
<p>To understand this better, let’s look at it with an example. We’ll follow through the following steps:</p>
<ol type="1">
<li>Create a GitHub repo.</li>
<li>Create a prefect project.</li>
<li>Write a prefect flow, configure the yaml file, and push it to GitHub.</li>
<li>Log into Prefect Cloud through CLI.</li>
<li>Deploy the flow to Prefect Cloud.</li>
<li>Create a worker and run the flow.</li>
<li>[Optional] Run a mlflow experiment.</li>
</ol>
<p>In our example, we’ll store our code on GitHub and use the Prefect Cloud to record your runs. We’ll start the prefect worker locally and run the flow locally.</p>
<p>Everytime you run the deployed flow, the worker will clone the github repo and use the code to run the flow. All the metadata about the run will be sent to Prefect Cloud.</p>
<p>Let’s get started!</p>
<section id="deployment-on-prefect-cloud" class="level2">
<h2 class="anchored" data-anchor-id="deployment-on-prefect-cloud">Deployment on Prefect Cloud</h2>
<section id="step-1-create-a-github-repo" class="level3">
<h3 class="anchored" data-anchor-id="step-1-create-a-github-repo">Step 1: Create a GitHub repo</h3>
<p>Login to your GitHub account and create a new repository. Name it <code>prefect-cloud-demo</code> for instance.</p>
<p>Locally, initialize a git repo and add the remote origin to your local repo.</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode numberSource bash number-lines code-with-copy"><code class="sourceCode bash"><span id="cb1-1"><span class="co" style="color: #5E5E5E;"># Initialize a git repo</span></span>
<span id="cb1-2"><span class="fu" style="color: #4758AB;">git</span> init</span>
<span id="cb1-3"><span class="co" style="color: #5E5E5E;"># Add the remote origin to your local repo</span></span>
<span id="cb1-4"><span class="fu" style="color: #4758AB;">git</span> remote add origin [your-github-repo-url]</span></code></pre></div>
</section>
<section id="step-2-setup" class="level3">
<h3 class="anchored" data-anchor-id="step-2-setup">Step 2: Setup</h3>
<p>It is a good practice to create a virtual environment for each project. This helps us keep our dependencies separate and avoid any version conflicts.</p>
<div class="code-with-filename">
<div class="code-with-filename-file">
<pre><strong>requirements.txt</strong></pre>
</div>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode numberSource bash number-lines code-with-copy"><code class="sourceCode bash"><span id="cb2-1"><span class="va" style="color: #111111;">fastparquet</span><span class="op" style="color: #5E5E5E;">=</span>=2023.4.0</span>
<span id="cb2-2"><span class="va" style="color: #111111;">mlflow</span><span class="op" style="color: #5E5E5E;">=</span>=2.3.1</span>
<span id="cb2-3"><span class="va" style="color: #111111;">pandas</span><span class="op" style="color: #5E5E5E;">=</span>=2.0.1</span>
<span id="cb2-4"><span class="va" style="color: #111111;">prefect</span><span class="op" style="color: #5E5E5E;">=</span>=2.10.8</span>
<span id="cb2-5"><span class="va" style="color: #111111;">scikit_learn</span><span class="op" style="color: #5E5E5E;">=</span>=1.2.2</span>
<span id="cb2-6"><span class="va" style="color: #111111;">xgboost</span><span class="op" style="color: #5E5E5E;">=</span>=1.7.5</span>
<span id="cb2-7"><span class="ex" style="color: null;">psycopg2-binary==2.9.5</span></span></code></pre></div>
</div>
<p>Let’s create a virtual environment named <code>venv</code> and install all the dependencies.</p>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode numberSource bash number-lines code-with-copy"><code class="sourceCode bash"><span id="cb3-1"><span class="co" style="color: #5E5E5E;"># Create a virtual environment</span></span>
<span id="cb3-2"><span class="ex" style="color: null;">conda</span> create <span class="at" style="color: #657422;">-p</span> venv python=3.10 <span class="at" style="color: #657422;">-y</span></span>
<span id="cb3-3"></span>
<span id="cb3-4"><span class="co" style="color: #5E5E5E;"># Activate the virtual environment</span></span>
<span id="cb3-5"><span class="ex" style="color: null;">conda</span> activate venv/</span>
<span id="cb3-6"></span>
<span id="cb3-7"><span class="co" style="color: #5E5E5E;"># Install all the dependencies</span></span>
<span id="cb3-8"><span class="ex" style="color: null;">pip</span> install <span class="at" style="color: #657422;">-r</span> requirements.txt <span class="at" style="color: #657422;">--no-cache-dir</span></span></code></pre></div>
</section>
<section id="step-3-create-a-prefect-project" class="level3">
<h3 class="anchored" data-anchor-id="step-3-create-a-prefect-project">Step 3: Create a prefect project</h3>
<p>Create a prefect project using the CLI.</p>
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode numberSource bash number-lines code-with-copy"><code class="sourceCode bash"><span id="cb4-1"><span class="ex" style="color: null;">prefect</span> project init</span></code></pre></div>
<p>The folder structure of your project should look like this:</p>
<div class="sourceCode" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode numberSource bash number-lines code-with-copy"><code class="sourceCode bash"><span id="cb5-1"><span class="bu" style="color: null;">.</span></span>
<span id="cb5-2"><span class="ex" style="color: null;">├──</span> deployment.yaml</span>
<span id="cb5-3"><span class="ex" style="color: null;">├──</span> prefect.yaml</span>
<span id="cb5-4"><span class="ex" style="color: null;">├──</span> requirements.txt</span>
<span id="cb5-5"><span class="ex" style="color: null;">└──</span> venv</span>
<span id="cb5-6"><span class="ex" style="color: null;">└──</span> ./prefect <span class="er" style="color: #AD0000;">(</span><span class="ex" style="color: null;">hidden</span><span class="kw" style="color: #003B4F;">)</span></span>
<span id="cb5-7"><span class="ex" style="color: null;">└──</span> .prefectignore <span class="er" style="color: #AD0000;">(</span><span class="ex" style="color: null;">hidden</span><span class="kw" style="color: #003B4F;">)</span></span></code></pre></div>
<div class="callout-note callout callout-style-default callout-captioned">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-caption-container flex-fill">
Note
</div>
</div>
<div class="callout-body-container callout-body">
<p>One thing to note here is that in the <code>prefect.yaml</code> file you’ll see key named <code>pull</code> with a value for <code>git_clone_project</code>. It will contain the url of your GitHub repo. It automatically gets added when you run the <code>prefect project init</code> command in a git repo.</p>
<p>Everytime you run a deployment flow it will pull the code from the repo to run it.</p>
</div>
</div>
</section>
<section id="step-3-write-a-prefect-flow-configure-the-yaml-file-and-push-it-to-github" class="level3">
<h3 class="anchored" data-anchor-id="step-3-write-a-prefect-flow-configure-the-yaml-file-and-push-it-to-github">Step 3: Write a prefect flow, configure the yaml file, and push it to GitHub</h3>
<p>We’ll use the same flow we created in the previous section to keep things simple.</p>
<div class="code-with-filename">
<div class="code-with-filename-file">
<pre><strong>"prefect_demo.py</strong></pre>
</div>
<div class="sourceCode" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb6-1"><span class="im" style="color: #00769E;">from</span> prefect <span class="im" style="color: #00769E;">import</span> flow, task</span>
<span id="cb6-2"></span>
<span id="cb6-3"><span class="at" style="color: #657422;">@task</span>(name<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"say_hello"</span>, log_prints<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>)</span>
<span id="cb6-4"><span class="kw" style="color: #003B4F;">def</span> say_hello():</span>
<span id="cb6-5">    <span class="bu" style="color: null;">print</span>(<span class="st" style="color: #20794D;">"Hello, I'm a Task!"</span>)</span>
<span id="cb6-6"></span>
<span id="cb6-7"><span class="at" style="color: #657422;">@flow</span>(name<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"mlflow-flow"</span>, log_prints<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>)</span>
<span id="cb6-8"><span class="kw" style="color: #003B4F;">def</span> flow_hello():</span>
<span id="cb6-9">    <span class="bu" style="color: null;">print</span>(<span class="st" style="color: #20794D;">"Hello, I'm a Flow!"</span>)</span>
<span id="cb6-10">    <span class="bu" style="color: null;">print</span>(<span class="st" style="color: #20794D;">"I'm about to call a Task..."</span>)</span>
<span id="cb6-11">    say_hello()</span>
<span id="cb6-12"></span>
<span id="cb6-13"><span class="cf" style="color: #003B4F;">if</span> <span class="va" style="color: #111111;">__name__</span> <span class="op" style="color: #5E5E5E;">==</span> <span class="st" style="color: #20794D;">"__main__"</span>:</span>
<span id="cb6-14">    flow_hello()</span></code></pre></div>
</div>
<p>Let’s now configure the <code>deployment.yaml</code> file. This file tells Prefect Cloud how to deploy your flow.</p>
<div class="code-with-filename">
<div class="code-with-filename-file">
<pre><strong>deployment.yaml</strong></pre>
</div>
<div class="sourceCode" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode numberSource yaml number-lines code-with-copy"><code class="sourceCode yaml"><span id="cb7-1"><span class="fu" style="color: #4758AB;">deployments</span><span class="kw" style="color: #003B4F;">:</span></span>
<span id="cb7-2"><span class="kw" style="color: #003B4F;">-</span><span class="co" style="color: #5E5E5E;"> # base metadata</span></span>
<span id="cb7-3"><span class="at" style="color: #657422;">  </span><span class="fu" style="color: #4758AB;">name</span><span class="kw" style="color: #003B4F;">:</span><span class="at" style="color: #657422;"> manual-deployment</span></span>
<span id="cb7-4"><span class="at" style="color: #657422;">  </span><span class="fu" style="color: #4758AB;">tags</span><span class="kw" style="color: #003B4F;">:</span><span class="at" style="color: #657422;"> </span><span class="kw" style="color: #003B4F;">[</span><span class="st" style="color: #20794D;">"test"</span><span class="kw" style="color: #003B4F;">]</span></span>
<span id="cb7-5"><span class="at" style="color: #657422;">  </span><span class="fu" style="color: #4758AB;">description</span><span class="kw" style="color: #003B4F;">:</span><span class="at" style="color: #657422;"> </span><span class="st" style="color: #20794D;">"Trigger deployment using `run` CLI command or Prefect UI"</span></span>
<span id="cb7-6"><span class="at" style="color: #657422;">  </span></span>
<span id="cb7-7"><span class="co" style="color: #5E5E5E;">  # flow-specific fields</span></span>
<span id="cb7-8"><span class="at" style="color: #657422;">  </span><span class="fu" style="color: #4758AB;">entrypoint</span><span class="kw" style="color: #003B4F;">:</span><span class="at" style="color: #657422;"> prefect_demo.py:flow_hello</span></span>
<span id="cb7-9"><span class="at" style="color: #657422;">  </span><span class="fu" style="color: #4758AB;">parameters</span><span class="kw" style="color: #003B4F;">:</span></span>
<span id="cb7-10"><span class="at" style="color: #657422;">    </span><span class="fu" style="color: #4758AB;">name</span><span class="kw" style="color: #003B4F;">:</span><span class="at" style="color: #657422;"> </span><span class="st" style="color: #20794D;">"Sagar"</span></span>
<span id="cb7-11"><span class="at" style="color: #657422;">  </span></span>
<span id="cb7-12"><span class="co" style="color: #5E5E5E;">  # infra-specific fields</span></span>
<span id="cb7-13"><span class="at" style="color: #657422;">  </span><span class="fu" style="color: #4758AB;">work_pool</span><span class="kw" style="color: #003B4F;">:</span></span>
<span id="cb7-14"><span class="at" style="color: #657422;">    </span><span class="fu" style="color: #4758AB;">name</span><span class="kw" style="color: #003B4F;">:</span><span class="at" style="color: #657422;"> test-pool</span></span>
<span id="cb7-15"><span class="at" style="color: #657422;">    </span><span class="fu" style="color: #4758AB;">work_queue_name</span><span class="kw" style="color: #003B4F;">:</span><span class="at" style="color: #657422;"> demo</span></span></code></pre></div>
</div>
<p>Let’s now push the code to GitHub.</p>
<div class="sourceCode" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode numberSource bash number-lines code-with-copy"><code class="sourceCode bash"><span id="cb8-1"><span class="co" style="color: #5E5E5E;"># Add all the files to git</span></span>
<span id="cb8-2"><span class="fu" style="color: #4758AB;">git</span> add .</span>
<span id="cb8-3"></span>
<span id="cb8-4"><span class="co" style="color: #5E5E5E;"># Add .gitignore</span></span>
<span id="cb8-5"><span class="fu" style="color: #4758AB;">touch</span> .gitignore</span>
<span id="cb8-6"><span class="co" style="color: #5E5E5E;"># Add the following to .gitignore file from https://github.com/github/gitignore/blob/main/Python.gitignore</span></span>
<span id="cb8-7"></span>
<span id="cb8-8"><span class="co" style="color: #5E5E5E;"># Commit the changes</span></span>
<span id="cb8-9"><span class="fu" style="color: #4758AB;">git</span> commit <span class="at" style="color: #657422;">-m</span> <span class="st" style="color: #20794D;">"Initial commit"</span></span>
<span id="cb8-10"></span>
<span id="cb8-11"><span class="co" style="color: #5E5E5E;"># Push the code to GitHub</span></span>
<span id="cb8-12"><span class="fu" style="color: #4758AB;">git</span> push <span class="at" style="color: #657422;">-u</span> origin main</span></code></pre></div>
</section>
<section id="step-4-log-into-prefect-cloud-through-cli" class="level3">
<h3 class="anchored" data-anchor-id="step-4-log-into-prefect-cloud-through-cli">Step 4: Log into Prefect Cloud through CLI</h3>
<p>If you haven’t already created an account on Prefect Cloud, you can do so <a href="https://app.prefect.cloud/auth/login">here</a>. Enter your email and you’ll receive a link to login to Prefect Cloud.</p>
<p>Now, we’ll create a workspace in Prefect Cloud. Workspaces are only available on prefect cloud. Workspaces offer the flexibility to organize and compartmentalize your workflows according to your preferences.</p>
<p>For instance, you can leverage separate workspaces to isolate development, staging, and production environments. They also provide a means to create clear boundaries between different teams, ensuring better organization and collaboration.</p>
<p>Create a workspace named <code>demo</code>.</p>
<p>Let’s go ahead and login to Prefect Cloud through CLI. Run the following command to see that which server you’re connected to by default.</p>
<div class="sourceCode" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode numberSource bash number-lines code-with-copy"><code class="sourceCode bash"><span id="cb9-1"><span class="ex" style="color: null;">prefect</span> version</span></code></pre></div>
<p>Under the Server section, you’ll notice Database as sqlite and SQLite version mentioned. This means when you run the flow, it will create a sqlite database on your local machine and store the metadata there.</p>
<div class="sourceCode" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode numberSource bash number-lines code-with-copy"><code class="sourceCode bash"><span id="cb10-1"><span class="ex" style="color: null;">Version:</span>             2.10.8</span>
<span id="cb10-2"><span class="ex" style="color: null;">API</span> version:         0.8.4</span>
<span id="cb10-3"><span class="ex" style="color: null;">Python</span> version:      3.10.11</span>
<span id="cb10-4"><span class="ex" style="color: null;">Git</span> commit:          79093235</span>
<span id="cb10-5"><span class="ex" style="color: null;">Built:</span>               Mon, May 8, 2023 12:23 PM</span>
<span id="cb10-6"><span class="ex" style="color: null;">OS/Arch:</span>             darwin/x86_64</span>
<span id="cb10-7"><span class="ex" style="color: null;">Profile:</span>             default</span>
<span id="cb10-8"><span class="ex" style="color: null;">Server</span> type:         ephemeral</span>
<span id="cb10-9"><span class="ex" style="color: null;">Server:</span></span>
<span id="cb10-10">  <span class="ex" style="color: null;">Database:</span>          sqlite</span>
<span id="cb10-11">  <span class="ex" style="color: null;">SQLite</span> version:    3.41.2</span></code></pre></div>
<p>Let’s now login to Prefect Cloud through CLI. Run the following command</p>
<div class="sourceCode" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode numberSource bash number-lines code-with-copy"><code class="sourceCode bash"><span id="cb11-1"><span class="ex" style="color: null;">prefect</span> cloud login</span></code></pre></div>
<p>and you’ll be presented with two options:</p>
<ol type="1">
<li>Log in with a web browser.</li>
<li>Paste an API key.</li>
</ol>
<p>Let’s go ahead and login with a web browser. By default, option 1 will be highlighted and you can press enter to continue. This will open a browser window and you’ll be asked to authorize.</p>
<p>Once you’ve authorized, you’ll see a message like <code>Authenticated with Prefect Cloud! Using workspace '[email]/demo'</code>.</p>
<p>Now if you run <code>prefect version</code>, you’ll see that the server has changed to <code>cloud</code>. This means that when you run the flow, it will upload the metadata to Prefect Cloud.</p>
<div class="sourceCode" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode numberSource bash number-lines code-with-copy"><code class="sourceCode bash"><span id="cb12-1"><span class="ex" style="color: null;">Version:</span>             2.10.8</span>
<span id="cb12-2"><span class="ex" style="color: null;">API</span> version:         0.8.4</span>
<span id="cb12-3"><span class="ex" style="color: null;">Python</span> version:      3.10.11</span>
<span id="cb12-4"><span class="ex" style="color: null;">Git</span> commit:          79093235</span>
<span id="cb12-5"><span class="ex" style="color: null;">Built:</span>               Mon, May 8, 2023 12:23 PM</span>
<span id="cb12-6"><span class="ex" style="color: null;">OS/Arch:</span>             darwin/x86_64</span>
<span id="cb12-7"><span class="ex" style="color: null;">Profile:</span>             default</span>
<span id="cb12-8"><span class="ex" style="color: null;">Server</span> type:         cloud</span></code></pre></div>
</section>
<section id="step-5-deploy-the-flow-to-prefect-cloud" class="level3">
<h3 class="anchored" data-anchor-id="step-5-deploy-the-flow-to-prefect-cloud">Step 5: Deploy the flow to Prefect Cloud</h3>
<p>Before we deploy the flow, let’s create a work pool. Follow the steps below:</p>
<ol type="1">
<li>Go to the <code>Work Pools</code> tab on the left side of the screen.</li>
<li>Click on the<code>+</code> icon on the top middle of the screen.</li>
<li>Enter the name of the work pool as <code>test-pool</code>.</li>
<li>Select the <code>Local Subprocess</code> as the Infrastructure Type.</li>
<li>Click on the <code>Create</code> button.</li>
</ol>
<p>Now, let’s deploy the flow to Prefect Cloud. Run the following command:</p>
<div class="sourceCode" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode numberSource bash number-lines code-with-copy"><code class="sourceCode bash"><span id="cb13-1"><span class="ex" style="color: null;">prefect</span> deploy <span class="at" style="color: #657422;">--name</span> manual-deployment</span></code></pre></div>
</section>
<section id="step-6-run-the-deployed-flow" class="level3">
<h3 class="anchored" data-anchor-id="step-6-run-the-deployed-flow">Step 6: Run the deployed flow</h3>
<p>To run the deployed flow, we need a <code>worker</code> that will run the flow. Run the following command to start a worker:</p>
<div class="sourceCode" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode numberSource bash number-lines code-with-copy"><code class="sourceCode bash"><span id="cb14-1"><span class="ex" style="color: null;">prefect</span> worker start <span class="at" style="color: #657422;">-p</span> test-pool</span></code></pre></div>
<p>Open a new terminal to run the flow. Now we have two options to run the deployed flow:</p>
<ol type="1">
<li>Through CLI</li>
<li>Through Prefect UI</li>
</ol>
<p>Previously I have mostly used the Prefect UI to run the flow. But in this case, we’ll use the CLI to run the flow. Run the following command to run the flow:</p>
<div class="sourceCode" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode numberSource bash number-lines code-with-copy"><code class="sourceCode bash"><span id="cb15-1"><span class="co" style="color: #5E5E5E;"># Command to run the flow</span></span>
<span id="cb15-2"><span class="ex" style="color: null;">prefect</span> deployment run [DEPLOYMENT-NAME]</span>
<span id="cb15-3"></span>
<span id="cb15-4"><span class="co" style="color: #5E5E5E;"># In our case, the command will be</span></span>
<span id="cb15-5"><span class="ex" style="color: null;">prefect</span> deployment run  hello-flow/manual-deployment</span></code></pre></div>
<p>If you don’t know the name of the deployment, you can run the following command to see all the deployments:</p>
<div class="sourceCode" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode numberSource bash number-lines code-with-copy"><code class="sourceCode bash"><span id="cb16-1"><span class="ex" style="color: null;">prefect</span> deployment ls</span></code></pre></div>
<p>Congratulations 🎉🎉🎉! You’ve successfully deployed and run your first flow on Prefect Cloud.</p>
<p>Prefect gives you the flexibility to store your code anywhere and run it anywhere. You can start the worker on local, EC2, or any other machine and run the flow.</p>
<p>Now, let’s see how to run the deployment with mlflow to record the metrics.</p>
</section>
</section>
<section id="run-the-deployment-with-mlflow-optional" class="level2">
<h2 class="anchored" data-anchor-id="run-the-deployment-with-mlflow-optional">Run the deployment with mlflow [Optional]</h2>
<p>We’ll tweak the flow a little bit to record the metrics with mlflow. The code is super super simple, however, the main take away is how to set the tracking uri and start the mlflow server to track the metrics.</p>
<div class="code-with-filename">
<div class="code-with-filename-file">
<pre><strong>mlflow_demo.py</strong></pre>
</div>
<div class="sourceCode" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb17-1"><span class="im" style="color: #00769E;">import</span> mlflow</span>
<span id="cb17-2"><span class="im" style="color: #00769E;">from</span> prefect <span class="im" style="color: #00769E;">import</span> flow, task</span>
<span id="cb17-3"></span>
<span id="cb17-4"><span class="at" style="color: #657422;">@task</span>(name<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"mlflow-run"</span>, log_prints<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>)</span>
<span id="cb17-5"><span class="kw" style="color: #003B4F;">def</span> mlflow_run():</span>
<span id="cb17-6">  <span class="cf" style="color: #003B4F;">with</span> mlflow.start_run():</span>
<span id="cb17-7">    mlflow.log_metric(<span class="st" style="color: #20794D;">"metric"</span>, <span class="fl" style="color: #AD0000;">1.0</span>)</span>
<span id="cb17-8"></span>
<span id="cb17-9"><span class="at" style="color: #657422;">@flow</span>(name<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"mlflow-flow"</span>, log_prints<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>)</span>
<span id="cb17-10"><span class="kw" style="color: #003B4F;">def</span> flow_hello():</span>
<span id="cb17-11">    mlflow.set_tracking_uri(<span class="st" style="color: #20794D;">"http://127.0.0.1:5000"</span>)</span>
<span id="cb17-12">    mlflow.set_experiment(<span class="st" style="color: #20794D;">"demo"</span>)</span>
<span id="cb17-13">    </span>
<span id="cb17-14">    <span class="bu" style="color: null;">print</span>(<span class="st" style="color: #20794D;">"Hello, I'm a Flow!"</span>)</span>
<span id="cb17-15">    <span class="bu" style="color: null;">print</span>(<span class="st" style="color: #20794D;">"I'm about to call a Task..."</span>)</span>
<span id="cb17-16">    mlflow_run()</span>
<span id="cb17-17"></span>
<span id="cb17-18"><span class="cf" style="color: #003B4F;">if</span> <span class="va" style="color: #111111;">__name__</span> <span class="op" style="color: #5E5E5E;">==</span> <span class="st" style="color: #20794D;">"__main__"</span>:</span>
<span id="cb17-19">    flow_hello()</span></code></pre></div>
</div>
<p>Let’s now configure the <code>deployment.yaml</code> file. Add the following lines to the <code>deployment.yaml</code> file.</p>
<div class="code-with-filename">
<div class="code-with-filename-file">
<pre><strong>deployment.yaml</strong></pre>
</div>
<div class="sourceCode" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode numberSource yaml number-lines code-with-copy"><code class="sourceCode yaml"><span id="cb18-1"><span class="kw" style="color: #003B4F;">-</span><span class="co" style="color: #5E5E5E;"> # base metadata</span></span>
<span id="cb18-2"><span class="at" style="color: #657422;">  </span><span class="fu" style="color: #4758AB;">name</span><span class="kw" style="color: #003B4F;">:</span><span class="at" style="color: #657422;"> mlflow-deployment</span></span>
<span id="cb18-3"><span class="at" style="color: #657422;">  </span><span class="fu" style="color: #4758AB;">description</span><span class="kw" style="color: #003B4F;">:</span><span class="at" style="color: #657422;"> </span><span class="st" style="color: #20794D;">"Trigger deployment using `run` CLI command or Prefect UI"</span></span>
<span id="cb18-4"><span class="at" style="color: #657422;">  </span></span>
<span id="cb18-5"><span class="co" style="color: #5E5E5E;">  # flow-specific fields</span></span>
<span id="cb18-6"><span class="at" style="color: #657422;">  </span><span class="fu" style="color: #4758AB;">entrypoint</span><span class="kw" style="color: #003B4F;">:</span><span class="at" style="color: #657422;"> mlflow_demo.py:flow_hello</span></span>
<span id="cb18-7"><span class="at" style="color: #657422;">  </span></span>
<span id="cb18-8"><span class="co" style="color: #5E5E5E;">  # infra-specific fields</span></span>
<span id="cb18-9"><span class="at" style="color: #657422;">  </span><span class="fu" style="color: #4758AB;">work_pool</span><span class="kw" style="color: #003B4F;">:</span></span>
<span id="cb18-10"><span class="at" style="color: #657422;">    </span><span class="fu" style="color: #4758AB;">name</span><span class="kw" style="color: #003B4F;">:</span><span class="at" style="color: #657422;"> test-pool</span></span>
<span id="cb18-11"><span class="at" style="color: #657422;">    </span><span class="fu" style="color: #4758AB;">work_queue_name</span><span class="kw" style="color: #003B4F;">:</span><span class="at" style="color: #657422;"> mlflow-demo</span></span></code></pre></div>
</div>
<p>Let’s now push the code to GitHub.</p>
<div class="sourceCode" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode numberSource bash number-lines code-with-copy"><code class="sourceCode bash"><span id="cb19-1"><span class="co" style="color: #5E5E5E;"># Add all the files to git</span></span>
<span id="cb19-2"><span class="fu" style="color: #4758AB;">git</span> add .</span>
<span id="cb19-3"></span>
<span id="cb19-4"><span class="co" style="color: #5E5E5E;"># Commit the changes</span></span>
<span id="cb19-5"><span class="fu" style="color: #4758AB;">git</span> commit <span class="at" style="color: #657422;">-m</span> <span class="st" style="color: #20794D;">"Add mlflow demo"</span></span>
<span id="cb19-6"></span>
<span id="cb19-7"><span class="co" style="color: #5E5E5E;"># Push the code to GitHub</span></span>
<span id="cb19-8"><span class="fu" style="color: #4758AB;">git</span> push <span class="at" style="color: #657422;">-u</span> origin main</span></code></pre></div>
<p>Now, we’ll deploy the new flow to Prefect Cloud. Run the following command:</p>
<div class="sourceCode" id="cb20" style="background: #f1f3f5;"><pre class="sourceCode numberSource bash number-lines code-with-copy"><code class="sourceCode bash"><span id="cb20-1"><span class="co" style="color: #5E5E5E;"># Deploy the flow</span></span>
<span id="cb20-2"><span class="ex" style="color: null;">prefect</span> deploy <span class="at" style="color: #657422;">--name</span> mlflow-deployment</span>
<span id="cb20-3"></span>
<span id="cb20-4"><span class="co" style="color: #5E5E5E;"># Checkout the deployment name</span></span>
<span id="cb20-5"><span class="ex" style="color: null;">prefect</span> deployment ls</span></code></pre></div>
<p>We already have a worker running. However, if you don’t have a worker running, you can start a worker by running the following command:</p>
<div class="sourceCode" id="cb21" style="background: #f1f3f5;"><pre class="sourceCode numberSource bash number-lines code-with-copy"><code class="sourceCode bash"><span id="cb21-1"><span class="ex" style="color: null;">prefect</span> worker start <span class="at" style="color: #657422;">-p</span> test-pool</span></code></pre></div>
<p>Let’s start the mlflow server. Run the following command:</p>
<div class="sourceCode" id="cb22" style="background: #f1f3f5;"><pre class="sourceCode numberSource bash number-lines code-with-copy"><code class="sourceCode bash"><span id="cb22-1"><span class="ex" style="color: null;">mlflow</span> server <span class="at" style="color: #657422;">--backend-store-uri</span> sqlite:///mlflow.db <span class="at" style="color: #657422;">--default-artifact-root</span> ./artifacts <span class="at" style="color: #657422;">--host</span> 127.0.0.1 <span class="at" style="color: #657422;">--port</span> 5000</span></code></pre></div>
<p>Now, let’s run the flow. Run the following command:</p>
<div class="sourceCode" id="cb23" style="background: #f1f3f5;"><pre class="sourceCode numberSource bash number-lines code-with-copy"><code class="sourceCode bash"><span id="cb23-1"><span class="ex" style="color: null;">prefect</span> deployment run mlflow-flow/mlflow-deployment</span></code></pre></div>
<p>Some pointer to note:</p>
<ul>
<li>We set the tracking uri and experiment name in the function where the flow begins.
<ul>
<li>This is important because if you set the tracking uri and experiment name in the <code>__main__</code> function, it will not work.</li>
<li>When you run the flow, it runs the function where the flow begins.</li>
<li>In our case, it’s the <code>flow_hello</code> function.</li>
</ul></li>
<li>We set the tracking uri to <code>http://127.0.0.1:5000</code> because we ran the server locally, however if you run the server on EC2 or any other machine, you need to set the tracking uri accordingly.</li>
<li>To start the mlflow server we used the backend store as <code>sqlite db</code> and <code>artifacts</code> directory to store the artifacts.</li>
<li>We also specified the host and post so as to map the mlflow server to the same port where we set the tracking uri.</li>
</ul>
<p>Lastly, if you want to logout from the Prefect Cloud, run the following command:</p>
<div class="sourceCode" id="cb24" style="background: #f1f3f5;"><pre class="sourceCode numberSource bash number-lines code-with-copy"><code class="sourceCode bash"><span id="cb24-1"><span class="ex" style="color: null;">prefect</span> cloud logout</span></code></pre></div>
</section>
<section id="references" class="level2">
<h2 class="anchored" data-anchor-id="references">References</h2>
<ul>
<li><a href="https://docs.prefect.io/cloud/">Prefect Cloud Docs</a></li>
<li><a href="https://github.com/PrefectHQ/prefect/blob/main/docs/img/tutorial/first-steps-ui.png">Image Source</a></li>
</ul>
</section>
<section id="conclusion" class="level2">
<h2 class="anchored" data-anchor-id="conclusion">Conclusion</h2>
<p>In this article, we learned how to deploy a flow to Prefect Cloud and run it. We also learned how to run the flow with mlflow to record the metrics.</p>
<p>I hope you enjoyed this article. If you have any questions, feel free to reach out to me on <a href="https://twitter.com/sagarthacker118">Twitter</a> or <a href="mailto:sagar+site@sagarthacker.com">Email</a>.</p>
<p>👏 Upvote if you liked it, 💬 comment if you loved it. Hope to see you guys in the next one. ✌️ Peace!</p>


</section>

 ]]></description>
  <category>MLOps</category>
  <category>Prefect</category>
  <category>Deployment</category>
  <category>Prefect-Cloud</category>
  <guid>https://sagarthacker.com/posts/mlops/prefect-cloud.html</guid>
  <pubDate>Fri, 16 Jun 2023 04:00:00 GMT</pubDate>
  <media:content url="https://sagarthacker.com/posts/mlops/images/prefect-cloud/first-steps-ui.png" medium="image" type="image/png" height="90" width="144"/>
</item>
<item>
  <title>Prefect Deployment</title>
  <dc:creator>Sagar Thacker</dc:creator>
  <link>https://sagarthacker.com/posts/mlops/prefect-deployment.html</link>
  <description><![CDATA[ 




<p>In this post, we’ll be looking at how to deploy a Prefect flow locally.</p>
<section id="what-does-deployment-mean" class="level2">
<h2 class="anchored" data-anchor-id="what-does-deployment-mean">What does deployment mean?</h2>
<p>So far, we’ve learned how to create and run a workflow on our local machine. The Prefect API has been helpful in tracking the workflow’s status through the user interface.</p>
<p>However, what if we need to run the workflow on a different machine or schedule it to run automatically? This is where deployment comes into play.</p>
</section>
<section id="deployment-in-prefect" class="level2">
<h2 class="anchored" data-anchor-id="deployment-in-prefect">Deployment in Prefect</h2>
<p>To deploy a Prefect workflow, we need to package the workflow code, settings, and infrastructure configuration. This packaging process enables us to manage the workflow using the Prefect API and execute it remotely on a Prefect agent.</p>
<p>I understand this might sound technical, so let’s simplify it further.</p>
<ul>
<li>Deployment can be thought of as shipping a package that includes the workflow code, settings, and infrastructure configuration required by Prefect to run the workflow.</li>
<li>All the necessary files are packed into a single box and labeled with a yaml file e.g.&nbsp;<code>deployment.yaml</code>. This file contains information about the workflow, its location, and additional metadata.</li>
<li>Using the deployment.yaml file, we can ship the package to the Prefect API, which creates a deployment object and stores it in the Prefect database. The deployment is now ready to be executed.</li>
<li>However, simply deploying the workflow doesn’t start its execution.</li>
<li>In Prefect, we have the concept of <code>work-pools</code> and <code>agents/workers</code>. When a deployed workflow runs, it creates a <code>flow run</code> which is similar to what we did previously when running a Prefect flow.</li>
<li>However, during deployment, the flow run is submitted to a specific work-pool for scheduling. Think of the work-pool as a staging area where the flow run waits to be picked up by an agent/worker. (Imagine package lying in the warehouse waiting for the courier to be picked).</li>
<li>An agent or worker (courier), operating within the execution environment, polls the work-pool for new runs to execute.</li>
<li>Once an agent/worker picks up a flow run, it proceeds to execute it and reports the status back to the Prefect API.</li>
</ul>
<p>It might seem like a lot of steps, but it’s quite simple once you get the hang of it. We’ll be going through each step in detail in the next section.</p>
</section>
<section id="deployment-in-action" class="level2">
<h2 class="anchored" data-anchor-id="deployment-in-action">Deployment in Action</h2>
<p>To demonstrate deployment, we’ll be using a simple prefect flow that has a flow with one task. The task simply prints a message to the console. You can find the code for the flow below.</p>
<div class="code-with-filename">
<div class="code-with-filename-file">
<pre><strong>"prefect_demo.py</strong></pre>
</div>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;">from</span> prefect <span class="im" style="color: #00769E;">import</span> flow, task</span>
<span id="cb1-2"></span>
<span id="cb1-3"><span class="at" style="color: #657422;">@task</span>(name<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"say_hello"</span>, log_prints<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>)</span>
<span id="cb1-4"><span class="kw" style="color: #003B4F;">def</span> say_hello():</span>
<span id="cb1-5">    <span class="bu" style="color: null;">print</span>(<span class="st" style="color: #20794D;">"Hello, I'm a Task!"</span>)</span>
<span id="cb1-6"></span>
<span id="cb1-7"><span class="at" style="color: #657422;">@flow</span>(name<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"hello-flow"</span>, log_prints<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>)</span>
<span id="cb1-8"><span class="kw" style="color: #003B4F;">def</span> flow_hello():</span>
<span id="cb1-9">    <span class="bu" style="color: null;">print</span>(<span class="st" style="color: #20794D;">"Hello, I'm a Flow!"</span>)</span>
<span id="cb1-10">    <span class="bu" style="color: null;">print</span>(<span class="st" style="color: #20794D;">"I'm about to call a Task..."</span>)</span>
<span id="cb1-11">    say_hello()</span>
<span id="cb1-12"></span>
<span id="cb1-13"><span class="cf" style="color: #003B4F;">if</span> <span class="va" style="color: #111111;">__name__</span> <span class="op" style="color: #5E5E5E;">==</span> <span class="st" style="color: #20794D;">"__main__"</span>:</span>
<span id="cb1-14">    flow_hello()</span></code></pre></div>
</div>
<p>The flow is simple and will help us focus more on the deployment process rather than understanding what the flow does. Let’s get started.</p>
<section id="step-1-start-a-prefect-server" class="level3">
<h3 class="anchored" data-anchor-id="step-1-start-a-prefect-server">Step 1: Start a Prefect server</h3>
<p>Before we can deploy our flow, we need to start a Prefect server. We’ll be using the Prefect CLI command to start the server. Run the following command in your terminal.</p>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode numberSource bash number-lines code-with-copy"><code class="sourceCode bash"><span id="cb2-1"><span class="ex" style="color: null;">prefect</span> server start</span></code></pre></div>
</section>
<section id="step-2-create-a-yaml-file-for-the-deployment" class="level3">
<h3 class="anchored" data-anchor-id="step-2-create-a-yaml-file-for-the-deployment">Step 2: Create a yaml file for the deployment</h3>
<p>We’ll use the <code>prefect deployment build</code> command to create a deployment definition yaml file. Run the Prefect CLI command from the folder containing your flow script and any dependencies of the script.</p>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode numberSource bash number-lines code-with-copy"><code class="sourceCode bash"><span id="cb3-1"><span class="ex" style="color: null;">prefect</span> deployment build [OPTIONS] PATH</span></code></pre></div>
<p>Path to the flow is specified in the format <code>path-to-script:flow-function-name</code> — The path and filename of the flow script file, a colon, then the name of the <strong>entrypoint</strong> flow function.</p>
<p>For our example, the command will be:</p>
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode numberSource bash number-lines code-with-copy"><code class="sourceCode bash"><span id="cb4-1"><span class="ex" style="color: null;">prefect</span> deployment build <span class="at" style="color: #657422;">-n</span> flow_test <span class="at" style="color: #657422;">-p</span> default-agent-pool <span class="at" style="color: #657422;">-q</span> test prefect_demo.py:flow_hello</span></code></pre></div>
<p>Let’s break down the command:</p>
<ul>
<li><code>-n</code> specifies the name of the deployment. We’ve named our deployment <code>flow_test</code>.</li>
<li><code>-p</code> specifies the name of the work-pool. Prefect provides a default work-pool named <code>default-agent-pool</code>.</li>
<li><code>-q</code> specifies the name of the work queue. We’ve named our queue <code>test</code>.</li>
<li><code>prefect_demo.py:flow_hello</code> specifies the path to the flow script, a colon, then the name of the flow function.</li>
</ul>
<p>When you run this command, Prefect:</p>
<ul>
<li>Creates a flow_hello-deployment.yaml file for your deployment based on your flow code and options. Usually the format is <code>&lt;flow_name&gt;-deployment.yaml</code>. You can specify a different name using the <code>--output</code> option.</li>
<li>Uploads your flow files to the configured storage location (local by default). (We’ll cover storage in a later post).</li>
<li>Submit your deployment to the work queue test. The work queue test will be created if it doesn’t exist.</li>
</ul>
<p>You can find the yaml file in the same folder as your flow script.</p>
</section>
<section id="work-queues" class="level3">
<h3 class="anchored" data-anchor-id="work-queues">Work Queues</h3>
<hr>
<p>Imagine work-pool has a big highway and work-queues are lanes on the highway. Each work-queue is a separate lane on the highway. When a flow run is submitted to a work-pool, it is placed in a work-queue.</p>
<p>As different lanes in a highway have different priorities, and purpose so do work-queues. For example, you might have a work-queue for high priority flows and another for low priority flows. You can seperate your test and production flows by using different work-queues.</p>
<p>Below you’ll find a brief overview of work-queues and I highly recommend you read the <a href="https://docs.prefect.io/2.10.13/concepts/work-pools/#work-queues">official documentation</a></p>
<ul>
<li>Work pools have a <code>default</code> queue where all work is sent by default, but additional queues can be added for finer control over work delivery.</li>
<li>Work queues have priorities indicated by unique positive integers, with lower numbers having higher priority. New queues can be added without affecting the priority of existing queues.</li>
<li>Work queues can also have their own concurrency limits, allowing for precise control over the execution of work. However, all queues are subject to the global work pool concurrency limit.</li>
</ul>
</section>
<section id="step-3-create-a-deployment-on-prefect-api" class="level3">
<h3 class="anchored" data-anchor-id="step-3-create-a-deployment-on-prefect-api">Step 3: Create a deployment on Prefect API</h3>
<p>Now that we have the deployment.yaml file, we can create a deployment on the Prefect API. To do this, we’ll use the <code>prefect deployment apply</code> Prefect CLI command.</p>
<div class="sourceCode" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode numberSource bash number-lines code-with-copy"><code class="sourceCode bash"><span id="cb5-1"><span class="ex" style="color: null;">prefect</span> deployment apply PATH_TO_YAML_FILE</span></code></pre></div>
<p>For our example, the command will be:</p>
<div class="sourceCode" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode numberSource bash number-lines code-with-copy"><code class="sourceCode bash"><span id="cb6-1"><span class="ex" style="color: null;">prefect</span> deployment apply flow_hello-deployment.yaml</span></code></pre></div>
<p>Once the deployment is created, you’ll see it in the CLI and the Prefect UI. Run the <code>prefect deployment ls</code> command to see a list of all deployments.</p>
<div class="sourceCode" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode numberSource bash number-lines code-with-copy"><code class="sourceCode bash"><span id="cb7-1"><span class="ex" style="color: null;">prefect</span> deployment ls</span></code></pre></div>
<p><img src="https://sagarthacker.com/posts/mlops/images/prefect-deployment/cli-deploy.png" class="img-fluid"></p>
<p><img src="https://sagarthacker.com/posts/mlops/images/prefect-deployment/ui-deploy.png" class="img-fluid"></p>
<p>To view the work-pool and work-queue in the Prefect UI, navigate to the <code>Work Pools</code> section and click on the <code>default-agent-pool</code> work-pool. Click on the <code>Work Queues</code> tab to view the <code>test</code> work-queue. You’ll also notice a <code>default</code> work queue. This is the default work queue that Prefect creates when you create any work-pool.</p>
<p><img src="https://sagarthacker.com/posts/mlops/images/prefect-deployment/ui-work-queue.png" class="img-fluid"></p>
</section>
<section id="step-4-start-an-agent" class="level3">
<h3 class="anchored" data-anchor-id="step-4-start-an-agent">Step 4: Start an agent</h3>
<p>Agent processes are lightweight polling services that regularly check a work-pool for scheduled work and execute the corresponding flow runs.</p>
<p>By default, agents poll for work every 15 seconds. You can adjust this interval by configuring the <code>PREFECT_AGENT_QUERY_INTERVAL</code> setting in the <a href="https://docs.prefect.io/concepts/settings/">profile settings</a>.</p>
<p>You can have multiple agent processes running for a single work pool. Each agent process sends a unique ID to the server, which helps distinguish them from one another and informs users about the number of active agents.</p>
<p>We’ll use the <code>prefect agent start</code> command to start an agent.</p>
<div class="sourceCode" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode numberSource bash number-lines code-with-copy"><code class="sourceCode bash"><span id="cb8-1"><span class="ex" style="color: null;">prefect</span> agent start <span class="at" style="color: #657422;">-p</span> [WORK_POOL_NAME]</span></code></pre></div>
<p>For our example, the command will be:</p>
<div class="sourceCode" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode numberSource bash number-lines code-with-copy"><code class="sourceCode bash"><span id="cb9-1"><span class="ex" style="color: null;">prefect</span> agent start <span class="at" style="color: #657422;">-p</span> default-agent-pool</span></code></pre></div>
</section>
<section id="step-5-execute-the-deployment" class="level3">
<h3 class="anchored" data-anchor-id="step-5-execute-the-deployment">Step 5: Execute the deployment</h3>
<p>Now that we have an agent running, we can execute the deployment. To do this, we’ll use the <code>prefect deployment run</code> command.</p>
<div class="sourceCode" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode numberSource bash number-lines code-with-copy"><code class="sourceCode bash"><span id="cb10-1"><span class="ex" style="color: null;">prefect</span> deployment run [OPTIONS] DEPLOYMENT_NAME</span></code></pre></div>
<p>If you don’t know the name of the deployment, you can use the <code>prefect deployment ls</code> command to get a list of all deployments.</p>
<p>For our example, the command will be:</p>
<div class="sourceCode" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode numberSource bash number-lines code-with-copy"><code class="sourceCode bash"><span id="cb11-1"><span class="ex" style="color: null;">prefect</span> deployment run hello-flow/flow_test</span></code></pre></div>
<p>After running the command, you’ll see the flow run in the Prefect UI. Navigate to the <code>Flow Runs</code> section to view the flow run. Click on the flow run to view the logs.</p>
<p><img src="https://sagarthacker.com/posts/mlops/images/prefect-deployment/ui-flow-run.png" class="img-fluid"></p>
<p>You can also run the flow from the Prefect UI from the <code>Flow</code> section.</p>
<p><img src="https://sagarthacker.com/posts/mlops/images/prefect-deployment/ui-quick-run.png" class="img-fluid"></p>
<p>Congratulations! You’ve successfully deployed and executed your first Prefect flow. Yet there’s so much more to cover like schedules, storage, agents, workers, and more.</p>
<p>Congratulations! 🎉 You’ve successfully deployed and executed your first Prefect flow. Yet there’s so much more to cover like 📅 schedules, 📦 storage, 💪 agents, workers, and more.</p>
</section>
</section>
<section id="deployment.yaml-file" class="level2">
<h2 class="anchored" data-anchor-id="deployment.yaml-file"><code>deployment.yaml</code> file</h2>
<p>The YAML file for a deployment contains extra settings required to create the deployment on the server.</p>
<p>A single flow can have multiple deployments created for it, each with different schedules, tags, and other configurations.</p>
<p>To achieve this, you can have multiple deployment YAML files referencing the same flow definition, each specifying distinct settings. The only rule is that each deployment must have a unique name.</p>
<p><img src="https://sagarthacker.com/posts/mlops/images/prefect-deployment/deployment-flow.png" class="img-fluid"></p>
<p>Each deployment is linked to a specific flow, but a flow can be referenced by multiple deployments.</p>
<p>Deployments are uniquely identified based on the combination of the flow name and deployment name.</p>
<p>This allows you to execute a single flow with various parameters, on multiple schedules, and in different environments. It also enables you to run different versions of the same flow for testing or production purposes.</p>
</section>
<section id="schedules" class="level2">
<h2 class="anchored" data-anchor-id="schedules">Schedules</h2>
<p>Schedules allow you to instruct the Prefect API to automatically generate new flow runs for you at regular intervals.</p>
<p>You can attach a schedule to any flow deployment. The Prefect Scheduler service regularly checks each deployment and generates new flow runs based on the schedule defined for that deployment.</p>
<p>There are four recommended ways to create a schedule for a deployment:</p>
<ul>
<li>Use the Prefect UI</li>
<li>Use the cron, interval, or rrule flags with the CLI deployment build command</li>
<li>Use the schedule parameter with a Python deployment file</li>
<li>Manually edit the deployment YAML file’s schedule section</li>
</ul>
<p>Prefect offers different types of schedules that cater to various needs and provide a high level of customization:</p>
<ol type="1">
<li><strong>Cron</strong>: This type is well-suited for users who have prior experience with cron and want to leverage its functionality.</li>
<li><strong>Interval</strong>: Ideal for deployments that require a consistent cadence of execution, irrespective of specific timestamps.</li>
<li><strong>RRule</strong>: Designed for deployments that rely on calendar-based logic, allowing for simple recurring schedules, irregular intervals, exclusions, or adjustments based on specific days of the month.</li>
</ol>
<p>These schedule types offer flexibility and can accommodate a wide range of scheduling requirements.</p>
<p>We’ll go through an example of scheduling a flow run in the section below.</p>
</section>
<section id="agents-and-workers" class="level2">
<h2 class="anchored" data-anchor-id="agents-and-workers">Agents and Workers</h2>
<p>Work-pools serve as a way to organize work that agents or workers pick up for execution. The coordination between deployments and agents happens through a shared work-pool name.</p>
<p>In case you want to create a new work pool, you would have to choose the <code>type</code> of the work pool. <code>Type</code> defines the type of infrastructure that can execute runs from this work pool.</p>
<p>That’s where which polling service (<code>Agent</code> / <code>Worker</code>) is decided. View the table below to understand the difference between the two.</p>
<table class="table">
<colgroup>
<col style="width: 35%">
<col style="width: 15%">
<col style="width: 49%">
</colgroup>
<thead>
<tr class="header">
<th>Work-Pool Type</th>
<th>Agent/Worker</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>Amazon Elastic Container Service</td>
<td>Worker</td>
<td>Executes flow runs as ECS tasks</td>
</tr>
<tr class="even">
<td>Azure Container Service</td>
<td>Worker</td>
<td>Executes flow runs in ACI containers</td>
</tr>
<tr class="odd">
<td>Google Cloud Run</td>
<td>Worker</td>
<td>Executes flow runs as Google Cloud Run jobs</td>
</tr>
<tr class="even">
<td>Docker</td>
<td>Worker</td>
<td>Executes flow runs within Docker containers</td>
</tr>
<tr class="odd">
<td>Kubernetes</td>
<td>Worker</td>
<td>Executes flow runs as Kubernetes jobs</td>
</tr>
<tr class="even">
<td>Process</td>
<td>Worker</td>
<td>Executes flow runs in subprocesses</td>
</tr>
<tr class="odd">
<td>Prefect Agent</td>
<td>Agent</td>
<td>Executes flow runs in subprocesses</td>
</tr>
</tbody>
</table>
<p>We have seen an example of an agent in the previous section. Let’s look at an example of a worker.</p>
</section>
<section id="worker" class="level2">
<h2 class="anchored" data-anchor-id="worker">Worker</h2>
<div class="callout-warning callout callout-style-default callout-captioned">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-caption-container flex-fill">
Warning
</div>
</div>
<div class="callout-body-container callout-body">
<p>Workers are a beta feature and are subject to change in future releases.</p>
</div>
</div>
<p>Workers are similar to Agents in that they are long-running processes that poll for work i.e., fetch scheduled runs from a work pool and carry out their execution.</p>
<p>However, workers provide the advantage of more control over infrastructure configuration and the capability to route work to specific types of execution environments.</p>
<p>Each worker is assigned a type that corresponds to the specific execution environment where it will submit flow runs. Workers can only join work pools that match their designated type. Consequently, when deployments are associated with a work pool, you can determine the execution environment in which scheduled flow runs for that deployment will be executed.</p>
<p>Above table shows the different types of workers available. Prefect also provides a way to create your own <a href="https://docs.prefect.io/guides/deployment/developing-a-new-worker-type/">worker type</a>.</p>
</section>
<section id="scheduled-flow-run-example-with-worker" class="level2">
<h2 class="anchored" data-anchor-id="scheduled-flow-run-example-with-worker">Scheduled Flow Run Example with Worker</h2>
<section id="step-1-create-a-new-work-pool." class="level3">
<h3 class="anchored" data-anchor-id="step-1-create-a-new-work-pool.">Step 1: Create a new work-pool.</h3>
<div class="sourceCode" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode numberSource bash number-lines code-with-copy"><code class="sourceCode bash"><span id="cb12-1"><span class="ex" style="color: null;">prefect</span> work-pool create [OPTIONS] NAME</span></code></pre></div>
<p>For our example, the command will be:</p>
<div class="sourceCode" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode numberSource bash number-lines code-with-copy"><code class="sourceCode bash"><span id="cb13-1"><span class="ex" style="color: null;">prefect</span> work-pool create test-pool <span class="at" style="color: #657422;">-t</span> process</span></code></pre></div>
<ul>
<li><code>-t</code> or <code>--type</code> flag is used to specify the type of work-pool. In our case, we are using the <code>process</code> type.</li>
</ul>
<p>On CLI you can use the command <code>prefect work-pool ls</code> to list all the work-pools.</p>
<p><img src="https://sagarthacker.com/posts/mlops/images/prefect-deployment/cli-schedule-deploy.png" class="img-fluid"></p>
<p><img src="https://sagarthacker.com/posts/mlops/images/prefect-deployment/ui-work-pool.png" class="img-fluid"></p>
</section>
<section id="step-2-create-a-new-yaml-file." class="level3">
<h3 class="anchored" data-anchor-id="step-2-create-a-new-yaml-file.">Step 2: Create a new yaml file.</h3>
<div class="sourceCode" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode numberSource bash number-lines code-with-copy"><code class="sourceCode bash"><span id="cb14-1"><span class="ex" style="color: null;">prefect</span> deployment build <span class="at" style="color: #657422;">-n</span> demo_schedule <span class="at" style="color: #657422;">-p</span> test-pool <span class="at" style="color: #657422;">-q</span> demo <span class="at" style="color: #657422;">--cron</span> <span class="st" style="color: #20794D;">"0 0 * * *"</span> <span class="at" style="color: #657422;">--output</span> demo_schedule.yaml prefect_demo.py:flow_hello</span></code></pre></div>
<ul>
<li><code>--cron</code> flag is used to specify the cron schedule.</li>
</ul>
<p>This create flow runs for this deployment every day at midnight.</p>
</section>
<section id="step-3-apply-the-deployment." class="level3">
<h3 class="anchored" data-anchor-id="step-3-apply-the-deployment.">Step 3: Apply the deployment.</h3>
<div class="sourceCode" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode numberSource bash number-lines code-with-copy"><code class="sourceCode bash"><span id="cb15-1"><span class="ex" style="color: null;">prefect</span> deployment apply demo_schedule.yaml</span></code></pre></div>
<p><img src="https://sagarthacker.com/posts/mlops/images/prefect-deployment/ui-schedule-deploy.png" class="img-fluid"></p>
<p><img src="https://sagarthacker.com/posts/mlops/images/prefect-deployment/ui-schedule-deploy-2.png" class="img-fluid"></p>
</section>
<section id="step-4-start-the-worker." class="level3">
<h3 class="anchored" data-anchor-id="step-4-start-the-worker.">Step 4: Start the worker.</h3>
<div class="sourceCode" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode numberSource bash number-lines code-with-copy"><code class="sourceCode bash"><span id="cb16-1"><span class="ex" style="color: null;">prefect</span> worker start <span class="at" style="color: #657422;">-p</span> test-pool</span></code></pre></div>
</section>
<section id="step-5-execute-the-deployment." class="level3">
<h3 class="anchored" data-anchor-id="step-5-execute-the-deployment.">Step 5: Execute the deployment.</h3>
<p>Either run the deployment from the Prefect UI or use the CLI command.</p>
<div class="callout-note callout callout-style-default callout-captioned">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-caption-container flex-fill">
Note
</div>
</div>
<div class="callout-body-container callout-body">
<p>One observation you might have made is that we are using the same flow for both the deployments but with different deployments. This is because we want to run the first flow manually through CLI or UI and second on a schedule.</p>
</div>
</div>
<p>First can be used to test the flow and second can be used to run the flow on a schedule. It completely depends on your use case.</p>
<p>I hope this provides a comprehensive overview of Prefect deployment and steps to deploy a flow. Hush… there’s an abundance yet to explore.</p>
</section>
</section>
<section id="storage" class="level2">
<h2 class="anchored" data-anchor-id="storage">Storage</h2>
<p>Prefect follows a hybrid model where your flow code stays within your storage and execution infrastructure and never lives on the Prefect server or database. What does that mean?</p>
<p>It means that there’s always a boundary between your code, your private infrastructure, and the Prefect backend. You can use your existing storage infrastructure to store your flow code. Prefect supports a wide range of storage options like GitHub, local storage, Bitbucket, Amazon S3, Google Cloud Storage, Azure Storage, and more.</p>
<p>Till now we have been using local storage to store our flow code and run the Prefect Server. However, you might choose to store the flow code in a GitHub repository and run the Prefect Server on your local machine. Prefect supports this as well.</p>
<p><img src="https://sagarthacker.com/posts/mlops/images/prefect-deployment/deployment-flow-storage.png" class="img-fluid"></p>
<p>While creating a deployment, you can specify the storage location of your flow code. This let’s Prefect Agent/Worker know where to look for the flow code.</p>
<p>One cool thing about it is if you make changes to your flow code, you don’t have to create a new deployment. Prefect Agent/Worker will automatically pick up the changes and execute the flow with the new code.</p>
<div class="callout-warning callout callout-style-default callout-captioned">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-caption-container flex-fill">
Warning
</div>
</div>
<div class="callout-body-container callout-body">
<p>However, changes to the infrastructure code will require a new deployment. Such as entrypoint. This part of changing the infrastructure code is experimental for me, I have to try it out more to better understand it.</p>
</div>
</div>
<p>This post has been a long one. Hence, I have not covered storage in detail. You can refer to the official <a href="https://docs.prefect.io/2.10.13/concepts/storage/">Prefect documentation</a> on this topic for more details. Hopefully, in the next post I will cover the remaining topics.</p>
<p>Wait, there is <code>ONE</code> more thing!</p>
</section>
<section id="prefect-projects" class="level2">
<h2 class="anchored" data-anchor-id="prefect-projects">Prefect Projects</h2>
<div class="callout-warning callout callout-style-default callout-captioned">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-caption-container flex-fill">
Warning
</div>
</div>
<div class="callout-body-container callout-body">
<p>Projects are a beta feature and are subject to change in future releases.</p>
</div>
</div>
<p>Prefect Projects is a new feature that describe how to prepare one or more flow deployments. You can create a project using the Prefect CLI command <code>prefect project init</code>.</p>
<p>I would encourage you to follow along in a new directory so as to seperate what we did so far from the project.</p>
<div class="sourceCode" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode numberSource bash number-lines code-with-copy"><code class="sourceCode bash"><span id="cb17-1"><span class="co" style="color: #5E5E5E;"># Create a new directory</span></span>
<span id="cb17-2"><span class="fu" style="color: #4758AB;">mkdir</span> project</span>
<span id="cb17-3"></span>
<span id="cb17-4"><span class="co" style="color: #5E5E5E;"># Change directory</span></span>
<span id="cb17-5"><span class="bu" style="color: null;">cd</span> project</span>
<span id="cb17-6"></span>
<span id="cb17-7"><span class="co" style="color: #5E5E5E;"># Create a new Prefect project</span></span>
<span id="cb17-8"><span class="ex" style="color: null;">prefect</span> project init</span></code></pre></div>
<p>Once you run the command, three files and a directory will be created - <code>deployment.yaml</code>, <code>prefect.yaml</code>, <code>.prefectignore</code>, and <code>.prefect/</code> directory.</p>
<ul>
<li><code>deployment.yaml</code>: a YAML file describing base settings for deployments produced from this project</li>
<li><code>prefect.yaml</code>: a YAML file describing procedural steps for preparing a deployment from this project, as well as instructions for preparing the execution environment for a deployment run</li>
<li><code>.prefect/</code>: a hidden directory where Prefect will store workflow metadata</li>
<li><code>.prefectignore</code>: a file that specifies files and directories to ignore when preparing a deployment</li>
</ul>
<p>Below we’ll go through an example of how to use Prefect Projects to create a deployment.</p>
<p><img src="https://sagarthacker.com/posts/mlops/images/prefect-deployment/flow-deployment-end-to-end.png" class="img-fluid"></p>
<section id="step-1-create-a-new-project." class="level3">
<h3 class="anchored" data-anchor-id="step-1-create-a-new-project.">Step 1: Create a new project.</h3>
<div class="sourceCode" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode numberSource bash number-lines code-with-copy"><code class="sourceCode bash"><span id="cb18-1"><span class="ex" style="color: null;">prefect</span> project init</span></code></pre></div>
</section>
<section id="step-2-create-a-flow." class="level3">
<h3 class="anchored" data-anchor-id="step-2-create-a-flow.">Step 2: Create a flow.</h3>
<p>We’ll be utilizing the same flow we created earlier but with some changes. The flow will take a name as an argument, which are called <code>parameters</code> to a flow in Prefect.</p>
<div class="code-with-filename">
<div class="code-with-filename-file">
<pre><strong>prefect_demo.py</strong></pre>
</div>
<div class="sourceCode" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb19-1"><span class="im" style="color: #00769E;">import</span> argparse</span>
<span id="cb19-2"><span class="im" style="color: #00769E;">from</span> prefect <span class="im" style="color: #00769E;">import</span> flow, task</span>
<span id="cb19-3"></span>
<span id="cb19-4"><span class="at" style="color: #657422;">@task</span>(name<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"say_hello"</span>, log_prints<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>)</span>
<span id="cb19-5"><span class="kw" style="color: #003B4F;">def</span> say_hello():</span>
<span id="cb19-6">    <span class="bu" style="color: null;">print</span>(<span class="st" style="color: #20794D;">"Hello, I'm a Task!"</span>)</span>
<span id="cb19-7"></span>
<span id="cb19-8"><span class="at" style="color: #657422;">@flow</span>(name<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"hello-flow"</span>, log_prints<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>)</span>
<span id="cb19-9"><span class="kw" style="color: #003B4F;">def</span> flow_hello(name: <span class="bu" style="color: null;">str</span>):</span>
<span id="cb19-10">    <span class="bu" style="color: null;">print</span>(<span class="ss" style="color: #20794D;">f"Hello </span><span class="sc" style="color: #5E5E5E;">{</span>name<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">, I'm a Flow!"</span>)</span>
<span id="cb19-11">    <span class="bu" style="color: null;">print</span>(<span class="st" style="color: #20794D;">"I'm about to call a Task..."</span>)</span>
<span id="cb19-12">    say_hello()</span>
<span id="cb19-13"></span>
<span id="cb19-14"><span class="cf" style="color: #003B4F;">if</span> <span class="va" style="color: #111111;">__name__</span> <span class="op" style="color: #5E5E5E;">==</span> <span class="st" style="color: #20794D;">"__main__"</span>:</span>
<span id="cb19-15">    parser <span class="op" style="color: #5E5E5E;">=</span> argparse.ArgumentParser()</span>
<span id="cb19-16">    parser.add_argument(<span class="st" style="color: #20794D;">"--name"</span>, <span class="bu" style="color: null;">help</span><span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"Your name"</span>, default<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"World"</span>)</span>
<span id="cb19-17">    args <span class="op" style="color: #5E5E5E;">=</span> parser.parse_args()    </span>
<span id="cb19-18">    </span>
<span id="cb19-19">    flow_hello(args.name)</span></code></pre></div>
</div>
</section>
<section id="step-3-start-the-prefect-server." class="level3">
<h3 class="anchored" data-anchor-id="step-3-start-the-prefect-server.">Step 3: Start the Prefect Server.</h3>
<div class="sourceCode" id="cb20" style="background: #f1f3f5;"><pre class="sourceCode numberSource bash number-lines code-with-copy"><code class="sourceCode bash"><span id="cb20-1"><span class="ex" style="color: null;">prefect</span> server start</span></code></pre></div>
</section>
<section id="step-4-start-the-prefect-worker." class="level3">
<h3 class="anchored" data-anchor-id="step-4-start-the-prefect-worker.">Step 4: Start the Prefect Worker.</h3>
<div class="sourceCode" id="cb21" style="background: #f1f3f5;"><pre class="sourceCode numberSource bash number-lines code-with-copy"><code class="sourceCode bash"><span id="cb21-1"><span class="ex" style="color: null;">prefect</span> worker start <span class="at" style="color: #657422;">-p</span> test-pool</span></code></pre></div>
</section>
<section id="step-5-configure-the-deployment.yaml-file." class="level3">
<h3 class="anchored" data-anchor-id="step-5-configure-the-deployment.yaml-file.">Step 5: Configure the deployment.yaml file.</h3>
<p>Previously, we created seperated files for creating a deployment and executing it.</p>
<p>However, with Prefect Projects, we can do both in a single file. The deployment.yaml file is used to configure the deployment. Let’s look at the contents of the file.</p>
<div class="code-with-filename">
<div class="code-with-filename-file">
<pre><strong>deployment.yaml</strong></pre>
</div>
<div class="sourceCode" id="cb22" style="background: #f1f3f5;"><pre class="sourceCode numberSource yaml number-lines code-with-copy"><code class="sourceCode yaml"><span id="cb22-1"><span class="fu" style="color: #4758AB;">deployments</span><span class="kw" style="color: #003B4F;">:</span></span>
<span id="cb22-2"><span class="kw" style="color: #003B4F;">-</span><span class="co" style="color: #5E5E5E;"> # base metadata</span></span>
<span id="cb22-3"><span class="at" style="color: #657422;">  </span><span class="fu" style="color: #4758AB;">name</span><span class="kw" style="color: #003B4F;">:</span><span class="at" style="color: #657422;"> manual-deployment</span></span>
<span id="cb22-4"><span class="at" style="color: #657422;">  </span><span class="fu" style="color: #4758AB;">tags</span><span class="kw" style="color: #003B4F;">:</span><span class="at" style="color: #657422;"> </span><span class="kw" style="color: #003B4F;">[</span><span class="st" style="color: #20794D;">"test"</span><span class="kw" style="color: #003B4F;">]</span></span>
<span id="cb22-5"><span class="at" style="color: #657422;">  </span><span class="fu" style="color: #4758AB;">description</span><span class="kw" style="color: #003B4F;">:</span><span class="at" style="color: #657422;"> </span><span class="st" style="color: #20794D;">"Trigger deployment using `run` CLI command or Prefect UI"</span></span>
<span id="cb22-6"><span class="at" style="color: #657422;">  </span></span>
<span id="cb22-7"><span class="co" style="color: #5E5E5E;">  # flow-specific fields</span></span>
<span id="cb22-8"><span class="at" style="color: #657422;">  </span><span class="fu" style="color: #4758AB;">entrypoint</span><span class="kw" style="color: #003B4F;">:</span><span class="at" style="color: #657422;"> prefect_demo.py:flow_hello</span></span>
<span id="cb22-9"><span class="at" style="color: #657422;">  </span><span class="fu" style="color: #4758AB;">parameters</span><span class="kw" style="color: #003B4F;">:</span></span>
<span id="cb22-10"><span class="at" style="color: #657422;">    </span><span class="fu" style="color: #4758AB;">name</span><span class="kw" style="color: #003B4F;">:</span><span class="at" style="color: #657422;"> </span><span class="st" style="color: #20794D;">"Sagar"</span></span>
<span id="cb22-11"><span class="at" style="color: #657422;">  </span></span>
<span id="cb22-12"><span class="co" style="color: #5E5E5E;">  # infra-specific fields</span></span>
<span id="cb22-13"><span class="at" style="color: #657422;">  </span><span class="fu" style="color: #4758AB;">work_pool</span><span class="kw" style="color: #003B4F;">:</span></span>
<span id="cb22-14"><span class="at" style="color: #657422;">    </span><span class="fu" style="color: #4758AB;">name</span><span class="kw" style="color: #003B4F;">:</span><span class="at" style="color: #657422;"> test-pool</span></span>
<span id="cb22-15"><span class="at" style="color: #657422;">    </span><span class="fu" style="color: #4758AB;">work_queue_name</span><span class="kw" style="color: #003B4F;">:</span><span class="at" style="color: #657422;"> demo</span></span>
<span id="cb22-16"></span>
<span id="cb22-17"><span class="kw" style="color: #003B4F;">-</span><span class="co" style="color: #5E5E5E;"> # base metadata</span></span>
<span id="cb22-18"><span class="at" style="color: #657422;">  </span><span class="fu" style="color: #4758AB;">name</span><span class="kw" style="color: #003B4F;">:</span><span class="at" style="color: #657422;"> scheduled-deployment</span></span>
<span id="cb22-19"><span class="at" style="color: #657422;">  </span><span class="fu" style="color: #4758AB;">tags</span><span class="kw" style="color: #003B4F;">:</span><span class="at" style="color: #657422;"> </span><span class="kw" style="color: #003B4F;">[</span><span class="st" style="color: #20794D;">"dev"</span><span class="kw" style="color: #003B4F;">]</span></span>
<span id="cb22-20"><span class="at" style="color: #657422;">  </span><span class="fu" style="color: #4758AB;">description</span><span class="kw" style="color: #003B4F;">:</span><span class="at" style="color: #657422;"> </span><span class="st" style="color: #20794D;">"Trigger deployment using a Schedule"</span></span>
<span id="cb22-21"><span class="at" style="color: #657422;">  </span><span class="fu" style="color: #4758AB;">schedule</span><span class="kw" style="color: #003B4F;">:</span></span>
<span id="cb22-22"><span class="at" style="color: #657422;">    </span><span class="fu" style="color: #4758AB;">cron</span><span class="kw" style="color: #003B4F;">:</span><span class="at" style="color: #657422;"> 0 0 * * *</span></span>
<span id="cb22-23"><span class="at" style="color: #657422;">    </span><span class="fu" style="color: #4758AB;">timezone</span><span class="kw" style="color: #003B4F;">:</span><span class="at" style="color: #657422;"> America/Chicago</span></span>
<span id="cb22-24"><span class="at" style="color: #657422;">  </span></span>
<span id="cb22-25"><span class="co" style="color: #5E5E5E;">  # flow-specific fields</span></span>
<span id="cb22-26"><span class="at" style="color: #657422;">  </span><span class="fu" style="color: #4758AB;">entrypoint</span><span class="kw" style="color: #003B4F;">:</span><span class="at" style="color: #657422;"> prefect_demo.py:flow_hello</span></span>
<span id="cb22-27"><span class="at" style="color: #657422;">  </span><span class="fu" style="color: #4758AB;">parameters</span><span class="kw" style="color: #003B4F;">:</span></span>
<span id="cb22-28"><span class="at" style="color: #657422;">    </span><span class="fu" style="color: #4758AB;">name</span><span class="kw" style="color: #003B4F;">:</span><span class="at" style="color: #657422;"> </span><span class="st" style="color: #20794D;">"World"</span></span>
<span id="cb22-29"><span class="at" style="color: #657422;">  </span></span>
<span id="cb22-30"><span class="co" style="color: #5E5E5E;">  # infra-specific fields</span></span>
<span id="cb22-31"><span class="at" style="color: #657422;">  </span><span class="fu" style="color: #4758AB;">work_pool</span><span class="kw" style="color: #003B4F;">:</span></span>
<span id="cb22-32"><span class="at" style="color: #657422;">    </span><span class="fu" style="color: #4758AB;">name</span><span class="kw" style="color: #003B4F;">:</span><span class="at" style="color: #657422;"> test-pool</span></span>
<span id="cb22-33"><span class="at" style="color: #657422;">    </span><span class="fu" style="color: #4758AB;">work_queue_name</span><span class="kw" style="color: #003B4F;">:</span><span class="at" style="color: #657422;"> demo</span></span></code></pre></div>
</div>
</section>
<section id="step-6-deploy-your-flow." class="level3">
<h3 class="anchored" data-anchor-id="step-6-deploy-your-flow.">Step 6: Deploy your flow.</h3>
<p>This file has two deployment declarations, each referencing a same flow in the project but with different parameters and schedule. Each deployment declaration has a unique name field and can be deployed individually by using the <code>--name</code> flag when deploying.</p>
<div class="callout-tip callout callout-style-default callout-captioned">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-caption-container flex-fill">
Tip
</div>
</div>
<div class="callout-body-container callout-body">
<p>You also have the freedom to deploy different flows in the same yaml file. Example, we already have one flow file called <code>prefect_demo.py</code>. We can create another flow file called <code>prefect_demo_2.py</code> and reference it in the deployment.yaml file. Give the appropriate entrypoint and parameters and you are good to go.</p>
</div>
</div>
<p>This method of declaring multiple deployments allows the configuration for all deployments within a project to be version controlled and deployed with a single command.</p>
<p>You can deploy a single deployment by using the <code>--name</code> flag.</p>
<div class="sourceCode" id="cb23" style="background: #f1f3f5;"><pre class="sourceCode numberSource bash number-lines code-with-copy"><code class="sourceCode bash"><span id="cb23-1"><span class="ex" style="color: null;">prefect</span> deploy <span class="at" style="color: #657422;">--name</span> manual-deployment</span></code></pre></div>
<p>You can also deploy multiple deployments by providing multiple <code>--name</code> flags.</p>
<div class="sourceCode" id="cb24" style="background: #f1f3f5;"><pre class="sourceCode numberSource bash number-lines code-with-copy"><code class="sourceCode bash"><span id="cb24-1"><span class="ex" style="color: null;">prefect</span> deploy <span class="at" style="color: #657422;">--name</span> manual-deployment <span class="at" style="color: #657422;">--name</span> scheduled-deployment</span></code></pre></div>
<p>Or, you can deploy all the deployments by using the <code>--all</code> flag.</p>
<div class="sourceCode" id="cb25" style="background: #f1f3f5;"><pre class="sourceCode numberSource bash number-lines code-with-copy"><code class="sourceCode bash"><span id="cb25-1"><span class="ex" style="color: null;">prefect</span> deploy <span class="at" style="color: #657422;">--all</span></span></code></pre></div>
<p>For our example, we’ll deploy both the deployments.</p>
<div class="sourceCode" id="cb26" style="background: #f1f3f5;"><pre class="sourceCode numberSource bash number-lines code-with-copy"><code class="sourceCode bash"><span id="cb26-1"><span class="ex" style="color: null;">prefect</span> deploy <span class="at" style="color: #657422;">--all</span></span></code></pre></div>
<p>You might have noticed that we are using the <code>prefect deploy</code> command instead of <code>prefect deployment</code> command. This is because while using Prefect Projects, <code>prefect deploy</code> command under the hood performs multiple steps like build, push, pull, and applies the deployment. You can read more about it <a href="https://docs.prefect.io/2.10.13/concepts/projects/#deployment-mechanics">here</a>.</p>
<p><img src="https://sagarthacker.com/posts/mlops/images/prefect-deployment/cli-project-deploy.png" class="img-fluid"></p>
<p><img src="https://sagarthacker.com/posts/mlops/images/prefect-deployment/ui-project-deploy.png" class="img-fluid"></p>
</section>
<section id="step-7-execute-the-deployments." class="level3">
<h3 class="anchored" data-anchor-id="step-7-execute-the-deployments.">Step 7: Execute the deployments.</h3>
<p>You can execute a deployment either through the Prefect UI or using the CLI command.</p>
<div class="sourceCode" id="cb27" style="background: #f1f3f5;"><pre class="sourceCode numberSource bash number-lines code-with-copy"><code class="sourceCode bash"><span id="cb27-1"><span class="co" style="color: #5E5E5E;"># Using the default parameters</span></span>
<span id="cb27-2"><span class="ex" style="color: null;">prefect</span> deployment run hello-flow/manual-deployment</span>
<span id="cb27-3"></span>
<span id="cb27-4"><span class="co" style="color: #5E5E5E;"># Using the custom parameters</span></span>
<span id="cb27-5"><span class="ex" style="color: null;">prefect</span> deployment run hello-flow/manual-deployment <span class="at" style="color: #657422;">--param</span> name=<span class="st" style="color: #20794D;">"Prefect"</span></span></code></pre></div>
<p>Output of the CLI command with default parameters.</p>
<p><img src="https://sagarthacker.com/posts/mlops/images/prefect-deployment/ui-project-run.png" class="img-fluid"></p>
<p>Output of the CLI command with custom parameters.</p>
<p><img src="https://sagarthacker.com/posts/mlops/images/prefect-deployment/ui-project-run-custom.png" class="img-fluid"></p>
<p>Congratulations! 🎉 You have successfully created your first Prefect Project.</p>
<p>Prefect Project have a lot more to offer.</p>
<p>I encourage you to read about <a href="https://docs.prefect.io/2.10.13/concepts/projects/#templating-options">Templating Options</a> for <code>deployment.yaml</code> file that lets you refer dynamic value to the file. Also, read more about <code>prefect.yaml</code> file <a href="https://docs.prefect.io/2.10.13/concepts/projects/#the-prefect-yaml-file">here</a>.</p>
</section>
</section>
<section id="references" class="level2">
<h2 class="anchored" data-anchor-id="references">References</h2>
<ol type="1">
<li><a href="https://docs.prefect.io/2.10.13/concepts/deployments/">Deployments</a></li>
<li><a href="https://docs.prefect.io/2.10.13/concepts/work-pools/">Work Pools, Workers &amp; Agents</a></li>
<li><a href="https://docs.prefect.io/2.10.13/concepts/storage/">Storage</a></li>
<li><a href="https://docs.prefect.io/2.10.13/concepts/schedules/">Schedules</a></li>
<li><a href="https://docs.prefect.io/2.10.13/concepts/projects/">Projects</a></li>
<li><a href="https://docs.prefect.io/2.10.13/tutorial/deployments/">Deployment Tutorial</a></li>
<li><a href="https://github.com/PrefectHQ/prefect/blob/main/docs/img/concepts/flow-deployment-end-to-end.png">End-to-End Example Image</a></li>
</ol>
</section>
<section id="conclusion" class="level2">
<h2 class="anchored" data-anchor-id="conclusion">Conclusion</h2>
<p>In this post, we covered the basics of Prefect deployment and how to deploy a flow. We also covered Prefect Projects and how to use it to create a deployment. In the next post, we’ll cover storgae and deployment on Prefect Cloud.</p>
<p>Thank you for reading and I hope you found this notebook helpful. 👏 Upvote if you liked it, 💬 comment if you loved it. Hope to see you guys in the next one. ✌️ Peace!</p>


</section>

 ]]></description>
  <category>MLOps</category>
  <category>Prefect</category>
  <category>Deployment</category>
  <guid>https://sagarthacker.com/posts/mlops/prefect-deployment.html</guid>
  <pubDate>Sun, 11 Jun 2023 04:00:00 GMT</pubDate>
  <media:content url="https://sagarthacker.com/posts/mlops/images/prefect-deployment/flow-deployment-end-to-end.png" medium="image" type="image/png" height="63" width="144"/>
</item>
<item>
  <title>Prefect Blocks</title>
  <dc:creator>Sagar Thacker</dc:creator>
  <link>https://sagarthacker.com/posts/mlops/prefect-blocks.html</link>
  <description><![CDATA[ 




<p>In this post, we’ll be building up on the concepts we discussed in the previous post. If you haven’t read that, I highly recommend checking it out before you continue reading this. You can find the post <a href="https://sagarthacker.com/posts/mlops/intro_workflow_orchestration.html">here</a>.</p>
<p>In the previous post, we build a simple prefect flow that downloads a file from a URL and saves it to a local directory. We used MLflow to track our experiment - train a XGBoost model on the downloaded data. In this post, we’ll be implementing the same workflow but this time we’ll fetch the data from S3 instead of downloading it from a URL.</p>
<p>We’ll setup the S3 bucket and also create a new IAM user and attach the AmazonS3FullAccess policy to it. We’ll use the Access key and Secret key to access the S3 bucket from our code.</p>
<section id="setup-s3-bucket" class="level2">
<h2 class="anchored" data-anchor-id="setup-s3-bucket">Setup S3 Bucket</h2>
<ol type="1">
<li>Log into your AWS account and click on <code>Services</code> on the top left corner. Search for <code>S3</code> and click on it.</li>
<li>Click on <code>Create bucket</code> and give it a name. Note: Bucket names must be unique across all AWS accounts.</li>
<li>Keep the default settings and click on <code>Create bucket</code>.</li>
</ol>
</section>
<section id="upload-the-data-to-the-s3-bucket" class="level2">
<h2 class="anchored" data-anchor-id="upload-the-data-to-the-s3-bucket">Upload the data to the S3 bucket</h2>
<p>Download the data on your local machine and upload it to the S3 bucket. To keep it simple we’ll use the GUI to upload the data to the S3 bucket. Use the following command in your terminal / command prompt to download the data.</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode numberSource bash number-lines code-with-copy"><code class="sourceCode bash"><span id="cb1-1"><span class="co" style="color: #5E5E5E;"># Download dataset</span></span>
<span id="cb1-2"><span class="fu" style="color: #4758AB;">wget</span> https://d37ci6vzurychx.cloudfront.net/trip-data/green_tripdata_2022-01.parquet <span class="co" style="color: #5E5E5E;"># January 2022</span></span>
<span id="cb1-3"><span class="fu" style="color: #4758AB;">wget</span> https://d37ci6vzurychx.cloudfront.net/trip-data/green_tripdata_2022-02.parquet <span class="co" style="color: #5E5E5E;"># February 2022</span></span>
<span id="cb1-4"><span class="fu" style="color: #4758AB;">wget</span> https://d37ci6vzurychx.cloudfront.net/trip-data/green_tripdata_2022-03.parquet <span class="co" style="color: #5E5E5E;"># March 2022</span></span></code></pre></div>
<p>Now, let’s upload the data to the S3 bucket. Follow the steps below to upload the data to the S3 bucket.</p>
<ol type="1">
<li>Click on the bucket you just created.</li>
<li>Create a new folder by clicking on <code>Create folder</code> and give it a name <code>data</code>.</li>
<li>Click on <code>Upload</code> and select the file you want to upload.</li>
<li>Click on <code>Upload</code> again and wait for the upload to complete.</li>
</ol>
<p>Awesome! We now have the data in the S3 bucket.</p>
</section>
<section id="create-iam-user" class="level2">
<h2 class="anchored" data-anchor-id="create-iam-user">Create IAM user</h2>
<p>We’ll now create a new IAM user and attach the AmazonS3FullAccess policy to it. We’ll use the Access key and Secret key to access the S3 bucket from our code. Follow the steps below to create a new IAM user.</p>
<ol type="1">
<li>Click on <code>Services</code> on the top left corner. Search for <code>IAM</code> and click on it.</li>
<li>Click on <code>Users</code> on the left sidebar and then click on <code>Add user</code>.</li>
<li>Give the user a name and click on <code>Next</code>.</li>
<li>It is recommended to use groups to manage user’s permissions. Click on <code>Create group</code> and give it a name. Search for <code>AmazonS3FullAccess</code> in the Permissions policies table and select it. Click on <code>Create user group</code>.</li>
<li>Now, select the group you just created and click on <code>Next</code>.</li>
<li>Click on <code>Create User</code>.</li>
</ol>
<section id="generate-access-key-and-secret-key" class="level3">
<h3 class="anchored" data-anchor-id="generate-access-key-and-secret-key">Generate Access key and Secret key</h3>
<ol type="1">
<li>Click on the user you just created.</li>
<li>Click on <code>Security credentials</code> tab and under the Access keys section click on <code>Create access key</code>.</li>
<li>Select the <code>Other</code> option and click on <code>Next</code> and then click on <code>Create access key</code>.</li>
<li>Click on <code>Show</code> to view the Access key and Secret key. Note: You won’t be able to view the Secret key again so make sure you save it somewhere safe. Alternatively, you can also download the CSV file using the <code>Download .csv file</code> button.</li>
</ol>
<p>We’re all setup now. Let’s get started with Prefect Blocks.</p>
</section>
</section>
<section id="prefect-blocks" class="level2">
<h2 class="anchored" data-anchor-id="prefect-blocks">Prefect Blocks</h2>
<p>Blocks serve as a fundamental element in Prefect, allowing the storage of configuration information and providing an interface for seamless interaction with external systems.</p>
<p>Blocks offer a secure way to store authentication credentials for various services such as AWS, GitHub, Slack, and more, enabling seamless integration with Prefect.</p>
<p>By utilizing blocks, you gain access to convenient methods that facilitate interactions with external systems. For instance, you can effortlessly download or upload data from/to an S3 bucket, query or write data in a database, or send messages to Slack channels.</p>
<p>Configuring blocks can be done either programmatically or through the user-friendly interfaces of Prefect Cloud and the Prefect server UI. This flexibility allows you to manage blocks based on your preferred approach.</p>
<p>You can find blocks on the Prefect UI under the <code>Blocks</code> section. Click on <code>Add Block</code> to see the different blocks available.</p>
<p><img src="https://sagarthacker.com/posts/mlops/https:/docs.prefect.io/img/ui/block-library.png" class="img-fluid"></p>
<div class="callout-note callout callout-style-default callout-captioned">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-caption-container flex-fill">
Note
</div>
</div>
<div class="callout-body-container callout-body">
<p>Don’t worry if you don’t see the different blocks in your UI. We’ll be adding them in the next section. You can skip this section if you find <code>S3 Bucket</code> and <code>AWS Credentials</code> Blocks in the UI.</p>
</div>
</div>
<section id="adding-blocks-to-prefect-ui" class="level3">
<h3 class="anchored" data-anchor-id="adding-blocks-to-prefect-ui">Adding blocks to Prefect UI</h3>
<div class="callout-note callout callout-style-default callout-captioned">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-caption-container flex-fill">
Note
</div>
</div>
<div class="callout-body-container callout-body">
<p>We’ll be using the same environment we created in the previous post. If you haven’t created the environment, you can find the instructions <a href="https://sagarthacker.com/posts/mlops/intro_workflow_orchestration.html#setup">here</a>.</p>
</div>
</div>
<p>To see the different blocks Prefect has to offer you can find them <a href="https://docs.prefect.io/integrations/">here</a>. Prefect also allows you to create your own custom blocks. You can find the documentation <a href="https://docs.prefect.io/2.10.12/concepts/blocks/#creating-new-block-types">here</a>.</p>
<p>For this post, we’ll be using the AWS integration <code>prefect-aws</code> to use the following blocks:</p>
<ul>
<li><code>S3Bucket</code></li>
<li><code>AwsCredentials</code></li>
</ul>
<p>To use these blocks you can pip install the package, then register the blocks you want to use with Prefect Cloud or a Prefect server. Follow the steps below:</p>
<ol type="1">
<li>Install the <code>prefect_aws</code> package in your environment.</li>
</ol>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode numberSource bash number-lines code-with-copy"><code class="sourceCode bash"><span id="cb2-1"><span class="ex" style="color: null;">pip</span> install prefect_aws</span></code></pre></div>
<ol start="2" type="1">
<li>Register the blocks using the <code>prefect register</code> command. <code>-m</code> flag is used to specify the module name.</li>
</ol>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode numberSource bash number-lines code-with-copy"><code class="sourceCode bash"><span id="cb3-1"><span class="ex" style="color: null;">prefect</span> block register <span class="at" style="color: #657422;">-m</span> prefect_aws</span></code></pre></div>
<p>Now you should be able to see the blocks in the Prefect UI.</p>
</section>
<section id="create-s3-bucket-block" class="level3">
<h3 class="anchored" data-anchor-id="create-s3-bucket-block">Create S3 Bucket block</h3>
<p>We’ll now create a new file <code>create_s3_bucket.py</code> to store the credentials and the S3 bucket configurations. We’ll be using the <code>AwsCredentials</code> and <code>S3Bucket</code> blocks to create the S3 bucket.</p>
<div class="code-with-filename">
<div class="code-with-filename-file">
<pre><strong>create_s3_bucket.py</strong></pre>
</div>
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb4-1"><span class="im" style="color: #00769E;">from</span> time <span class="im" style="color: #00769E;">import</span> sleep</span>
<span id="cb4-2"><span class="im" style="color: #00769E;">from</span> prefect_aws <span class="im" style="color: #00769E;">import</span> S3Bucket, AwsCredentials</span>
<span id="cb4-3"></span>
<span id="cb4-4"><span class="co" style="color: #5E5E5E;"># Create and save AWS credentials block</span></span>
<span id="cb4-5"><span class="kw" style="color: #003B4F;">def</span> create_aws_creds_block():</span>
<span id="cb4-6">    <span class="co" style="color: #5E5E5E;"># Create AWS credentials object</span></span>
<span id="cb4-7">    my_aws_creds_obj <span class="op" style="color: #5E5E5E;">=</span> AwsCredentials(</span>
<span id="cb4-8">        aws_access_key_id <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">"&lt;ACCESS_KEY&gt;"</span>, <span class="co" style="color: #5E5E5E;"># Replace with your access key</span></span>
<span id="cb4-9">        aws_secret_access_key <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">"&lt;SECRET_KEY&gt;"</span> <span class="co" style="color: #5E5E5E;"># Replace with your secret key</span></span>
<span id="cb4-10">    )</span>
<span id="cb4-11">    </span>
<span id="cb4-12">    <span class="co" style="color: #5E5E5E;"># Save the AWS credentials block</span></span>
<span id="cb4-13">    my_aws_creds_obj.save(name<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"my-aws-creds"</span>, overwrite<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>)</span>
<span id="cb4-14"></span>
<span id="cb4-15"><span class="co" style="color: #5E5E5E;"># Create and save S3 bucket block</span></span>
<span id="cb4-16"><span class="kw" style="color: #003B4F;">def</span> create_s3_bucket_block():</span>
<span id="cb4-17">    <span class="co" style="color: #5E5E5E;"># Load AWS credentials block</span></span>
<span id="cb4-18">    aws_creds <span class="op" style="color: #5E5E5E;">=</span> AwsCredentials.load(<span class="st" style="color: #20794D;">"my-aws-creds"</span>)</span>
<span id="cb4-19">    </span>
<span id="cb4-20">    <span class="co" style="color: #5E5E5E;"># Create S3 bucket object</span></span>
<span id="cb4-21">    my_s3_bucket_obj <span class="op" style="color: #5E5E5E;">=</span> S3Bucket(</span>
<span id="cb4-22">        bucket_name <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">"&lt;BUCKET_NAME&gt;"</span>, <span class="co" style="color: #5E5E5E;"># Replace with your bucket name</span></span>
<span id="cb4-23">        credentials <span class="op" style="color: #5E5E5E;">=</span> aws_creds</span>
<span id="cb4-24">    )</span>
<span id="cb4-25">    </span>
<span id="cb4-26">    <span class="co" style="color: #5E5E5E;"># Save the S3 bucket block</span></span>
<span id="cb4-27">    my_s3_bucket_obj.save(name<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"s3-bucket-example"</span>, overwrite<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>)</span>
<span id="cb4-28"></span>
<span id="cb4-29"></span>
<span id="cb4-30"><span class="cf" style="color: #003B4F;">if</span> <span class="va" style="color: #111111;">__name__</span> <span class="op" style="color: #5E5E5E;">==</span> <span class="st" style="color: #20794D;">"__main__"</span>:</span>
<span id="cb4-31">    <span class="co" style="color: #5E5E5E;"># Create and save AWS credentials block</span></span>
<span id="cb4-32">    create_aws_creds_block()</span>
<span id="cb4-33">    </span>
<span id="cb4-34">    <span class="co" style="color: #5E5E5E;"># Sleep for 5 seconds to allow time for the AWS credentials to be saved</span></span>
<span id="cb4-35">    sleep(<span class="dv" style="color: #AD0000;">5</span>)</span>
<span id="cb4-36">    </span>
<span id="cb4-37">    <span class="co" style="color: #5E5E5E;"># Create and save S3 bucket block</span></span>
<span id="cb4-38">    create_s3_bucket_block()</span></code></pre></div>
</div>
<p>Let’s understand what’s happening in the code above.</p>
<ol type="1">
<li>We first create an <code>AwsCredentials</code> object and pass the Access key and Secret key to it. We then save the object as a block using the <code>save</code> method. We also pass the <code>overwrite</code> argument as <code>True</code> to overwrite the block if it already exists. (Note: Use the Access key and Secret key you created in the previous section)</li>
<li>We then create an <code>S3Bucket</code> object and pass the bucket name and the <code>AwsCredentials</code> object to it. We then save the object as a block using the <code>save</code> method. We also pass the <code>overwrite</code> argument as <code>True</code> to overwrite the block if it already exists.</li>
</ol>
<p>This allows to store the credentials and configurations in a secure way, and use them in our workflows.</p>
<p><code>prefect block ls</code> command can be used to list all the blocks. However, since we haven’t registered the above below in Prefect, we won’t be able to see them.</p>
<p>We’ll run the script to create and save the blocks in Prefect. Before running the script, make sure you start the prefect server.</p>
<div class="sourceCode" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode numberSource bash number-lines code-with-copy"><code class="sourceCode bash"><span id="cb5-1"><span class="co" style="color: #5E5E5E;"># Make sure to start the prefect server before running the script</span></span>
<span id="cb5-2"><span class="ex" style="color: null;">prefect</span> server start</span>
<span id="cb5-3"></span>
<span id="cb5-4"><span class="co" style="color: #5E5E5E;"># Run the script (In new terminal window)</span></span>
<span id="cb5-5"><span class="ex" style="color: null;">python</span> create_s3_bucket.py</span></code></pre></div>
<p>If you run the command <code>prefect block ls</code> you should be able to see the blocks. Similarly if you go to the Prefect UI you should be able to see the blocks under the <code>Blocks</code> section.</p>
<p><img src="https://sagarthacker.com/posts/mlops/images/prefect_blocks/prefect_block_ls.png" class="img-fluid"></p>
<p><img src="https://sagarthacker.com/posts/mlops/images/prefect_blocks/prefect_block_ui.png" class="img-fluid"></p>
<p>Now that we have the blocks setup, we can use them in our workflow.</p>
</section>
</section>
<section id="workflow" class="level2">
<h2 class="anchored" data-anchor-id="workflow">Workflow</h2>
<p>We’ll be using the same workflow we created in the previous post with some modifications. We’ll be using the <code>S3Bucket</code> block to download the data from the S3 bucket.</p>
<p>We import the S3Bucket Block using the command <code>from prefect_aws import S3Bucket</code>.</p>
<div class="code-with-filename">
<div class="code-with-filename-file">
<pre><strong>orchestration_s3.py</strong></pre>
</div>
<div class="sourceCode" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb6-1"><span class="im" style="color: #00769E;">import</span> os</span>
<span id="cb6-2"><span class="im" style="color: #00769E;">import</span> pickle</span>
<span id="cb6-3"><span class="im" style="color: #00769E;">import</span> pathlib</span>
<span id="cb6-4"><span class="im" style="color: #00769E;">import</span> scipy</span>
<span id="cb6-5"><span class="im" style="color: #00769E;">import</span> mlflow</span>
<span id="cb6-6"><span class="im" style="color: #00769E;">import</span> sklearn</span>
<span id="cb6-7"><span class="im" style="color: #00769E;">import</span> argparse</span>
<span id="cb6-8"><span class="im" style="color: #00769E;">import</span> pandas <span class="im" style="color: #00769E;">as</span> pd</span>
<span id="cb6-9"><span class="im" style="color: #00769E;">import</span> numpy <span class="im" style="color: #00769E;">as</span> np</span>
<span id="cb6-10"><span class="im" style="color: #00769E;">import</span> xgboost <span class="im" style="color: #00769E;">as</span> xgb</span>
<span id="cb6-11"><span class="im" style="color: #00769E;">from</span> sklearn.feature_extraction <span class="im" style="color: #00769E;">import</span> DictVectorizer</span>
<span id="cb6-12"><span class="im" style="color: #00769E;">from</span> sklearn.metrics <span class="im" style="color: #00769E;">import</span> mean_squared_error</span>
<span id="cb6-13"><span class="im" style="color: #00769E;">from</span> prefect <span class="im" style="color: #00769E;">import</span> flow, task</span>
<span id="cb6-14"><span class="im" style="color: #00769E;">from</span> prefect_aws <span class="im" style="color: #00769E;">import</span> S3Bucket</span>
<span id="cb6-15"></span>
<span id="cb6-16"><span class="at" style="color: #657422;">@task</span>(name<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"Read a Parquet file"</span>)</span>
<span id="cb6-17"><span class="kw" style="color: #003B4F;">def</span> read_data(filename: <span class="bu" style="color: null;">str</span>) <span class="op" style="color: #5E5E5E;">-&gt;</span> pd.DataFrame:</span>
<span id="cb6-18">    <span class="co" style="color: #5E5E5E;">"""Read data into DataFrame"""</span></span>
<span id="cb6-19">    df <span class="op" style="color: #5E5E5E;">=</span> pd.read_parquet(filename)</span>
<span id="cb6-20"></span>
<span id="cb6-21">    df.lpep_dropoff_datetime <span class="op" style="color: #5E5E5E;">=</span> pd.to_datetime(df.lpep_dropoff_datetime)</span>
<span id="cb6-22">    df.lpep_pickup_datetime <span class="op" style="color: #5E5E5E;">=</span> pd.to_datetime(df.lpep_pickup_datetime)</span>
<span id="cb6-23"></span>
<span id="cb6-24">    df[<span class="st" style="color: #20794D;">"duration"</span>] <span class="op" style="color: #5E5E5E;">=</span> df.lpep_dropoff_datetime <span class="op" style="color: #5E5E5E;">-</span> df.lpep_pickup_datetime</span>
<span id="cb6-25">    df.duration <span class="op" style="color: #5E5E5E;">=</span> df.duration.<span class="bu" style="color: null;">apply</span>(<span class="kw" style="color: #003B4F;">lambda</span> td: td.total_seconds() <span class="op" style="color: #5E5E5E;">/</span> <span class="dv" style="color: #AD0000;">60</span>)</span>
<span id="cb6-26"></span>
<span id="cb6-27">    df <span class="op" style="color: #5E5E5E;">=</span> df[(df.duration <span class="op" style="color: #5E5E5E;">&gt;=</span> <span class="dv" style="color: #AD0000;">1</span>) <span class="op" style="color: #5E5E5E;">&amp;</span> (df.duration <span class="op" style="color: #5E5E5E;">&lt;=</span> <span class="dv" style="color: #AD0000;">60</span>)]</span>
<span id="cb6-28"></span>
<span id="cb6-29">    categorical <span class="op" style="color: #5E5E5E;">=</span> [<span class="st" style="color: #20794D;">"PULocationID"</span>, <span class="st" style="color: #20794D;">"DOLocationID"</span>]</span>
<span id="cb6-30">    df[categorical] <span class="op" style="color: #5E5E5E;">=</span> df[categorical].astype(<span class="bu" style="color: null;">str</span>)</span>
<span id="cb6-31"></span>
<span id="cb6-32">    <span class="cf" style="color: #003B4F;">return</span> df</span>
<span id="cb6-33"></span>
<span id="cb6-34"><span class="at" style="color: #657422;">@task</span>(name<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"Add Features"</span>)</span>
<span id="cb6-35"><span class="kw" style="color: #003B4F;">def</span> add_features(df_train: pd.DataFrame, df_val: pd.DataFrame) <span class="op" style="color: #5E5E5E;">-&gt;</span> <span class="bu" style="color: null;">tuple</span>([</span>
<span id="cb6-36">        scipy.sparse._csr.csr_matrix,</span>
<span id="cb6-37">        scipy.sparse._csr.csr_matrix,</span>
<span id="cb6-38">        np.ndarray,</span>
<span id="cb6-39">        np.ndarray,</span>
<span id="cb6-40">        sklearn.feature_extraction.DictVectorizer,</span>
<span id="cb6-41">    ]):</span>
<span id="cb6-42">    <span class="co" style="color: #5E5E5E;">"""Add features to the model"""</span></span>
<span id="cb6-43">    df_train[<span class="st" style="color: #20794D;">"PU_DO"</span>] <span class="op" style="color: #5E5E5E;">=</span> df_train[<span class="st" style="color: #20794D;">"PULocationID"</span>] <span class="op" style="color: #5E5E5E;">+</span> <span class="st" style="color: #20794D;">"_"</span> <span class="op" style="color: #5E5E5E;">+</span> df_train[<span class="st" style="color: #20794D;">"DOLocationID"</span>]</span>
<span id="cb6-44">    df_val[<span class="st" style="color: #20794D;">"PU_DO"</span>] <span class="op" style="color: #5E5E5E;">=</span> df_val[<span class="st" style="color: #20794D;">"PULocationID"</span>] <span class="op" style="color: #5E5E5E;">+</span> <span class="st" style="color: #20794D;">"_"</span> <span class="op" style="color: #5E5E5E;">+</span> df_val[<span class="st" style="color: #20794D;">"DOLocationID"</span>]</span>
<span id="cb6-45"></span>
<span id="cb6-46">    categorical <span class="op" style="color: #5E5E5E;">=</span> [<span class="st" style="color: #20794D;">"PU_DO"</span>]  <span class="co" style="color: #5E5E5E;">#'PULocationID', 'DOLocationID']</span></span>
<span id="cb6-47">    numerical <span class="op" style="color: #5E5E5E;">=</span> [<span class="st" style="color: #20794D;">"trip_distance"</span>]</span>
<span id="cb6-48"></span>
<span id="cb6-49">    dv <span class="op" style="color: #5E5E5E;">=</span> DictVectorizer()</span>
<span id="cb6-50"></span>
<span id="cb6-51">    train_dicts <span class="op" style="color: #5E5E5E;">=</span> df_train[categorical <span class="op" style="color: #5E5E5E;">+</span> numerical].to_dict(orient<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"records"</span>)</span>
<span id="cb6-52">    X_train <span class="op" style="color: #5E5E5E;">=</span> dv.fit_transform(train_dicts)</span>
<span id="cb6-53"></span>
<span id="cb6-54">    val_dicts <span class="op" style="color: #5E5E5E;">=</span> df_val[categorical <span class="op" style="color: #5E5E5E;">+</span> numerical].to_dict(orient<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"records"</span>)</span>
<span id="cb6-55">    X_val <span class="op" style="color: #5E5E5E;">=</span> dv.transform(val_dicts)</span>
<span id="cb6-56"></span>
<span id="cb6-57">    y_train <span class="op" style="color: #5E5E5E;">=</span> df_train[<span class="st" style="color: #20794D;">"duration"</span>].values</span>
<span id="cb6-58">    y_val <span class="op" style="color: #5E5E5E;">=</span> df_val[<span class="st" style="color: #20794D;">"duration"</span>].values</span>
<span id="cb6-59">    <span class="cf" style="color: #003B4F;">return</span> X_train, X_val, y_train, y_val, dv</span>
<span id="cb6-60"></span>
<span id="cb6-61"><span class="at" style="color: #657422;">@task</span>(name<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"Train Model"</span>, log_prints<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>)</span>
<span id="cb6-62"><span class="kw" style="color: #003B4F;">def</span> train_best_model(</span>
<span id="cb6-63">    X_train: scipy.sparse._csr.csr_matrix,</span>
<span id="cb6-64">    X_val: scipy.sparse._csr.csr_matrix,</span>
<span id="cb6-65">    y_train: np.ndarray,</span>
<span id="cb6-66">    y_val: np.ndarray,</span>
<span id="cb6-67">    dv: sklearn.feature_extraction.DictVectorizer,</span>
<span id="cb6-68">) <span class="op" style="color: #5E5E5E;">-&gt;</span> <span class="va" style="color: #111111;">None</span>:</span>
<span id="cb6-69">    <span class="co" style="color: #5E5E5E;">"""train a model with best hyperparams and write everything out"""</span></span>
<span id="cb6-70"></span>
<span id="cb6-71">    <span class="cf" style="color: #003B4F;">with</span> mlflow.start_run():</span>
<span id="cb6-72">        train <span class="op" style="color: #5E5E5E;">=</span> xgb.DMatrix(X_train, label<span class="op" style="color: #5E5E5E;">=</span>y_train)</span>
<span id="cb6-73">        valid <span class="op" style="color: #5E5E5E;">=</span> xgb.DMatrix(X_val, label<span class="op" style="color: #5E5E5E;">=</span>y_val)</span>
<span id="cb6-74"></span>
<span id="cb6-75">        best_params <span class="op" style="color: #5E5E5E;">=</span> {</span>
<span id="cb6-76">            <span class="st" style="color: #20794D;">"learning_rate"</span>: <span class="fl" style="color: #AD0000;">0.09585355369315604</span>,</span>
<span id="cb6-77">            <span class="st" style="color: #20794D;">"max_depth"</span>: <span class="dv" style="color: #AD0000;">30</span>,</span>
<span id="cb6-78">            <span class="st" style="color: #20794D;">"min_child_weight"</span>: <span class="fl" style="color: #AD0000;">1.060597050922164</span>,</span>
<span id="cb6-79">            <span class="st" style="color: #20794D;">"objective"</span>: <span class="st" style="color: #20794D;">"reg:linear"</span>,</span>
<span id="cb6-80">            <span class="st" style="color: #20794D;">"reg_alpha"</span>: <span class="fl" style="color: #AD0000;">0.018060244040060163</span>,</span>
<span id="cb6-81">            <span class="st" style="color: #20794D;">"reg_lambda"</span>: <span class="fl" style="color: #AD0000;">0.011658731377413597</span>,</span>
<span id="cb6-82">            <span class="st" style="color: #20794D;">"seed"</span>: <span class="dv" style="color: #AD0000;">42</span>,</span>
<span id="cb6-83">        }</span>
<span id="cb6-84"></span>
<span id="cb6-85">        mlflow.log_params(best_params)</span>
<span id="cb6-86"></span>
<span id="cb6-87">        booster <span class="op" style="color: #5E5E5E;">=</span> xgb.train(</span>
<span id="cb6-88">            params<span class="op" style="color: #5E5E5E;">=</span>best_params,</span>
<span id="cb6-89">            dtrain<span class="op" style="color: #5E5E5E;">=</span>train,</span>
<span id="cb6-90">            num_boost_round<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">100</span>,</span>
<span id="cb6-91">            evals<span class="op" style="color: #5E5E5E;">=</span>[(valid, <span class="st" style="color: #20794D;">"validation"</span>)],</span>
<span id="cb6-92">            early_stopping_rounds<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">20</span>,</span>
<span id="cb6-93">        )</span>
<span id="cb6-94"></span>
<span id="cb6-95">        y_pred <span class="op" style="color: #5E5E5E;">=</span> booster.predict(valid)</span>
<span id="cb6-96">        rmse <span class="op" style="color: #5E5E5E;">=</span> mean_squared_error(y_val, y_pred, squared<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">False</span>)</span>
<span id="cb6-97">        mlflow.log_metric(<span class="st" style="color: #20794D;">"rmse"</span>, rmse)</span>
<span id="cb6-98"></span>
<span id="cb6-99">        pathlib.Path(<span class="st" style="color: #20794D;">"models"</span>).mkdir(exist_ok<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>)</span>
<span id="cb6-100">        <span class="cf" style="color: #003B4F;">with</span> <span class="bu" style="color: null;">open</span>(<span class="st" style="color: #20794D;">"models/preprocessor.b"</span>, <span class="st" style="color: #20794D;">"wb"</span>) <span class="im" style="color: #00769E;">as</span> f_out:</span>
<span id="cb6-101">            pickle.dump(dv, f_out)</span>
<span id="cb6-102">        mlflow.log_artifact(<span class="st" style="color: #20794D;">"models/preprocessor.b"</span>, artifact_path<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"preprocessor"</span>)</span>
<span id="cb6-103"></span>
<span id="cb6-104">        mlflow.xgboost.log_model(booster, artifact_path<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"models_mlflow"</span>)</span>
<span id="cb6-105">    <span class="cf" style="color: #003B4F;">return</span> <span class="va" style="color: #111111;">None</span></span>
<span id="cb6-106"></span>
<span id="cb6-107"><span class="at" style="color: #657422;">@flow</span>(name<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"Main Flow"</span>)</span>
<span id="cb6-108"><span class="kw" style="color: #003B4F;">def</span> main_flow():</span>
<span id="cb6-109">    <span class="co" style="color: #5E5E5E;">"""Main flow of the program"""</span></span>
<span id="cb6-110">    </span>
<span id="cb6-111">    <span class="co" style="color: #5E5E5E;"># MLflow settings</span></span>
<span id="cb6-112">    mlflow.set_tracking_uri(<span class="st" style="color: #20794D;">"sqlite:///mlflow.db"</span>)</span>
<span id="cb6-113">    mlflow.set_experiment(<span class="st" style="color: #20794D;">"nyc-taxi-experiment"</span>)</span>
<span id="cb6-114"></span>
<span id="cb6-115">    <span class="co" style="color: #5E5E5E;"># Load</span></span>
<span id="cb6-116">    s3_bucket_block <span class="op" style="color: #5E5E5E;">=</span> S3Bucket.load(<span class="st" style="color: #20794D;">"s3-bucket-example"</span>)</span>
<span id="cb6-117">    s3_bucket_block.download_folder_to_path(from_folder<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"data"</span>, to_folder<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"data"</span>)</span>
<span id="cb6-118"></span>
<span id="cb6-119">    df_train <span class="op" style="color: #5E5E5E;">=</span> read_data(<span class="st" style="color: #20794D;">"./data/green_tripdata_2021-01.parquet"</span>)</span>
<span id="cb6-120">    df_val <span class="op" style="color: #5E5E5E;">=</span> read_data(<span class="st" style="color: #20794D;">"./data/green_tripdata_2021-02.parquet"</span>)</span>
<span id="cb6-121"></span>
<span id="cb6-122">    <span class="co" style="color: #5E5E5E;"># Transform</span></span>
<span id="cb6-123">    X_train, X_val, y_train, y_val, dv <span class="op" style="color: #5E5E5E;">=</span> add_features(df_train, df_val)</span>
<span id="cb6-124"></span>
<span id="cb6-125">    <span class="co" style="color: #5E5E5E;"># Train</span></span>
<span id="cb6-126">    train_best_model(X_train, X_val, y_train, y_val, dv)</span>
<span id="cb6-127"></span>
<span id="cb6-128"><span class="cf" style="color: #003B4F;">if</span> <span class="va" style="color: #111111;">__name__</span> <span class="op" style="color: #5E5E5E;">==</span> <span class="st" style="color: #20794D;">"__main__"</span>:</span>
<span id="cb6-129">    main_flow()</span></code></pre></div>
</div>
<p>To keep the workflow simple, we have removed the <code>fetch</code> and <code>download_and_read</code> (Subflow) functions. We have also made some changes to how the main_flow is called. The main change is that we are using the <code>S3Bucket</code> block to download the data from the S3 bucket.</p>
<p>To better understand the above script you can read my previous post <a href="https://sagarthacker.com/posts/mlops/intro_workflow_orchestration.html#prefect-flow">here</a>.</p>
<div class="sourceCode" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb7-1"><span class="co" style="color: #5E5E5E;"># Loads the configuration of the S3 Bucket from the S3Bucket Block</span></span>
<span id="cb7-2">s3_bucket_block <span class="op" style="color: #5E5E5E;">=</span> S3Bucket.load(<span class="st" style="color: #20794D;">"s3-bucket-block"</span>)</span>
<span id="cb7-3"></span>
<span id="cb7-4"><span class="co" style="color: #5E5E5E;"># Downloads the data from the S3 bucket folder name "data" to the local folder "data"</span></span>
<span id="cb7-5">s3_bucket_block.download_folder_to_path(from_folder<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"data"</span>, to_folder<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"data"</span>)</span></code></pre></div>
<p>Run the above script using the command <code>python orchestration_s3.py</code></p>
<p><img src="https://sagarthacker.com/posts/mlops/images/prefect_blocks/terminal_output.png" class="img-fluid"></p>
</section>
<section id="further-reading" class="level1">
<h1>Further Reading</h1>
<ul>
<li><a href="https://docs.prefect.io/2.10.12/concepts/blocks/">Prefect Blocks</a></li>
<li><a href="https://prefecthq.github.io/prefect-aws/">prefect-aws</a></li>
<li><a href="https://prefecthq.github.io/prefect-aws/s3/">prefect-aws.s3</a></li>
<li><a href="https://prefecthq.github.io/prefect-aws/credentials/">prefect-aws.credentials</a></li>
</ul>
<section id="conclusion" class="level2">
<h2 class="anchored" data-anchor-id="conclusion">Conclusion</h2>
<p>Prefect Blocks are a great way to reuse code and configurations, and to share them with your team. They also help secure your credentials and other sensitive information. In this tutorial, we have seen how to create a Prefect Block for the S3 Bucket. We have also seen how to use the S3 Bucket Block in a Prefect Flow.</p>
<p>Thank you for reading and I hope you found this notebook helpful. Upvote if you liked it, comment if you loved it. Hope to see you guys in the next one. Peace!</p>


</section>
</section>

 ]]></description>
  <category>MLOps</category>
  <category>Prefect</category>
  <guid>https://sagarthacker.com/posts/mlops/prefect-blocks.html</guid>
  <pubDate>Wed, 07 Jun 2023 04:00:00 GMT</pubDate>
  <media:content url="https://docs.prefect.io/img/ui/block-library.png" medium="image" type="image/png"/>
</item>
<item>
  <title>Prefect: An Workflow Orchestration Tool</title>
  <dc:creator>Sagar Thacker</dc:creator>
  <link>https://sagarthacker.com/posts/mlops/intro_workflow_orchestration.html</link>
  <description><![CDATA[ 




<p>Prefect is an open-source workflow orchestration tool that helps you automate and manage the flow of work across your data stack.</p>
<p>Prefect is built on Python and uses a modular architecture that makes it easy to build and deploy complex workflows. Prefect also includes a rich set of features for monitoring, debugging, and managing your workflows.</p>
<p>Before we dive into Prefect, let’s first understand what is workflow orchestration, why do we need it, and where does Prefect come into play.</p>
<section id="what-is-workflow-orchestration" class="level2">
<h2 class="anchored" data-anchor-id="what-is-workflow-orchestration">What is Workflow Orchestration?</h2>
<p>Building a ML system has a lot of moving parts. We have to deal with data collection, data preprocessing, model training, model serving, etc. Each of these steps can be further broken down into sub-steps. For example, data preprocessing can be broken down into feature engineering, feature selection, etc.</p>
<p>Workflow Orchestration is the process of automating and managing the flow of work across these steps. It helps us build complex workflows by combining multiple steps together. It also helps us manage the dependencies between these steps.</p>
<p><img src="https://sagarthacker.com/posts/mlops/images/intro_prefect/workflow.png" class="img-fluid"></p>
</section>
<section id="negative-engineering" class="level2">
<h2 class="anchored" data-anchor-id="negative-engineering">Negative Engineering</h2>
<p>Inspite of building a robust system, there are chances that something might go wrong. For example, the data might not be available, the model might fail to train, etc.</p>
<p><img src="https://sagarthacker.com/posts/mlops/images/intro_prefect/workflow_failed.png" class="img-fluid"></p>
<p>Often time while developing any application, we find ourselves spending a lot of time fixing bugs and making sure that everything works as expected. We spend time writing code to handle edge cases and make sure that our application is robust enough to handle any unexpected situation. Exmaples of such situations are:</p>
<ul>
<li>Writing Retries logic when APIs go down</li>
<li>Build Notifications for when a job fails</li>
<li>Record logs for observability and debugging</li>
<li>Write conditional logic to handle edge cases</li>
<li>Handle cases when requests timeouts or fails</li>
</ul>
<p>Negative Engineering refers to ideology that we spend most of our time writing code to handle edge cases rather than writing code that actually solves the problem. This is where Workflow Orchestration comes into play.</p>
<p>Worflow Orchestration tools provide set of features off the shelf that aim to eliminate the need for negative engineering. These tools provide features like retries, notifications, logging, lineage tracking, etc. out of the box.</p>
</section>
<section id="prefect" class="level2">
<h2 class="anchored" data-anchor-id="prefect">Prefect</h2>
<p>Prefect aims to eliminate the need for negative engineering by providing a rich set of features out of the box.</p>
<section id="setup" class="level3">
<h3 class="anchored" data-anchor-id="setup">Setup</h3>
<p>It is a good practice to create a virtual environment for each project. This helps us keep our dependencies separate and avoid any version conflicts.</p>
<div class="code-with-filename">
<div class="code-with-filename-file">
<pre><strong>requirements.txt</strong></pre>
</div>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode numberSource bash number-lines code-with-copy"><code class="sourceCode bash"><span id="cb1-1"><span class="va" style="color: #111111;">fastparquet</span><span class="op" style="color: #5E5E5E;">=</span>=2023.4.0</span>
<span id="cb1-2"><span class="va" style="color: #111111;">mlflow</span><span class="op" style="color: #5E5E5E;">=</span>=2.3.1</span>
<span id="cb1-3"><span class="va" style="color: #111111;">pandas</span><span class="op" style="color: #5E5E5E;">=</span>=2.0.1</span>
<span id="cb1-4"><span class="va" style="color: #111111;">prefect</span><span class="op" style="color: #5E5E5E;">=</span>=2.10.8</span>
<span id="cb1-5"><span class="va" style="color: #111111;">scikit_learn</span><span class="op" style="color: #5E5E5E;">=</span>=1.2.2</span>
<span id="cb1-6"><span class="va" style="color: #111111;">xgboost</span><span class="op" style="color: #5E5E5E;">=</span>=1.7.5</span>
<span id="cb1-7"><span class="ex" style="color: null;">psycopg2-binary==2.9.5</span></span></code></pre></div>
</div>
<p>Let’s create a virtual environment named <code>venv</code> and install all the dependencies.</p>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode numberSource bash number-lines code-with-copy"><code class="sourceCode bash"><span id="cb2-1"><span class="co" style="color: #5E5E5E;"># Create a virtual environment</span></span>
<span id="cb2-2"><span class="ex" style="color: null;">conda</span> create <span class="at" style="color: #657422;">-p</span> venv python=3.10 <span class="at" style="color: #657422;">-y</span></span>
<span id="cb2-3"></span>
<span id="cb2-4"><span class="co" style="color: #5E5E5E;"># Activate the virtual environment</span></span>
<span id="cb2-5"><span class="ex" style="color: null;">conda</span> activate venv/</span>
<span id="cb2-6"></span>
<span id="cb2-7"><span class="co" style="color: #5E5E5E;"># Install all the dependencies</span></span>
<span id="cb2-8"><span class="ex" style="color: null;">pip</span> install <span class="at" style="color: #657422;">-r</span> requirements.txt <span class="at" style="color: #657422;">--no-cache-dir</span></span></code></pre></div>
</section>
<section id="prefect-flow" class="level3">
<h3 class="anchored" data-anchor-id="prefect-flow">Prefect Flow</h3>
<p>We will be using the <a href="https://www1.nyc.gov/site/tlc/about/tlc-trip-record-data.page">NYC Taxi Dataset</a> for this tutorial. The dataset contains information about green taxi trips in New York City. The dataset is available in parquet format.</p>
<p>Steps that we’ll cover:</p>
<ol type="1">
<li>We’ll download the dataset from the NY Taxi website and load it into a pandas dataframe.</li>
<li>Preprocess the data.</li>
<li>Train a model on the preprocessed data.</li>
<li>Log the model and the metrics to MLflow.</li>
</ol>
<p>You’ll wonder where do we use Prefect in this? Answer is in each step.</p>
<p>We’ll go through each step in detail. At the end you’ll find the complete code for the workflow.</p>
<div class="cell" data-vscode="{&quot;languageId&quot;:&quot;plaintext&quot;}">
<details>
<summary>Import Libraries</summary>
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb3-1"><span class="im" style="color: #00769E;">import</span> os</span>
<span id="cb3-2"><span class="im" style="color: #00769E;">import</span> pickle</span>
<span id="cb3-3"><span class="im" style="color: #00769E;">import</span> pathlib</span>
<span id="cb3-4"><span class="im" style="color: #00769E;">import</span> scipy</span>
<span id="cb3-5"><span class="im" style="color: #00769E;">import</span> mlflow</span>
<span id="cb3-6"><span class="im" style="color: #00769E;">import</span> sklearn</span>
<span id="cb3-7"><span class="im" style="color: #00769E;">import</span> argparse</span>
<span id="cb3-8"><span class="im" style="color: #00769E;">import</span> pandas <span class="im" style="color: #00769E;">as</span> pd</span>
<span id="cb3-9"><span class="im" style="color: #00769E;">import</span> numpy <span class="im" style="color: #00769E;">as</span> np</span>
<span id="cb3-10"><span class="im" style="color: #00769E;">import</span> xgboost <span class="im" style="color: #00769E;">as</span> xgb</span>
<span id="cb3-11"><span class="im" style="color: #00769E;">from</span> sklearn.feature_extraction <span class="im" style="color: #00769E;">import</span> DictVectorizer</span>
<span id="cb3-12"><span class="im" style="color: #00769E;">from</span> sklearn.metrics <span class="im" style="color: #00769E;">import</span> mean_squared_error</span>
<span id="cb3-13"><span class="im" style="color: #00769E;">from</span> prefect <span class="im" style="color: #00769E;">import</span> flow, task</span>
<span id="cb3-14"><span class="im" style="color: #00769E;">from</span> prefect.tasks <span class="im" style="color: #00769E;">import</span> task_input_hash</span>
<span id="cb3-15"><span class="im" style="color: #00769E;">from</span> datetime <span class="im" style="color: #00769E;">import</span> timedelta</span></code></pre></div>
</details>
</div>
<p>Two most important building blocks in Prefect are <code>Task</code> and <code>Flow</code>. We’ll start by importing these two. More on these later.</p>
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb4-1"><span class="im" style="color: #00769E;">from</span> prefect <span class="im" style="color: #00769E;">import</span> task, flow</span></code></pre></div>
</section>
<section id="download-the-dataset" class="level3">
<h3 class="anchored" data-anchor-id="download-the-dataset">Download the dataset</h3>
<p>We have created a python function named <code>fetch</code> what will download the data from the NY Taxi website and save it to the <code>data</code> directory.</p>
<div class="sourceCode" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb5-1"><span class="at" style="color: #657422;">@task</span>(name<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"Fetch Data"</span>, log_prints<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>, retries<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">3</span>, cache_key_fn<span class="op" style="color: #5E5E5E;">=</span>task_input_hash, cache_expiration<span class="op" style="color: #5E5E5E;">=</span>timedelta(days<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">1</span>))</span>
<span id="cb5-2"><span class="kw" style="color: #003B4F;">def</span> fetch(year: <span class="bu" style="color: null;">int</span>, month: <span class="bu" style="color: null;">int</span>, color: <span class="bu" style="color: null;">str</span>) <span class="op" style="color: #5E5E5E;">-&gt;</span> <span class="va" style="color: #111111;">None</span>:</span>
<span id="cb5-3">    <span class="co" style="color: #5E5E5E;">"""Fetches data from the NYC Taxi dataset and saves it locally"""</span></span>
<span id="cb5-4"></span>
<span id="cb5-5">    <span class="co" style="color: #5E5E5E;"># Download the data from the NYC Taxi dataset</span></span>
<span id="cb5-6"></span>
<span id="cb5-7">    url <span class="op" style="color: #5E5E5E;">=</span> <span class="ss" style="color: #20794D;">f"https://d37ci6vzurychx.cloudfront.net/trip-data/</span><span class="sc" style="color: #5E5E5E;">{</span>color<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">_tripdata_</span><span class="sc" style="color: #5E5E5E;">{</span>year<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">-</span><span class="sc" style="color: #5E5E5E;">{</span>month<span class="sc" style="color: #5E5E5E;">:0&gt;2}</span><span class="ss" style="color: #20794D;">.parquet"</span></span>
<span id="cb5-8">    file_name <span class="op" style="color: #5E5E5E;">=</span> <span class="ss" style="color: #20794D;">f"</span><span class="sc" style="color: #5E5E5E;">{</span>color<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">_tripdata_</span><span class="sc" style="color: #5E5E5E;">{</span>year<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">-</span><span class="sc" style="color: #5E5E5E;">{</span>month<span class="sc" style="color: #5E5E5E;">:0&gt;2}</span><span class="ss" style="color: #20794D;">.parquet"</span></span>
<span id="cb5-9"></span>
<span id="cb5-10">    pathlib.Path(<span class="st" style="color: #20794D;">"data"</span>).mkdir(exist_ok<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>)</span>
<span id="cb5-11"></span>
<span id="cb5-12">    os.system(<span class="ss" style="color: #20794D;">f"wget </span><span class="sc" style="color: #5E5E5E;">{</span>url<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;"> -O ./data/</span><span class="sc" style="color: #5E5E5E;">{</span>file_name<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">"</span>)</span></code></pre></div>
<p>Let’s understand what is happening here.</p>
<p>The function is defined in the same way as any other python function. The only difference is that we have added a decorator <code>@task</code> to the function. This decorator converts the python function into a Prefect Task. The decorator takes a few arguments:</p>
<ul>
<li><code>@task</code> is a decorator that converts a python function into a Prefect Task.</li>
<li><code>name</code> is the name of the task. This is used to identify the task in the Prefect UI.</li>
<li><code>log_prints</code> is a boolean flag that tells Prefect to log the output of the task.</li>
<li><code>retries</code> is the number of times the task should be retried in case of failure.</li>
<li><code>cache_key_fn</code> is a function that returns a unique key for the task. This is used to cache the output of the task.</li>
<li><code>cache_expiration</code> is the time after which the cache should expire.</li>
</ul>
<div class="callout-note callout callout-style-default callout-captioned">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-caption-container flex-fill">
Terminology Alert: Task
</div>
</div>
<div class="callout-body-container callout-body">
<p>A task is a unit of work that needs to be done. It can be anything from downloading a file to training a model. Prefect provides a decorator <code>@task</code> that converts a python function into a Prefect Task.</p>
<p>Imagine you are preparing a sandwich. To prepare a delicious sandwich you need to perform a few tasks like: get the bread, apply butter, add cheese, cut down the veggies, etc. Each of these tasks is a unit of work that needs to be done to prepare the sandwich. In Prefect, each of these tasks can be represented as a Prefect Task.</p>
</div>
</div>
<div class="callout-note callout callout-style-default callout-captioned">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-caption-container flex-fill">
Note
</div>
</div>
<div class="callout-body-container callout-body">
<p>To enable caching we specified a <code>cache_key_fn</code> which is a function that returns a cache key on our task. We cachec our task based on its input by using <code>task_input_hash</code> which is a function that returns a unique hash for the input of the task.</p>
<p>It hashes all inputs to the task and returns a unique hash. If the task inputs do not change, the hash will remain the same and the cachec results are used instead of running the task again until cache expires.</p>
<p>We also specified a <code>cache_expiration</code> of 1 day. This means that the cache will expire after 1 day.</p>
</div>
</div>
<p>This is a good practice while working with large datasets. It helps us avoid downloading the same dataset again and again.</p>
<p>Next up, we have function named <code>read_data</code> that takes a filename and load the data into a pandas dataframe.</p>
<div class="sourceCode" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb6-1"><span class="at" style="color: #657422;">@task</span>(name<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"Read a Parquet file"</span>)</span>
<span id="cb6-2"><span class="kw" style="color: #003B4F;">def</span> read_data(filename: <span class="bu" style="color: null;">str</span>) <span class="op" style="color: #5E5E5E;">-&gt;</span> pd.DataFrame:</span>
<span id="cb6-3">    <span class="co" style="color: #5E5E5E;">"""Read data into DataFrame"""</span></span>
<span id="cb6-4">    df <span class="op" style="color: #5E5E5E;">=</span> pd.read_parquet(filename)</span>
<span id="cb6-5"></span>
<span id="cb6-6">    df.lpep_dropoff_datetime <span class="op" style="color: #5E5E5E;">=</span> pd.to_datetime(df.lpep_dropoff_datetime)</span>
<span id="cb6-7">    df.lpep_pickup_datetime <span class="op" style="color: #5E5E5E;">=</span> pd.to_datetime(df.lpep_pickup_datetime)</span>
<span id="cb6-8"></span>
<span id="cb6-9">    df[<span class="st" style="color: #20794D;">"duration"</span>] <span class="op" style="color: #5E5E5E;">=</span> df.lpep_dropoff_datetime <span class="op" style="color: #5E5E5E;">-</span> df.lpep_pickup_datetime</span>
<span id="cb6-10">    df.duration <span class="op" style="color: #5E5E5E;">=</span> df.duration.<span class="bu" style="color: null;">apply</span>(<span class="kw" style="color: #003B4F;">lambda</span> td: td.total_seconds() <span class="op" style="color: #5E5E5E;">/</span> <span class="dv" style="color: #AD0000;">60</span>)</span>
<span id="cb6-11"></span>
<span id="cb6-12">    df <span class="op" style="color: #5E5E5E;">=</span> df[(df.duration <span class="op" style="color: #5E5E5E;">&gt;=</span> <span class="dv" style="color: #AD0000;">1</span>) <span class="op" style="color: #5E5E5E;">&amp;</span> (df.duration <span class="op" style="color: #5E5E5E;">&lt;=</span> <span class="dv" style="color: #AD0000;">60</span>)]</span>
<span id="cb6-13"></span>
<span id="cb6-14">    categorical <span class="op" style="color: #5E5E5E;">=</span> [<span class="st" style="color: #20794D;">"PULocationID"</span>, <span class="st" style="color: #20794D;">"DOLocationID"</span>]</span>
<span id="cb6-15">    df[categorical] <span class="op" style="color: #5E5E5E;">=</span> df[categorical].astype(<span class="bu" style="color: null;">str</span>)</span>
<span id="cb6-16"></span>
<span id="cb6-17">    <span class="cf" style="color: #003B4F;">return</span> df</span></code></pre></div>
<p>This function is also decorated with <code>@task</code> decorator. Nothing new here.</p>
</section>
<section id="preprocess-the-data" class="level3">
<h3 class="anchored" data-anchor-id="preprocess-the-data">Preprocess the data</h3>
<p>Now that we have the data, we need to preprocess it before we can train a model on it. We’ll create a function named <code>add_features</code> that combines <code>PULocationID</code> and <code>DOLocationID</code>. Also, we’ll represent our features using the DictVectorizer. We’ll perform these steps for both training and validation data.</p>
<p>Again, we’ll decorate the function with <code>@task</code> decorator.</p>
<div class="sourceCode" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb7-1"><span class="at" style="color: #657422;">@task</span>(name<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"Add Features"</span>)</span>
<span id="cb7-2"><span class="kw" style="color: #003B4F;">def</span> add_features(df_train: pd.DataFrame, df_val: pd.DataFrame) <span class="op" style="color: #5E5E5E;">-&gt;</span> <span class="bu" style="color: null;">tuple</span>([</span>
<span id="cb7-3">        scipy.sparse._csr.csr_matrix,</span>
<span id="cb7-4">        scipy.sparse._csr.csr_matrix,</span>
<span id="cb7-5">        np.ndarray,</span>
<span id="cb7-6">        np.ndarray,</span>
<span id="cb7-7">        sklearn.feature_extraction.DictVectorizer,</span>
<span id="cb7-8">    ]):</span>
<span id="cb7-9">    <span class="co" style="color: #5E5E5E;">"""Add features to the model"""</span></span>
<span id="cb7-10">    df_train[<span class="st" style="color: #20794D;">"PU_DO"</span>] <span class="op" style="color: #5E5E5E;">=</span> df_train[<span class="st" style="color: #20794D;">"PULocationID"</span>] <span class="op" style="color: #5E5E5E;">+</span> <span class="st" style="color: #20794D;">"_"</span> <span class="op" style="color: #5E5E5E;">+</span> df_train[<span class="st" style="color: #20794D;">"DOLocationID"</span>]</span>
<span id="cb7-11">    df_val[<span class="st" style="color: #20794D;">"PU_DO"</span>] <span class="op" style="color: #5E5E5E;">=</span> df_val[<span class="st" style="color: #20794D;">"PULocationID"</span>] <span class="op" style="color: #5E5E5E;">+</span> <span class="st" style="color: #20794D;">"_"</span> <span class="op" style="color: #5E5E5E;">+</span> df_val[<span class="st" style="color: #20794D;">"DOLocationID"</span>]</span>
<span id="cb7-12"></span>
<span id="cb7-13">    categorical <span class="op" style="color: #5E5E5E;">=</span> [<span class="st" style="color: #20794D;">"PU_DO"</span>]  <span class="co" style="color: #5E5E5E;">#['PULocationID', 'DOLocationID']</span></span>
<span id="cb7-14">    numerical <span class="op" style="color: #5E5E5E;">=</span> [<span class="st" style="color: #20794D;">"trip_distance"</span>]</span>
<span id="cb7-15"></span>
<span id="cb7-16">    dv <span class="op" style="color: #5E5E5E;">=</span> DictVectorizer()</span>
<span id="cb7-17"></span>
<span id="cb7-18">    train_dicts <span class="op" style="color: #5E5E5E;">=</span> df_train[categorical <span class="op" style="color: #5E5E5E;">+</span> numerical].to_dict(orient<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"records"</span>)</span>
<span id="cb7-19">    X_train <span class="op" style="color: #5E5E5E;">=</span> dv.fit_transform(train_dicts)</span>
<span id="cb7-20"></span>
<span id="cb7-21">    val_dicts <span class="op" style="color: #5E5E5E;">=</span> df_val[categorical <span class="op" style="color: #5E5E5E;">+</span> numerical].to_dict(orient<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"records"</span>)</span>
<span id="cb7-22">    X_val <span class="op" style="color: #5E5E5E;">=</span> dv.transform(val_dicts)</span>
<span id="cb7-23"></span>
<span id="cb7-24">    y_train <span class="op" style="color: #5E5E5E;">=</span> df_train[<span class="st" style="color: #20794D;">"duration"</span>].values</span>
<span id="cb7-25">    y_val <span class="op" style="color: #5E5E5E;">=</span> df_val[<span class="st" style="color: #20794D;">"duration"</span>].values</span>
<span id="cb7-26">    <span class="cf" style="color: #003B4F;">return</span> X_train, X_val, y_train, y_val, dv</span></code></pre></div>
</section>
<section id="train-the-model" class="level3">
<h3 class="anchored" data-anchor-id="train-the-model">Train the model</h3>
<p>We have an XGBoost model that we want to train. We’ll create a function named <code>train_best_model</code> that takes the training and validation data along with the DictVectorizer and trains the model. We’ll use the best hyperparameters that we found seperately.</p>
<p>One awesome thing you’ll observe is that we are also using mlflow to log the model and the hyperparameters. This is a great way to track the model performance and the hyperparameters that were used to train the model.</p>
<p>Due to the <code>log_prints</code> flag, Prefect will log the output of the task including the output logs from mlflow. This is a great way to visualize the logs in the Prefect UI.</p>
<div class="sourceCode" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb8-1"><span class="at" style="color: #657422;">@task</span>(name<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"Train Model"</span>, log_prints<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>)</span>
<span id="cb8-2"><span class="kw" style="color: #003B4F;">def</span> train_best_model(</span>
<span id="cb8-3">    X_train: scipy.sparse._csr.csr_matrix,</span>
<span id="cb8-4">    X_val: scipy.sparse._csr.csr_matrix,</span>
<span id="cb8-5">    y_train: np.ndarray,</span>
<span id="cb8-6">    y_val: np.ndarray,</span>
<span id="cb8-7">    dv: sklearn.feature_extraction.DictVectorizer,</span>
<span id="cb8-8">) <span class="op" style="color: #5E5E5E;">-&gt;</span> <span class="va" style="color: #111111;">None</span>:</span>
<span id="cb8-9">    <span class="co" style="color: #5E5E5E;">"""train a model with best hyperparams and write everything out"""</span></span>
<span id="cb8-10"></span>
<span id="cb8-11">    <span class="cf" style="color: #003B4F;">with</span> mlflow.start_run():</span>
<span id="cb8-12">        train <span class="op" style="color: #5E5E5E;">=</span> xgb.DMatrix(X_train, label<span class="op" style="color: #5E5E5E;">=</span>y_train)</span>
<span id="cb8-13">        valid <span class="op" style="color: #5E5E5E;">=</span> xgb.DMatrix(X_val, label<span class="op" style="color: #5E5E5E;">=</span>y_val)</span>
<span id="cb8-14"></span>
<span id="cb8-15">        best_params <span class="op" style="color: #5E5E5E;">=</span> {</span>
<span id="cb8-16">            <span class="st" style="color: #20794D;">"learning_rate"</span>: <span class="fl" style="color: #AD0000;">0.09585355369315604</span>,</span>
<span id="cb8-17">            <span class="st" style="color: #20794D;">"max_depth"</span>: <span class="dv" style="color: #AD0000;">30</span>,</span>
<span id="cb8-18">            <span class="st" style="color: #20794D;">"min_child_weight"</span>: <span class="fl" style="color: #AD0000;">1.060597050922164</span>,</span>
<span id="cb8-19">            <span class="st" style="color: #20794D;">"objective"</span>: <span class="st" style="color: #20794D;">"reg:linear"</span>,</span>
<span id="cb8-20">            <span class="st" style="color: #20794D;">"reg_alpha"</span>: <span class="fl" style="color: #AD0000;">0.018060244040060163</span>,</span>
<span id="cb8-21">            <span class="st" style="color: #20794D;">"reg_lambda"</span>: <span class="fl" style="color: #AD0000;">0.011658731377413597</span>,</span>
<span id="cb8-22">            <span class="st" style="color: #20794D;">"seed"</span>: <span class="dv" style="color: #AD0000;">42</span>,</span>
<span id="cb8-23">        }</span>
<span id="cb8-24"></span>
<span id="cb8-25">        mlflow.log_params(best_params)</span>
<span id="cb8-26"></span>
<span id="cb8-27">        booster <span class="op" style="color: #5E5E5E;">=</span> xgb.train(</span>
<span id="cb8-28">            params<span class="op" style="color: #5E5E5E;">=</span>best_params,</span>
<span id="cb8-29">            dtrain<span class="op" style="color: #5E5E5E;">=</span>train,</span>
<span id="cb8-30">            num_boost_round<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">100</span>,</span>
<span id="cb8-31">            evals<span class="op" style="color: #5E5E5E;">=</span>[(valid, <span class="st" style="color: #20794D;">"validation"</span>)],</span>
<span id="cb8-32">            early_stopping_rounds<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">20</span>,</span>
<span id="cb8-33">        )</span>
<span id="cb8-34"></span>
<span id="cb8-35">        y_pred <span class="op" style="color: #5E5E5E;">=</span> booster.predict(valid)</span>
<span id="cb8-36">        rmse <span class="op" style="color: #5E5E5E;">=</span> mean_squared_error(y_val, y_pred, squared<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">False</span>)</span>
<span id="cb8-37">        mlflow.log_metric(<span class="st" style="color: #20794D;">"rmse"</span>, rmse)</span>
<span id="cb8-38"></span>
<span id="cb8-39">        pathlib.Path(<span class="st" style="color: #20794D;">"models"</span>).mkdir(exist_ok<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>)</span>
<span id="cb8-40">        <span class="cf" style="color: #003B4F;">with</span> <span class="bu" style="color: null;">open</span>(<span class="st" style="color: #20794D;">"models/preprocessor.b"</span>, <span class="st" style="color: #20794D;">"wb"</span>) <span class="im" style="color: #00769E;">as</span> f_out:</span>
<span id="cb8-41">            pickle.dump(dv, f_out)</span>
<span id="cb8-42">        mlflow.log_artifact(<span class="st" style="color: #20794D;">"models/preprocessor.b"</span>, artifact_path<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"preprocessor"</span>)</span>
<span id="cb8-43"></span>
<span id="cb8-44">        mlflow.xgboost.log_model(booster, artifact_path<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"models_mlflow"</span>)</span>
<span id="cb8-45">    <span class="cf" style="color: #003B4F;">return</span> <span class="va" style="color: #111111;">None</span></span></code></pre></div>
<p>Now, we have our indenpendent tasks ready. Let’s create a flow that will run these tasks in the order we want.</p>
</section>
<section id="create-a-flow" class="level3">
<h3 class="anchored" data-anchor-id="create-a-flow">Create a flow</h3>
<p>We’ll create a flow named <code>main_flow</code> that will run the tasks in the order we want. We’ll also set the <code>name</code> of the flow to “Main Flow”. This is a great way to identify the flow in the Prefect UI.</p>
<p>Observe that yet again the flow is simply a function decorated with <code>@flow</code> decorator. We’ll also set the <code>params</code> argument to the flow. These paramarater also get recorded in the Prefect UI which can be very useful to track the flow runs.</p>
<div class="callout-note callout callout-style-default callout-captioned">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-caption-container flex-fill">
Terminology Alert: Flow
</div>
</div>
<div class="callout-body-container callout-body">
<p>A flow is a collection of tasks that are executed in a particular order. A flow is a function decorated with <code>@flow</code> decorator. The flow function can take arguments and return values.</p>
<p>Imagine flow is a container that holds all the tasks and the order in which they are executed. Making a delicious sandwich is a flow and the actions you take to make the sandwich are the tasks.</p>
</div>
</div>
<div class="sourceCode" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb9-1"><span class="at" style="color: #657422;">@flow</span>(name<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"Main Flow"</span>)</span>
<span id="cb9-2"><span class="kw" style="color: #003B4F;">def</span> main_flow(params):</span>
<span id="cb9-3">    <span class="co" style="color: #5E5E5E;">"""Main flow of the program"""</span></span>
<span id="cb9-4">    </span>
<span id="cb9-5">    <span class="co" style="color: #5E5E5E;"># MLflow settings</span></span>
<span id="cb9-6">    mlflow.set_tracking_uri(<span class="st" style="color: #20794D;">"sqlite:///mlflow.db"</span>)</span>
<span id="cb9-7">    mlflow.set_experiment(<span class="st" style="color: #20794D;">"nyc-taxi-experiment"</span>)</span>
<span id="cb9-8"></span>
<span id="cb9-9">    <span class="co" style="color: #5E5E5E;"># Download and read data</span></span>
<span id="cb9-10">    df_train, df_val <span class="op" style="color: #5E5E5E;">=</span> download_and_read(params.years, params.months, params.color)</span>
<span id="cb9-11"></span>
<span id="cb9-12">    <span class="co" style="color: #5E5E5E;"># Transform</span></span>
<span id="cb9-13">    X_train, X_val, y_train, y_val, dv <span class="op" style="color: #5E5E5E;">=</span> add_features(df_train, df_val)</span>
<span id="cb9-14"></span>
<span id="cb9-15">    <span class="co" style="color: #5E5E5E;"># Train</span></span>
<span id="cb9-16">    train_best_model(X_train, X_val, y_train, y_val, dv)</span></code></pre></div>
<p>If you observe closely, you’ll notice that we have a <code>download_and_read</code> function but we didn’t define that anywhere to avoid confusion until now. We’ll define that function next but that function will be a <code>Subflow</code> in our main flow.</p>
</section>
<section id="create-a-subflow" class="level3">
<h3 class="anchored" data-anchor-id="create-a-subflow">Create a subflow</h3>
<p>Image a subflow as a flow within a flow. A subflow is a function decorated with the same <code>@flow</code> decorator but it is called from within another flow. A subflow can also take arguments and return values.</p>
<p>We’ll create a subflow named <code>download_and_read</code> that will call the previously defined functions (tasks) to download the data and read it into a pandas dataframe. We’ll also set the <code>name</code> of the subflow to “Download and Read”. This is a great way to identify the subflow in the Prefect UI.</p>
<div class="sourceCode" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb10-1"><span class="at" style="color: #657422;">@flow</span>(name<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"Subflow - Download and Read Data"</span>, log_prints<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>)</span>
<span id="cb10-2"><span class="kw" style="color: #003B4F;">def</span> download_and_read(years: <span class="bu" style="color: null;">list</span>, months: <span class="bu" style="color: null;">list</span>, color: <span class="bu" style="color: null;">str</span>):</span>
<span id="cb10-3">    <span class="co" style="color: #5E5E5E;"># Download the data from the NYC Taxi dataset</span></span>
<span id="cb10-4">    <span class="cf" style="color: #003B4F;">for</span> year <span class="kw" style="color: #003B4F;">in</span> years:</span>
<span id="cb10-5">        <span class="cf" style="color: #003B4F;">for</span> month <span class="kw" style="color: #003B4F;">in</span> months:</span>
<span id="cb10-6">            <span class="bu" style="color: null;">print</span>(<span class="ss" style="color: #20794D;">f"Download: Year-Month: </span><span class="sc" style="color: #5E5E5E;">{</span>year<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">-</span><span class="sc" style="color: #5E5E5E;">{</span>month<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;"> (</span><span class="sc" style="color: #5E5E5E;">{</span>color<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">)"</span>)</span>
<span id="cb10-7">            fetch(year, month, color)</span>
<span id="cb10-8"></span>
<span id="cb10-9">    <span class="co" style="color: #5E5E5E;"># Read the data into a DataFrame</span></span>
<span id="cb10-10">    track_data <span class="op" style="color: #5E5E5E;">=</span>[[], []]</span>
<span id="cb10-11">    df_train <span class="op" style="color: #5E5E5E;">=</span> pd.DataFrame()</span>
<span id="cb10-12">    <span class="cf" style="color: #003B4F;">for</span> month <span class="kw" style="color: #003B4F;">in</span> months[:<span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">1</span>]:</span>
<span id="cb10-13">        <span class="bu" style="color: null;">print</span>(<span class="ss" style="color: #20794D;">f"Read: Year-Month: </span><span class="sc" style="color: #5E5E5E;">{</span>year<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">-</span><span class="sc" style="color: #5E5E5E;">{</span>month<span class="sc" style="color: #5E5E5E;">:0&gt;2}</span><span class="ss" style="color: #20794D;"> (</span><span class="sc" style="color: #5E5E5E;">{</span>color<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">)"</span>)</span>
<span id="cb10-14">        df <span class="op" style="color: #5E5E5E;">=</span> read_data(<span class="ss" style="color: #20794D;">f"./data/</span><span class="sc" style="color: #5E5E5E;">{</span>color<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">_tripdata_</span><span class="sc" style="color: #5E5E5E;">{</span>year<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">-</span><span class="sc" style="color: #5E5E5E;">{</span>month<span class="sc" style="color: #5E5E5E;">:0&gt;2}</span><span class="ss" style="color: #20794D;">.parquet"</span>)</span>
<span id="cb10-15">        df_train <span class="op" style="color: #5E5E5E;">=</span> pd.concat([df_train, df], ignore_index<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>)</span>
<span id="cb10-16">        track_data[<span class="dv" style="color: #AD0000;">0</span>].append(month)</span>
<span id="cb10-17"></span>
<span id="cb10-18">    <span class="bu" style="color: null;">print</span>(<span class="ss" style="color: #20794D;">f"Read: Year-Month: </span><span class="sc" style="color: #5E5E5E;">{</span>year<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">-</span><span class="sc" style="color: #5E5E5E;">{</span>months[<span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">1</span>]<span class="sc" style="color: #5E5E5E;">:0&gt;2}</span><span class="ss" style="color: #20794D;"> (</span><span class="sc" style="color: #5E5E5E;">{</span>color<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">)"</span>)</span>
<span id="cb10-19">    df_val <span class="op" style="color: #5E5E5E;">=</span> read_data(<span class="ss" style="color: #20794D;">f"./data/</span><span class="sc" style="color: #5E5E5E;">{</span>color<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">_tripdata_</span><span class="sc" style="color: #5E5E5E;">{</span>year<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">-</span><span class="sc" style="color: #5E5E5E;">{</span>months[<span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">1</span>]<span class="sc" style="color: #5E5E5E;">:0&gt;2}</span><span class="ss" style="color: #20794D;">.parquet"</span>)</span>
<span id="cb10-20">    track_data[<span class="dv" style="color: #AD0000;">1</span>].append(months[<span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">1</span>])</span>
<span id="cb10-21"></span>
<span id="cb10-22">    <span class="bu" style="color: null;">print</span>(<span class="ss" style="color: #20794D;">f"Training data consists of months: </span><span class="sc" style="color: #5E5E5E;">{</span>track_data[<span class="dv" style="color: #AD0000;">0</span>]<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">"</span>)</span>
<span id="cb10-23">    <span class="bu" style="color: null;">print</span>(<span class="ss" style="color: #20794D;">f"Validation data consists of months: </span><span class="sc" style="color: #5E5E5E;">{</span>track_data[<span class="dv" style="color: #AD0000;">1</span>]<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">"</span>)</span>
<span id="cb10-24"></span>
<span id="cb10-25">    <span class="cf" style="color: #003B4F;">return</span> df_train, df_val</span></code></pre></div>
<div class="callout-note callout callout-style-default callout-captioned">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-caption-container flex-fill">
Terminology Alert: Subflow
</div>
</div>
<div class="callout-body-container callout-body">
<p>A subflow is a flow within a flow. A subflow is a function decorated with <code>@flow</code> decorator. The subflow function can take arguments and return values.</p>
<p>Imagine you want to make a spicy sauce to have with your sandwich. To make a sauce you need to follow a recipe with multiple steps. Consider this as a subflow within the flow of making a sandwich.</p>
</div>
</div>
</section>
<section id="run-the-flow" class="level3">
<h3 class="anchored" data-anchor-id="run-the-flow">Run the flow</h3>
<p>We’ll run the script by calling the <code>main_flow</code> with the necessary arguments.</p>
<div class="sourceCode" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb11-1"><span class="cf" style="color: #003B4F;">if</span> <span class="va" style="color: #111111;">__name__</span> <span class="op" style="color: #5E5E5E;">==</span> <span class="st" style="color: #20794D;">"__main__"</span>:</span>
<span id="cb11-2">    parser <span class="op" style="color: #5E5E5E;">=</span> argparse.ArgumentParser(description<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'Ingest CSV data to Postgres'</span>)</span>
<span id="cb11-3"></span>
<span id="cb11-4">    parser.add_argument(<span class="st" style="color: #20794D;">"--years"</span>, nargs<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"+"</span>, required<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>, <span class="bu" style="color: null;">help</span><span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"Data from year"</span>)</span>
<span id="cb11-5">    parser.add_argument(<span class="st" style="color: #20794D;">"--months"</span>, nargs<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"+"</span>, required<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>, <span class="bu" style="color: null;">help</span><span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"Data from months"</span>)</span>
<span id="cb11-6">    parser.add_argument(<span class="st" style="color: #20794D;">"--color"</span>, required<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>, <span class="bu" style="color: null;">help</span><span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"Taxi color"</span>, default<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"green"</span>)</span>
<span id="cb11-7"></span>
<span id="cb11-8">    args <span class="op" style="color: #5E5E5E;">=</span> parser.parse_args()</span>
<span id="cb11-9"></span>
<span id="cb11-10">    main_flow(args)</span></code></pre></div>
<p>Example, to run the flow for the months of January, February and March of 2021 for green taxis, we’ll run the following command:</p>
<div class="sourceCode" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode numberSource bash number-lines code-with-copy"><code class="sourceCode bash"><span id="cb12-1"><span class="ex" style="color: null;">python</span> orchestration.py <span class="at" style="color: #657422;">--years</span> 2021 <span class="at" style="color: #657422;">--months</span> 1 2 3 <span class="at" style="color: #657422;">--color</span> green</span></code></pre></div>
<p>Illustration of the flow of execution of the tasks in the flow.</p>
<pre><code>main_flow                       (Flow)
    |
    |---- download_and_read     (Subflow)
    |           |
    |           |---- fetch     (Task)
    |           |---- read_data (Task)
    |---- add_features          (Task)
    |---- train_best_model      (Task)</code></pre>
<p><img src="https://sagarthacker.com/posts/mlops/images/intro_prefect/pipeline.png" class="img-fluid"></p>
<p>This will run the flow and log all the tasks in the Prefect UI.</p>
<p>Below you’ll find some screenshots of the Prefect UI, sample output on terminal, and MLflow UI.</p>
<p>Sample output on terminal:</p>
<p><img src="https://sagarthacker.com/posts/mlops/images/intro_prefect/sample_output.png" class="img-fluid"></p>
<p>Prefect UI:</p>
<p>You can start the Prefect server using the command <code>prefect server start</code> and then navigate to <code>http://127.0.0.1:4200</code> to view the Prefect UI.</p>
<p><img src="https://sagarthacker.com/posts/mlops/images/intro_prefect/prefect_ui.png" class="img-fluid"></p>
<p>You’ll find both the main flow and the subflow on the page as it records all the flows that are run. You can click on the flow to view the details of the flow. Main flow:</p>
<p><img src="https://sagarthacker.com/posts/mlops/images/intro_prefect/main_flow.png" class="img-fluid"></p>
<p>Subflow:</p>
<p><img src="https://sagarthacker.com/posts/mlops/images/intro_prefect/subflow.png" class="img-fluid"></p>
<p>Lastly you’ll find your experiment in the MLflow UI:</p>
<p>Run the mlflow UI using the command <code>mlflow server --backend-store-uri sqlite:///mlflow.db --host 0.0.0.0 --port 8080</code> and then navigate to <code>http://127.0.0.1:8080</code> to view the MLflow UI. Note: MLflow runs on port 5000 by default but we are running it on port 8080.</p>
<p><img src="https://sagarthacker.com/posts/mlops/images/intro_prefect/mlflow_ui.png" class="img-fluid"></p>
<p>Congratulations on running your first Prefect flow! 🎉</p>
<p>You can find the whole code below:</p>
<div class="code-with-filename">
<div class="code-with-filename-file">
<pre><strong>orchestration.py</strong></pre>
</div>
<div class="sourceCode" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb14-1"><span class="im" style="color: #00769E;">import</span> os</span>
<span id="cb14-2"><span class="im" style="color: #00769E;">import</span> pickle</span>
<span id="cb14-3"><span class="im" style="color: #00769E;">import</span> pathlib</span>
<span id="cb14-4"><span class="im" style="color: #00769E;">import</span> scipy</span>
<span id="cb14-5"><span class="im" style="color: #00769E;">import</span> mlflow</span>
<span id="cb14-6"><span class="im" style="color: #00769E;">import</span> sklearn</span>
<span id="cb14-7"><span class="im" style="color: #00769E;">import</span> argparse</span>
<span id="cb14-8"><span class="im" style="color: #00769E;">import</span> pandas <span class="im" style="color: #00769E;">as</span> pd</span>
<span id="cb14-9"><span class="im" style="color: #00769E;">import</span> numpy <span class="im" style="color: #00769E;">as</span> np</span>
<span id="cb14-10"><span class="im" style="color: #00769E;">import</span> xgboost <span class="im" style="color: #00769E;">as</span> xgb</span>
<span id="cb14-11"><span class="im" style="color: #00769E;">from</span> sklearn.feature_extraction <span class="im" style="color: #00769E;">import</span> DictVectorizer</span>
<span id="cb14-12"><span class="im" style="color: #00769E;">from</span> sklearn.metrics <span class="im" style="color: #00769E;">import</span> mean_squared_error</span>
<span id="cb14-13"><span class="im" style="color: #00769E;">from</span> prefect <span class="im" style="color: #00769E;">import</span> flow, task</span>
<span id="cb14-14"><span class="im" style="color: #00769E;">from</span> prefect.tasks <span class="im" style="color: #00769E;">import</span> task_input_hash</span>
<span id="cb14-15"><span class="im" style="color: #00769E;">from</span> datetime <span class="im" style="color: #00769E;">import</span> timedelta</span>
<span id="cb14-16"></span>
<span id="cb14-17"><span class="at" style="color: #657422;">@task</span>(name<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"Fetch Data"</span>, log_prints<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>, retries<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">3</span>, cache_key_fn<span class="op" style="color: #5E5E5E;">=</span>task_input_hash, cache_expiration<span class="op" style="color: #5E5E5E;">=</span>timedelta(days<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">1</span>))</span>
<span id="cb14-18"><span class="kw" style="color: #003B4F;">def</span> fetch(year: <span class="bu" style="color: null;">int</span>, month: <span class="bu" style="color: null;">int</span>, color: <span class="bu" style="color: null;">str</span>) <span class="op" style="color: #5E5E5E;">-&gt;</span> <span class="va" style="color: #111111;">None</span>:</span>
<span id="cb14-19">    <span class="co" style="color: #5E5E5E;">"""Fetches data from the NYC Taxi dataset and saves it locally"""</span></span>
<span id="cb14-20"></span>
<span id="cb14-21">    <span class="co" style="color: #5E5E5E;"># Download the data from the NYC Taxi dataset</span></span>
<span id="cb14-22"></span>
<span id="cb14-23">    url <span class="op" style="color: #5E5E5E;">=</span> <span class="ss" style="color: #20794D;">f"https://d37ci6vzurychx.cloudfront.net/trip-data/</span><span class="sc" style="color: #5E5E5E;">{</span>color<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">_tripdata_</span><span class="sc" style="color: #5E5E5E;">{</span>year<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">-</span><span class="sc" style="color: #5E5E5E;">{</span>month<span class="sc" style="color: #5E5E5E;">:0&gt;2}</span><span class="ss" style="color: #20794D;">.parquet"</span></span>
<span id="cb14-24">    file_name <span class="op" style="color: #5E5E5E;">=</span> <span class="ss" style="color: #20794D;">f"</span><span class="sc" style="color: #5E5E5E;">{</span>color<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">_tripdata_</span><span class="sc" style="color: #5E5E5E;">{</span>year<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">-</span><span class="sc" style="color: #5E5E5E;">{</span>month<span class="sc" style="color: #5E5E5E;">:0&gt;2}</span><span class="ss" style="color: #20794D;">.parquet"</span></span>
<span id="cb14-25"></span>
<span id="cb14-26">    pathlib.Path(<span class="st" style="color: #20794D;">"data"</span>).mkdir(exist_ok<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>)</span>
<span id="cb14-27"></span>
<span id="cb14-28">    os.system(<span class="ss" style="color: #20794D;">f"wget </span><span class="sc" style="color: #5E5E5E;">{</span>url<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;"> -O ./data/</span><span class="sc" style="color: #5E5E5E;">{</span>file_name<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">"</span>)</span>
<span id="cb14-29"></span>
<span id="cb14-30"><span class="at" style="color: #657422;">@task</span>(name<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"Read a Parquet file"</span>)</span>
<span id="cb14-31"><span class="kw" style="color: #003B4F;">def</span> read_data(filename: <span class="bu" style="color: null;">str</span>) <span class="op" style="color: #5E5E5E;">-&gt;</span> pd.DataFrame:</span>
<span id="cb14-32">    <span class="co" style="color: #5E5E5E;">"""Read data into DataFrame"""</span></span>
<span id="cb14-33">    df <span class="op" style="color: #5E5E5E;">=</span> pd.read_parquet(filename)</span>
<span id="cb14-34"></span>
<span id="cb14-35">    df.lpep_dropoff_datetime <span class="op" style="color: #5E5E5E;">=</span> pd.to_datetime(df.lpep_dropoff_datetime)</span>
<span id="cb14-36">    df.lpep_pickup_datetime <span class="op" style="color: #5E5E5E;">=</span> pd.to_datetime(df.lpep_pickup_datetime)</span>
<span id="cb14-37"></span>
<span id="cb14-38">    df[<span class="st" style="color: #20794D;">"duration"</span>] <span class="op" style="color: #5E5E5E;">=</span> df.lpep_dropoff_datetime <span class="op" style="color: #5E5E5E;">-</span> df.lpep_pickup_datetime</span>
<span id="cb14-39">    df.duration <span class="op" style="color: #5E5E5E;">=</span> df.duration.<span class="bu" style="color: null;">apply</span>(<span class="kw" style="color: #003B4F;">lambda</span> td: td.total_seconds() <span class="op" style="color: #5E5E5E;">/</span> <span class="dv" style="color: #AD0000;">60</span>)</span>
<span id="cb14-40"></span>
<span id="cb14-41">    df <span class="op" style="color: #5E5E5E;">=</span> df[(df.duration <span class="op" style="color: #5E5E5E;">&gt;=</span> <span class="dv" style="color: #AD0000;">1</span>) <span class="op" style="color: #5E5E5E;">&amp;</span> (df.duration <span class="op" style="color: #5E5E5E;">&lt;=</span> <span class="dv" style="color: #AD0000;">60</span>)]</span>
<span id="cb14-42"></span>
<span id="cb14-43">    categorical <span class="op" style="color: #5E5E5E;">=</span> [<span class="st" style="color: #20794D;">"PULocationID"</span>, <span class="st" style="color: #20794D;">"DOLocationID"</span>]</span>
<span id="cb14-44">    df[categorical] <span class="op" style="color: #5E5E5E;">=</span> df[categorical].astype(<span class="bu" style="color: null;">str</span>)</span>
<span id="cb14-45"></span>
<span id="cb14-46">    <span class="cf" style="color: #003B4F;">return</span> df</span>
<span id="cb14-47"></span>
<span id="cb14-48"><span class="at" style="color: #657422;">@task</span>(name<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"Add Features"</span>)</span>
<span id="cb14-49"><span class="kw" style="color: #003B4F;">def</span> add_features(df_train: pd.DataFrame, df_val: pd.DataFrame) <span class="op" style="color: #5E5E5E;">-&gt;</span> <span class="bu" style="color: null;">tuple</span>([</span>
<span id="cb14-50">        scipy.sparse._csr.csr_matrix,</span>
<span id="cb14-51">        scipy.sparse._csr.csr_matrix,</span>
<span id="cb14-52">        np.ndarray,</span>
<span id="cb14-53">        np.ndarray,</span>
<span id="cb14-54">        sklearn.feature_extraction.DictVectorizer,</span>
<span id="cb14-55">    ]):</span>
<span id="cb14-56">    <span class="co" style="color: #5E5E5E;">"""Add features to the model"""</span></span>
<span id="cb14-57">    df_train[<span class="st" style="color: #20794D;">"PU_DO"</span>] <span class="op" style="color: #5E5E5E;">=</span> df_train[<span class="st" style="color: #20794D;">"PULocationID"</span>] <span class="op" style="color: #5E5E5E;">+</span> <span class="st" style="color: #20794D;">"_"</span> <span class="op" style="color: #5E5E5E;">+</span> df_train[<span class="st" style="color: #20794D;">"DOLocationID"</span>]</span>
<span id="cb14-58">    df_val[<span class="st" style="color: #20794D;">"PU_DO"</span>] <span class="op" style="color: #5E5E5E;">=</span> df_val[<span class="st" style="color: #20794D;">"PULocationID"</span>] <span class="op" style="color: #5E5E5E;">+</span> <span class="st" style="color: #20794D;">"_"</span> <span class="op" style="color: #5E5E5E;">+</span> df_val[<span class="st" style="color: #20794D;">"DOLocationID"</span>]</span>
<span id="cb14-59"></span>
<span id="cb14-60">    categorical <span class="op" style="color: #5E5E5E;">=</span> [<span class="st" style="color: #20794D;">"PU_DO"</span>]  <span class="co" style="color: #5E5E5E;">#'PULocationID', 'DOLocationID']</span></span>
<span id="cb14-61">    numerical <span class="op" style="color: #5E5E5E;">=</span> [<span class="st" style="color: #20794D;">"trip_distance"</span>]</span>
<span id="cb14-62"></span>
<span id="cb14-63">    dv <span class="op" style="color: #5E5E5E;">=</span> DictVectorizer()</span>
<span id="cb14-64"></span>
<span id="cb14-65">    train_dicts <span class="op" style="color: #5E5E5E;">=</span> df_train[categorical <span class="op" style="color: #5E5E5E;">+</span> numerical].to_dict(orient<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"records"</span>)</span>
<span id="cb14-66">    X_train <span class="op" style="color: #5E5E5E;">=</span> dv.fit_transform(train_dicts)</span>
<span id="cb14-67"></span>
<span id="cb14-68">    val_dicts <span class="op" style="color: #5E5E5E;">=</span> df_val[categorical <span class="op" style="color: #5E5E5E;">+</span> numerical].to_dict(orient<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"records"</span>)</span>
<span id="cb14-69">    X_val <span class="op" style="color: #5E5E5E;">=</span> dv.transform(val_dicts)</span>
<span id="cb14-70"></span>
<span id="cb14-71">    y_train <span class="op" style="color: #5E5E5E;">=</span> df_train[<span class="st" style="color: #20794D;">"duration"</span>].values</span>
<span id="cb14-72">    y_val <span class="op" style="color: #5E5E5E;">=</span> df_val[<span class="st" style="color: #20794D;">"duration"</span>].values</span>
<span id="cb14-73">    <span class="cf" style="color: #003B4F;">return</span> X_train, X_val, y_train, y_val, dv</span>
<span id="cb14-74"></span>
<span id="cb14-75"></span>
<span id="cb14-76"><span class="at" style="color: #657422;">@flow</span>(name<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"Subflow - Download and Read Data"</span>, log_prints<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>)</span>
<span id="cb14-77"><span class="kw" style="color: #003B4F;">def</span> download_and_read(years: <span class="bu" style="color: null;">list</span>, months: <span class="bu" style="color: null;">list</span>, color: <span class="bu" style="color: null;">str</span>):</span>
<span id="cb14-78">    <span class="co" style="color: #5E5E5E;"># Download the data from the NYC Taxi dataset</span></span>
<span id="cb14-79">    <span class="cf" style="color: #003B4F;">for</span> year <span class="kw" style="color: #003B4F;">in</span> years:</span>
<span id="cb14-80">        <span class="cf" style="color: #003B4F;">for</span> month <span class="kw" style="color: #003B4F;">in</span> months:</span>
<span id="cb14-81">            <span class="bu" style="color: null;">print</span>(<span class="ss" style="color: #20794D;">f"Download: Year-Month: </span><span class="sc" style="color: #5E5E5E;">{</span>year<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">-</span><span class="sc" style="color: #5E5E5E;">{</span>month<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;"> (</span><span class="sc" style="color: #5E5E5E;">{</span>color<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">)"</span>)</span>
<span id="cb14-82">            fetch(year, month, color)</span>
<span id="cb14-83"></span>
<span id="cb14-84">    <span class="co" style="color: #5E5E5E;"># Read the data into a DataFrame</span></span>
<span id="cb14-85">    track_data <span class="op" style="color: #5E5E5E;">=</span>[[], []]</span>
<span id="cb14-86">    df_train <span class="op" style="color: #5E5E5E;">=</span> pd.DataFrame()</span>
<span id="cb14-87">    <span class="cf" style="color: #003B4F;">for</span> month <span class="kw" style="color: #003B4F;">in</span> months[:<span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">1</span>]:</span>
<span id="cb14-88">        <span class="bu" style="color: null;">print</span>(<span class="ss" style="color: #20794D;">f"Read: Year-Month: </span><span class="sc" style="color: #5E5E5E;">{</span>year<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">-</span><span class="sc" style="color: #5E5E5E;">{</span>month<span class="sc" style="color: #5E5E5E;">:0&gt;2}</span><span class="ss" style="color: #20794D;"> (</span><span class="sc" style="color: #5E5E5E;">{</span>color<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">)"</span>)</span>
<span id="cb14-89">        df <span class="op" style="color: #5E5E5E;">=</span> read_data(<span class="ss" style="color: #20794D;">f"./data/</span><span class="sc" style="color: #5E5E5E;">{</span>color<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">_tripdata_</span><span class="sc" style="color: #5E5E5E;">{</span>year<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">-</span><span class="sc" style="color: #5E5E5E;">{</span>month<span class="sc" style="color: #5E5E5E;">:0&gt;2}</span><span class="ss" style="color: #20794D;">.parquet"</span>)</span>
<span id="cb14-90">        df_train <span class="op" style="color: #5E5E5E;">=</span> pd.concat([df_train, df], ignore_index<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>)</span>
<span id="cb14-91">        track_data[<span class="dv" style="color: #AD0000;">0</span>].append(month)</span>
<span id="cb14-92"></span>
<span id="cb14-93">    <span class="bu" style="color: null;">print</span>(<span class="ss" style="color: #20794D;">f"Read: Year-Month: </span><span class="sc" style="color: #5E5E5E;">{</span>year<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">-</span><span class="sc" style="color: #5E5E5E;">{</span>months[<span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">1</span>]<span class="sc" style="color: #5E5E5E;">:0&gt;2}</span><span class="ss" style="color: #20794D;"> (</span><span class="sc" style="color: #5E5E5E;">{</span>color<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">)"</span>)</span>
<span id="cb14-94">    df_val <span class="op" style="color: #5E5E5E;">=</span> read_data(<span class="ss" style="color: #20794D;">f"./data/</span><span class="sc" style="color: #5E5E5E;">{</span>color<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">_tripdata_</span><span class="sc" style="color: #5E5E5E;">{</span>year<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">-</span><span class="sc" style="color: #5E5E5E;">{</span>months[<span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">1</span>]<span class="sc" style="color: #5E5E5E;">:0&gt;2}</span><span class="ss" style="color: #20794D;">.parquet"</span>)</span>
<span id="cb14-95">    track_data[<span class="dv" style="color: #AD0000;">1</span>].append(months[<span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">1</span>])</span>
<span id="cb14-96"></span>
<span id="cb14-97">    <span class="bu" style="color: null;">print</span>(<span class="ss" style="color: #20794D;">f"Training data consists of months: </span><span class="sc" style="color: #5E5E5E;">{</span>track_data[<span class="dv" style="color: #AD0000;">0</span>]<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">"</span>)</span>
<span id="cb14-98">    <span class="bu" style="color: null;">print</span>(<span class="ss" style="color: #20794D;">f"Validation data consists of months: </span><span class="sc" style="color: #5E5E5E;">{</span>track_data[<span class="dv" style="color: #AD0000;">1</span>]<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">"</span>)</span>
<span id="cb14-99"></span>
<span id="cb14-100">    <span class="cf" style="color: #003B4F;">return</span> df_train, df_val</span>
<span id="cb14-101"></span>
<span id="cb14-102"><span class="at" style="color: #657422;">@task</span>(name<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"Train Model"</span>, log_prints<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>)</span>
<span id="cb14-103"><span class="kw" style="color: #003B4F;">def</span> train_best_model(</span>
<span id="cb14-104">    X_train: scipy.sparse._csr.csr_matrix,</span>
<span id="cb14-105">    X_val: scipy.sparse._csr.csr_matrix,</span>
<span id="cb14-106">    y_train: np.ndarray,</span>
<span id="cb14-107">    y_val: np.ndarray,</span>
<span id="cb14-108">    dv: sklearn.feature_extraction.DictVectorizer,</span>
<span id="cb14-109">) <span class="op" style="color: #5E5E5E;">-&gt;</span> <span class="va" style="color: #111111;">None</span>:</span>
<span id="cb14-110">    <span class="co" style="color: #5E5E5E;">"""train a model with best hyperparams and write everything out"""</span></span>
<span id="cb14-111"></span>
<span id="cb14-112">    <span class="cf" style="color: #003B4F;">with</span> mlflow.start_run():</span>
<span id="cb14-113">        train <span class="op" style="color: #5E5E5E;">=</span> xgb.DMatrix(X_train, label<span class="op" style="color: #5E5E5E;">=</span>y_train)</span>
<span id="cb14-114">        valid <span class="op" style="color: #5E5E5E;">=</span> xgb.DMatrix(X_val, label<span class="op" style="color: #5E5E5E;">=</span>y_val)</span>
<span id="cb14-115"></span>
<span id="cb14-116">        best_params <span class="op" style="color: #5E5E5E;">=</span> {</span>
<span id="cb14-117">            <span class="st" style="color: #20794D;">"learning_rate"</span>: <span class="fl" style="color: #AD0000;">0.09585355369315604</span>,</span>
<span id="cb14-118">            <span class="st" style="color: #20794D;">"max_depth"</span>: <span class="dv" style="color: #AD0000;">30</span>,</span>
<span id="cb14-119">            <span class="st" style="color: #20794D;">"min_child_weight"</span>: <span class="fl" style="color: #AD0000;">1.060597050922164</span>,</span>
<span id="cb14-120">            <span class="st" style="color: #20794D;">"objective"</span>: <span class="st" style="color: #20794D;">"reg:linear"</span>,</span>
<span id="cb14-121">            <span class="st" style="color: #20794D;">"reg_alpha"</span>: <span class="fl" style="color: #AD0000;">0.018060244040060163</span>,</span>
<span id="cb14-122">            <span class="st" style="color: #20794D;">"reg_lambda"</span>: <span class="fl" style="color: #AD0000;">0.011658731377413597</span>,</span>
<span id="cb14-123">            <span class="st" style="color: #20794D;">"seed"</span>: <span class="dv" style="color: #AD0000;">42</span>,</span>
<span id="cb14-124">        }</span>
<span id="cb14-125"></span>
<span id="cb14-126">        mlflow.log_params(best_params)</span>
<span id="cb14-127"></span>
<span id="cb14-128">        booster <span class="op" style="color: #5E5E5E;">=</span> xgb.train(</span>
<span id="cb14-129">            params<span class="op" style="color: #5E5E5E;">=</span>best_params,</span>
<span id="cb14-130">            dtrain<span class="op" style="color: #5E5E5E;">=</span>train,</span>
<span id="cb14-131">            num_boost_round<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">100</span>,</span>
<span id="cb14-132">            evals<span class="op" style="color: #5E5E5E;">=</span>[(valid, <span class="st" style="color: #20794D;">"validation"</span>)],</span>
<span id="cb14-133">            early_stopping_rounds<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">20</span>,</span>
<span id="cb14-134">        )</span>
<span id="cb14-135"></span>
<span id="cb14-136">        y_pred <span class="op" style="color: #5E5E5E;">=</span> booster.predict(valid)</span>
<span id="cb14-137">        rmse <span class="op" style="color: #5E5E5E;">=</span> mean_squared_error(y_val, y_pred, squared<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">False</span>)</span>
<span id="cb14-138">        mlflow.log_metric(<span class="st" style="color: #20794D;">"rmse"</span>, rmse)</span>
<span id="cb14-139"></span>
<span id="cb14-140">        pathlib.Path(<span class="st" style="color: #20794D;">"models"</span>).mkdir(exist_ok<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>)</span>
<span id="cb14-141">        <span class="cf" style="color: #003B4F;">with</span> <span class="bu" style="color: null;">open</span>(<span class="st" style="color: #20794D;">"models/preprocessor.b"</span>, <span class="st" style="color: #20794D;">"wb"</span>) <span class="im" style="color: #00769E;">as</span> f_out:</span>
<span id="cb14-142">            pickle.dump(dv, f_out)</span>
<span id="cb14-143">        mlflow.log_artifact(<span class="st" style="color: #20794D;">"models/preprocessor.b"</span>, artifact_path<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"preprocessor"</span>)</span>
<span id="cb14-144"></span>
<span id="cb14-145">        mlflow.xgboost.log_model(booster, artifact_path<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"models_mlflow"</span>)</span>
<span id="cb14-146">    <span class="cf" style="color: #003B4F;">return</span> <span class="va" style="color: #111111;">None</span></span>
<span id="cb14-147"></span>
<span id="cb14-148"><span class="at" style="color: #657422;">@flow</span>(name<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"Main Flow"</span>)</span>
<span id="cb14-149"><span class="kw" style="color: #003B4F;">def</span> main_flow(params):</span>
<span id="cb14-150">    <span class="co" style="color: #5E5E5E;">"""Main flow of the program"""</span></span>
<span id="cb14-151">    </span>
<span id="cb14-152">    <span class="co" style="color: #5E5E5E;"># MLflow settings</span></span>
<span id="cb14-153">    mlflow.set_tracking_uri(<span class="st" style="color: #20794D;">"sqlite:///mlflow.db"</span>)</span>
<span id="cb14-154">    mlflow.set_experiment(<span class="st" style="color: #20794D;">"nyc-taxi-experiment"</span>)</span>
<span id="cb14-155"></span>
<span id="cb14-156">    <span class="co" style="color: #5E5E5E;"># Download and read data</span></span>
<span id="cb14-157">    df_train, df_val <span class="op" style="color: #5E5E5E;">=</span> download_and_read(params.years, params.months, params.color)</span>
<span id="cb14-158"></span>
<span id="cb14-159">    <span class="co" style="color: #5E5E5E;"># Transform</span></span>
<span id="cb14-160">    X_train, X_val, y_train, y_val, dv <span class="op" style="color: #5E5E5E;">=</span> add_features(df_train, df_val)</span>
<span id="cb14-161"></span>
<span id="cb14-162">    <span class="co" style="color: #5E5E5E;"># Train</span></span>
<span id="cb14-163">    train_best_model(X_train, X_val, y_train, y_val, dv)</span>
<span id="cb14-164"></span>
<span id="cb14-165"><span class="cf" style="color: #003B4F;">if</span> <span class="va" style="color: #111111;">__name__</span> <span class="op" style="color: #5E5E5E;">==</span> <span class="st" style="color: #20794D;">"__main__"</span>:</span>
<span id="cb14-166">    parser <span class="op" style="color: #5E5E5E;">=</span> argparse.ArgumentParser(description<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'Ingest CSV data to Postgres'</span>)</span>
<span id="cb14-167"></span>
<span id="cb14-168">    parser.add_argument(<span class="st" style="color: #20794D;">"--years"</span>, nargs<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"+"</span>, required<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>, <span class="bu" style="color: null;">help</span><span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"Data from year"</span>)</span>
<span id="cb14-169">    parser.add_argument(<span class="st" style="color: #20794D;">"--months"</span>, nargs<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"+"</span>, required<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>, <span class="bu" style="color: null;">help</span><span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"Data from months"</span>)</span>
<span id="cb14-170">    parser.add_argument(<span class="st" style="color: #20794D;">"--color"</span>, required<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>, <span class="bu" style="color: null;">help</span><span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"Taxi color"</span>, default<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"green"</span>)</span>
<span id="cb14-171"></span>
<span id="cb14-172">    args <span class="op" style="color: #5E5E5E;">=</span> parser.parse_args()</span>
<span id="cb14-173"></span>
<span id="cb14-174">    main_flow(args)</span></code></pre></div>
</div>
</section>
</section>
<section id="further-reading" class="level2">
<h2 class="anchored" data-anchor-id="further-reading">Further Reading</h2>
<ol type="1">
<li><a href="https://docs.prefect.io/2.10.12/concepts/flows/">Prefect Flows</a></li>
<li><a href="https://docs.prefect.io/2.10.12/concepts/tasks/">Prefect Tasks</a></li>
<li><a href="https://docs.prefect.io/2.10.12/tutorial/">Prefect Tutorials</a></li>
</ol>
<p>In the next post, we will see what are prefect blocks and how to use them to build a more complex flow. Also, how to deploy our flows to Prefect Cloud and run them on a schedule.</p>
<p>Thank you for reading and I hope you found this notebook helpful. Upvote if you liked it, comment if you loved it. Hope to see you guys in the next one. Peace!</p>


</section>

 ]]></description>
  <category>MLOps</category>
  <category>Prefect</category>
  <guid>https://sagarthacker.com/posts/mlops/intro_workflow_orchestration.html</guid>
  <pubDate>Mon, 05 Jun 2023 04:00:00 GMT</pubDate>
  <media:content url="https://sagarthacker.com/posts/mlops/images/intro_prefect/workflow.png" medium="image" type="image/png" height="53" width="144"/>
</item>
<item>
  <title>MLflow on AWS</title>
  <dc:creator>Sagar Thacker</dc:creator>
  <link>https://sagarthacker.com/posts/mlops/mlflow_on_aws.html</link>
  <description><![CDATA[ 




<p>In this blog post we explore how to set up MLflow on AWS, leveraging EC2 to host MLFlow Server, S3 for artifact storage and RDS-PostgreSQL for backend entity storager.</p>
<p>If you’re interested in learning about MLflow or need an introduction to its workings, I recommend checking out my previous blog post titled <a href="https://sagarthacker.com/posts/mlops/mlflow.html">“Introduction to MLflow”</a>.</p>
<section id="create-aws-ec2-instance" class="level2">
<h2 class="anchored" data-anchor-id="create-aws-ec2-instance">Create AWS EC2 Instance</h2>
<ol type="1">
<li>Go to <code>https://aws.amazon.com</code> to Sign in / Create an AWS Account.</li>
<li>To launch EC2 instance, click on to <code>services</code> on the left-top corner of the page. Select <code>Compute</code> and <code>EC2</code>.</li>
</ol>
<p><img src="https://sagarthacker.com/posts/mlops/images/find_ec2.png" class="img-fluid"></p>
<ol start="3" type="1">
<li>To launch a new instance, click on <code>Launch Instance</code>.</li>
</ol>
<p><img src="https://sagarthacker.com/posts/mlops/images/launch_instance.png" class="img-fluid"></p>
<ol start="4" type="1">
<li>Name our Instance</li>
</ol>
<p><img src="https://sagarthacker.com/posts/mlops/images/aws_mlflow/instance_name.png" class="img-fluid"></p>
<ol start="5" type="1">
<li><p>Keep the default settings for <code>Application and OS Image</code>, and <code>Instance Type</code>.</p></li>
<li><p>If you don’t already have a <code>Key pair</code>, you can create a new key pair. You would be asked to download and save your key pair.</p></li>
</ol>
<div class="callout-tip callout callout-style-default callout-captioned">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-caption-container flex-fill">
Tip
</div>
</div>
<div class="callout-body-container callout-body">
<p>Save your key pair at <code>~/.ssh/</code> folder.</p>
</div>
</div>
<p align="center">
<img src="https://sagarthacker.com/posts/mlops/images/setup_key_pair.png">
</p>
<ol start="7" type="1">
<li>Keep all the other settings as default and click on <code>Launch Instance</code>.</li>
</ol>
</section>
<section id="configure-security-group" class="level2">
<h2 class="anchored" data-anchor-id="configure-security-group">Configure Security Group</h2>
<ol type="1">
<li>After the instance is launched, click on <code>Security</code> Section on the Instance Summary Page.</li>
</ol>
<p><img src="https://sagarthacker.com/posts/mlops/images/aws_mlflow/security_section.png" class="img-fluid"></p>
<ol start="2" type="1">
<li>Click on <code>Edit Inbound Rules</code> and add a new rule for <code>Custom TCP</code> with port <code>5000</code> and source. Save the changes.</li>
</ol>
<p><img src="https://sagarthacker.com/posts/mlops/images/aws_mlflow/edit_security_rules.png" class="img-fluid"></p>
<p><img src="https://sagarthacker.com/posts/mlops/images/aws_mlflow/ipv4_5000_rule.png" class="img-fluid"></p>
</section>
<section id="create-s3-bucket" class="level2">
<h2 class="anchored" data-anchor-id="create-s3-bucket">Create S3 Bucket</h2>
<ol type="1">
<li>Go to <code>services</code> on the left-top corner of the page. Select <code>Storage</code> and <code>S3</code>. Click on <code>Create Bucket</code>.</li>
</ol>
<p><img src="https://sagarthacker.com/posts/mlops/images/aws_mlflow/s3_bucket.png" class="img-fluid"></p>
<ol start="2" type="1">
<li>Name your bucket and select the region. Keep all the other settings as default and click on <code>Create Bucket</code>.</li>
</ol>
<p><img src="https://sagarthacker.com/posts/mlops/images/aws_mlflow/s3_bucket_name.png" class="img-fluid"></p>
<div class="callout-note callout callout-style-default callout-captioned">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-caption-container flex-fill">
Important
</div>
</div>
<div class="callout-body-container callout-body">
<p>Please make note of the <code>bucket name</code> for later use.</p>
</div>
</div>
</section>
<section id="create-rds-database" class="level2">
<h2 class="anchored" data-anchor-id="create-rds-database">Create RDS Database</h2>
<ol type="1">
<li>Go to <code>services</code> on the left-top corner of the page. Select <code>Database</code> and <code>RDS</code>. Click on <code>Create Database</code>.</li>
</ol>
<p><img src="https://sagarthacker.com/posts/mlops/images/aws_mlflow/rds.png" class="img-fluid"></p>
<ol start="2" type="1">
<li><p>Choose <code>Standard create</code> and select <code>PostgreSQL</code> as the engine.</p></li>
<li><p>Select <code>Free tier</code> in the Templates section.</p></li>
<li><p>In the Settings section, name your database i.e., DB Instance Identifier (eg. <code>mlflow-database</code>). In the Credentials section, enter a username (eg. <code>mlflow</code>) and Tick the <code>Auto generate a password</code> checkbox.</p></li>
<li><p>In the Additional configuration section, Set the <code>Initial database name</code> (eg. <code>mlflow_db</code>) under the Database options.</p></li>
</ol>
<div class="callout-note callout callout-style-default callout-captioned">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-caption-container flex-fill">
Important
</div>
</div>
<div class="callout-body-container callout-body">
<p>Please make note of the <code>username</code> and the <code>database name</code> for later use.</p>
</div>
</div>
<ol start="6" type="1">
<li><p>Keep all the other settings as default and click on <code>Create Database</code>.</p></li>
<li><p>The database would take a few minutes to be created. To check the password, click on <code>View credential details</code>.</p></li>
</ol>
<div class="callout-warning callout callout-style-default callout-captioned">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-caption-container flex-fill">
Warning
</div>
</div>
<div class="callout-body-container callout-body">
<p>You would need the password save the password for later use. This is the only time you would be able to view the password. However, you can always reset the password.</p>
</div>
</div>
<p><img src="https://sagarthacker.com/posts/mlops/images/aws_mlflow/view_credentials.png" class="img-fluid"></p>
<div class="callout-note callout callout-style-default callout-captioned">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-caption-container flex-fill">
Important
</div>
</div>
<div class="callout-body-container callout-body">
<p>After the database is created, please save the endpoint and port for later use. You can find the endpoint and port on the database summary page. Marked in the image below with a green dotted box.</p>
</div>
</div>
<ol start="8" type="1">
<li>Next, you would need to add an inbound rule to the security group of the database. To do so, click on the <code>Security</code> section on the database summary page. Click on <code>Edit Inbound Rules</code> and add a new rule for <code>PostgreSQL</code> with port <code>5432</code> and source. Save the changes. This allows the EC2 instance to connect to the database.</li>
</ol>
<p><img src="https://sagarthacker.com/posts/mlops/images/aws_mlflow/rds_security_group.png" class="img-fluid"></p>
<p><img src="https://sagarthacker.com/posts/mlops/images/aws_mlflow/edit_inbound_rules.png" class="img-fluid"></p>
<p>Select the security group that was created automatically when we launched the EC2 instance.</p>
<p><img src="https://sagarthacker.com/posts/mlops/images/aws_mlflow/add_postgres_rule.png" class="img-fluid"></p>
</section>
<section id="install-mlflow" class="level2">
<h2 class="anchored" data-anchor-id="install-mlflow">Install MLflow</h2>
<ol type="1">
<li>We’ll utilize the easiest way to connect to the EC2 instance. Click on the <code>Connect</code> button on the EC2 instance summary page. In the EC2 Instance Connect section, click on <code>Connect</code>.</li>
</ol>
<p><img src="https://sagarthacker.com/posts/mlops/images/aws_mlflow/connect_to_ec2.png" class="img-fluid"></p>
<p><img src="https://sagarthacker.com/posts/mlops/images/aws_mlflow/connect.png" class="img-fluid"></p>
<p>This would open a terminal window in the browser.</p>
<ol start="2" type="1">
<li>Run the following commands to install MLflow.</li>
</ol>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode numberSource bash number-lines code-with-copy"><code class="sourceCode bash"><span id="cb1-1"><span class="fu" style="color: #4758AB;">sudo</span> yum update</span>
<span id="cb1-2"></span>
<span id="cb1-3"><span class="ex" style="color: null;">pip3</span> install mlflow boto3 psycopg2-binary</span></code></pre></div>
<div class="callout-note callout callout-style-default callout-captioned">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-caption-container flex-fill">
Note
</div>
</div>
<div class="callout-body-container callout-body">
<p>If you get an error saying <code>No module named pip</code>, run the following command to install pip.</p>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode numberSource bash number-lines code-with-copy"><code class="sourceCode bash"><span id="cb2-1"><span class="ex" style="color: null;">python3</span> <span class="at" style="color: #657422;">-m</span> ensurepip <span class="at" style="color: #657422;">--upgrade</span></span></code></pre></div>
</div>
</div>
<ol start="3" type="1">
<li>Next, we need to set up the MLflow Tracking Server. To do so, run the following command.</li>
</ol>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode numberSource bash number-lines code-with-copy"><code class="sourceCode bash"><span id="cb3-1"><span class="ex" style="color: null;">mlflow</span> server <span class="at" style="color: #657422;">-h</span> 0.0.0.0 <span class="at" style="color: #657422;">-p</span> 5000 <span class="at" style="color: #657422;">--backend-store-uri</span> postgresql://DB_USER:DB_PASSWORD@DB_ENDPOINT:PORT/DB_NAME <span class="at" style="color: #657422;">--default-artifact-root</span> s3://S3_BUCKET_NAME</span>
<span id="cb3-2"></span>
<span id="cb3-3"><span class="co" style="color: #5E5E5E;"># Example, Replace the following values</span></span>
<span id="cb3-4"><span class="ex" style="color: null;">mlflow</span> server <span class="at" style="color: #657422;">-h</span> 0.0.0.0 <span class="at" style="color: #657422;">-p</span> 5000 <span class="at" style="color: #657422;">--backend-store-uri</span> postgresql://mlflow:WJgpP1lv4PQVnhzdq7T5@mlflow-database.c4rrlovvb5cx.us-east-1.rds.amazonaws.com:5432/mlflow_db <span class="at" style="color: #657422;">--default-artifact-root</span> s3://mlflow-artifact-remote-storage</span></code></pre></div>
<div class="callout-note callout callout-style-default callout-captioned">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-caption-container flex-fill">
Note
</div>
</div>
<div class="callout-body-container callout-body">
<p>We made note of the <code>ENDPOINT</code> and <code>PORT</code> which can be replaced for <code>DB_ENDPOINT</code> and <code>PORT</code> respectively. We also saved the <code>PASSWORD</code> when creating the RDS-Postgresql database which can be replaced for <code>DB_PASSWORD</code> respectively.</p>
<p>Similarly, we made note of the <code>USERNAME</code> and <code>DATABASE_NAME</code> which can be replaced for <code>DB_USER</code> and <code>DB_NAME</code> respectively. We also made note of the <code>BUCKET_NAME</code> which can be replaced for <code>S3_BUCKET_NAME</code>.</p>
</div>
</div>
<ol start="4" type="1">
<li>To checkout the MLflow UI, open a new tab in the browser and enter the following URL.</li>
</ol>
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode numberSource bash number-lines code-with-copy"><code class="sourceCode bash"><span id="cb4-1"><span class="ex" style="color: null;">http://EC2_INSTANCE_PUBLIC_IPv4_ADDRESS:5000</span></span>
<span id="cb4-2"></span>
<span id="cb4-3"><span class="co" style="color: #5E5E5E;"># Example, Replace the following values</span></span>
<span id="cb4-4"><span class="ex" style="color: null;">http://52.91.235.206:5000/</span></span></code></pre></div>
<p><img src="https://sagarthacker.com/posts/mlops/images/aws_mlflow/mlflow_ui.png" class="img-fluid"></p>
<p>Voila! You have successfully set up MLflow on AWS EC2 instance.</p>
</section>
<section id="setup-aws-cli-and-profile-on-local" class="level2">
<h2 class="anchored" data-anchor-id="setup-aws-cli-and-profile-on-local">Setup AWS CLI and Profile on local</h2>
<ol type="1">
<li>Install AWS CLI on your local machine. You can follow the instructions <a href="https://docs.aws.amazon.com/cli/latest/userguide/getting-started-install.html">here</a>.</li>
<li>Go to IAM on AWS Console and click on Policies on the left panel. Click on <code>Create Policy</code>.</li>
</ol>
<p><img src="https://sagarthacker.com/posts/mlops/images/aws_mlflow/create_policy.png" class="img-fluid"></p>
<ol start="3" type="1">
<li>Search for <code>S3</code> and click on s3.</li>
</ol>
<p><img src="https://sagarthacker.com/posts/mlops/images/aws_mlflow/permission.png" class="img-fluid"></p>
<ol start="4" type="1">
<li>Select all the access level for <code>List</code>, and <code>Read</code>. Select all the marked options for <code>Write</code>.</li>
</ol>
<p><img src="https://sagarthacker.com/posts/mlops/images/aws_mlflow/read_list.png" class="img-fluid"></p>
<p><img src="https://sagarthacker.com/posts/mlops/images/aws_mlflow/write.png" class="img-fluid"></p>
<ol start="5" type="1">
<li>Mark all the checkboxes in the Resources section. Click on <code>Next</code>.</li>
</ol>
<p><img src="https://sagarthacker.com/posts/mlops/images/aws_mlflow/resources.png" class="img-fluid"></p>
<ol start="6" type="1">
<li>Give the name for the Policy and click on <code>Create Policy</code>.</li>
</ol>
<p><img src="https://sagarthacker.com/posts/mlops/images/aws_mlflow/policy_name.png" class="img-fluid"></p>
<ol start="7" type="1">
<li>Go to IAM and click on <code>UsersGroup</code> on the left panel. Click on <code>Create group</code>. Give a name for the group and select the policy that was created in the previous step. Click on <code>Create group</code>.</li>
</ol>
<p><img src="https://sagarthacker.com/posts/mlops/images/aws_mlflow/user_group.png" class="img-fluid"></p>
<ol start="8" type="1">
<li>Go to IAM and click on <code>Users</code> on the left panel. Click on <code>Add user</code>. Give a name for the user and click on Next.</li>
</ol>
<p><img src="https://sagarthacker.com/posts/mlops/images/aws_mlflow/add_users.png" class="img-fluid"></p>
<p><img src="https://sagarthacker.com/posts/mlops/images/aws_mlflow/create_user.png" class="img-fluid"></p>
<ol start="9" type="1">
<li>Select <code>Add user to group</code> Permission option and select the group that was created in the previous step. Click on <code>Next</code>. Review the details and click on <code>Create user</code>.</li>
</ol>
<p><img src="https://sagarthacker.com/posts/mlops/images/aws_mlflow/user_to_group.png" class="img-fluid"></p>
<ol start="10" type="1">
<li>Go to <code>Users</code> again and click on the user that was created in the previous step. Click on <code>Security credentials</code> tab. Click on <code>Create access key</code>.</li>
</ol>
<p><img src="https://sagarthacker.com/posts/mlops/images/aws_mlflow/create_access_key.png" class="img-fluid"></p>
<ol start="11" type="1">
<li><p>Click on <code>Other</code> and click on <code>Next</code> Button. Then Click on <code>Create Access Key</code>.</p></li>
<li><p>Click on <code>Download .csv file</code> and save the file. This file contains the <code>Access Key ID</code> and <code>Secret Access Key</code> which would be used to configure the AWS CLI.</p></li>
<li><p>Open the terminal and run the following command.</p></li>
</ol>
<div class="sourceCode" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode numberSource bash number-lines code-with-copy"><code class="sourceCode bash"><span id="cb5-1"><span class="ex" style="color: null;">aws</span> configure</span></code></pre></div>
<ol start="14" type="1">
<li><p>Enter the <code>Access Key ID</code> and <code>Secret Access Key</code> that was saved in the previous step. For other options like <code>Default region name</code> and <code>Default output format</code>, keep the default values by pressing enter.</p></li>
<li><p>You can check if the AWS CLI is configured correctly by running the following command.</p></li>
</ol>
<div class="sourceCode" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode numberSource bash number-lines code-with-copy"><code class="sourceCode bash"><span id="cb6-1"><span class="ex" style="color: null;">aws</span> s3 ls</span></code></pre></div>
<p>You should be able to see the list of buckets that are present in your AWS account.</p>
</section>
<section id="mlflow-in-action" class="level2">
<h2 class="anchored" data-anchor-id="mlflow-in-action">MLflow in Action</h2>
<p>I’ll refer to the <a href="http://localhost:4308/posts/mlops/mlflow.html">Introduction to MLflow</a> post for this section. I’ll be using the same code and data for this section.</p>
<section id="setup" class="level3">
<h3 class="anchored" data-anchor-id="setup">Setup</h3>
<p>Create a new virtual environment and install MLflow and other libraries using the following command:</p>
<div class="code-with-filename">
<div class="code-with-filename-file">
<pre><strong>requirements.txt</strong></pre>
</div>
<div class="sourceCode" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode numberSource bash number-lines code-with-copy"><code class="sourceCode bash"><span id="cb7-1"><span class="ex" style="color: null;">mlflow</span></span>
<span id="cb7-2"><span class="ex" style="color: null;">jupyter</span></span>
<span id="cb7-3"><span class="ex" style="color: null;">scikit-learn</span></span>
<span id="cb7-4"><span class="ex" style="color: null;">pandas</span></span>
<span id="cb7-5"><span class="ex" style="color: null;">xgboost</span></span>
<span id="cb7-6"><span class="ex" style="color: null;">fastparquet</span></span>
<span id="cb7-7"><span class="ex" style="color: null;">hyperopt</span></span>
<span id="cb7-8"><span class="ex" style="color: null;">optuna</span></span></code></pre></div>
</div>
<div class="sourceCode" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode numberSource bash number-lines code-with-copy"><code class="sourceCode bash"><span id="cb8-1"><span class="co" style="color: #5E5E5E;"># Create conda environment</span></span>
<span id="cb8-2"><span class="ex" style="color: null;">conda</span> create <span class="at" style="color: #657422;">-p</span> venv python=3.9 <span class="at" style="color: #657422;">-y</span></span>
<span id="cb8-3"></span>
<span id="cb8-4"><span class="co" style="color: #5E5E5E;"># Activate conda environment</span></span>
<span id="cb8-5"><span class="ex" style="color: null;">conda</span> activate venv/</span>
<span id="cb8-6"></span>
<span id="cb8-7"><span class="co" style="color: #5E5E5E;"># Install required libraries</span></span>
<span id="cb8-8"><span class="ex" style="color: null;">pip</span> install <span class="at" style="color: #657422;">-r</span> requirements.txt <span class="at" style="color: #657422;">--no-cache-dir</span></span></code></pre></div>
<p>Download the dataset using the following command:</p>
<div class="sourceCode" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode numberSource bash number-lines code-with-copy"><code class="sourceCode bash"><span id="cb9-1"><span class="co" style="color: #5E5E5E;"># Create data directory</span></span>
<span id="cb9-2"><span class="fu" style="color: #4758AB;">mkdir</span> data</span>
<span id="cb9-3"></span>
<span id="cb9-4"><span class="co" style="color: #5E5E5E;"># Move to data directory</span></span>
<span id="cb9-5"><span class="bu" style="color: null;">cd</span> data</span>
<span id="cb9-6"></span>
<span id="cb9-7"><span class="co" style="color: #5E5E5E;"># Download dataset</span></span>
<span id="cb9-8"><span class="fu" style="color: #4758AB;">wget</span> https://d37ci6vzurychx.cloudfront.net/trip-data/green_tripdata_2022-01.parquet <span class="co" style="color: #5E5E5E;"># January 2022</span></span>
<span id="cb9-9"><span class="fu" style="color: #4758AB;">wget</span> https://d37ci6vzurychx.cloudfront.net/trip-data/green_tripdata_2022-02.parquet <span class="co" style="color: #5E5E5E;"># February 2022</span></span>
<span id="cb9-10"><span class="fu" style="color: #4758AB;">wget</span> https://d37ci6vzurychx.cloudfront.net/trip-data/green_tripdata_2022-03.parquet <span class="co" style="color: #5E5E5E;"># March 2022</span></span></code></pre></div>
<p>We’ll also create a jupyter notebook named <code>mlflow.ipynb</code> to run our experiment. After following the above steps, you should have the following directory structure:</p>
<div class="sourceCode" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode numberSource bash number-lines code-with-copy"><code class="sourceCode bash"><span id="cb10-1"><span class="bu" style="color: null;">.</span></span>
<span id="cb10-2"><span class="ex" style="color: null;">├──</span> data</span>
<span id="cb10-3"><span class="ex" style="color: null;">│</span>   ├── green_tripdata_2022-01.parquet</span>
<span id="cb10-4"><span class="ex" style="color: null;">│</span>   ├── green_tripdata_2022-02.parquet</span>
<span id="cb10-5"><span class="ex" style="color: null;">│</span>   └── green_tripdata_2022-03.parquet</span>
<span id="cb10-6"><span class="ex" style="color: null;">├──</span> mlflow.ipynb</span>
<span id="cb10-7"><span class="ex" style="color: null;">├──</span> requirements.txt</span>
<span id="cb10-8"><span class="ex" style="color: null;">└──</span> venv</span></code></pre></div>
<p>The below hidden code block imports the required libraries, loads &amp; transforms the dataset, and splits the dataset into train, validation, and test sets.</p>
<div class="cell" data-execution_count="1">
<details>
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb11-1"><span class="im" style="color: #00769E;">import</span> os</span>
<span id="cb11-2"><span class="im" style="color: #00769E;">import</span> numpy <span class="im" style="color: #00769E;">as</span> np</span>
<span id="cb11-3"><span class="im" style="color: #00769E;">import</span> pandas <span class="im" style="color: #00769E;">as</span> pd</span>
<span id="cb11-4"><span class="im" style="color: #00769E;">import</span> pickle</span>
<span id="cb11-5"><span class="im" style="color: #00769E;">import</span> mlflow</span>
<span id="cb11-6"><span class="im" style="color: #00769E;">import</span> optuna</span>
<span id="cb11-7"></span>
<span id="cb11-8"><span class="im" style="color: #00769E;">from</span> mlflow.entities <span class="im" style="color: #00769E;">import</span> ViewType</span>
<span id="cb11-9"><span class="im" style="color: #00769E;">from</span> mlflow.tracking <span class="im" style="color: #00769E;">import</span> MlflowClient</span>
<span id="cb11-10"><span class="im" style="color: #00769E;">from</span> optuna.samplers <span class="im" style="color: #00769E;">import</span> TPESampler</span>
<span id="cb11-11"><span class="im" style="color: #00769E;">from</span> sklearn.feature_extraction <span class="im" style="color: #00769E;">import</span> DictVectorizer</span>
<span id="cb11-12"><span class="im" style="color: #00769E;">from</span> sklearn.linear_model <span class="im" style="color: #00769E;">import</span> LinearRegression, Lasso</span>
<span id="cb11-13"><span class="im" style="color: #00769E;">from</span> sklearn.ensemble <span class="im" style="color: #00769E;">import</span> RandomForestRegressor</span>
<span id="cb11-14"><span class="im" style="color: #00769E;">from</span> sklearn.metrics <span class="im" style="color: #00769E;">import</span> mean_squared_error</span>
<span id="cb11-15"></span>
<span id="cb11-16"><span class="kw" style="color: #003B4F;">def</span> read_dataframe(filename: <span class="bu" style="color: null;">str</span>) <span class="op" style="color: #5E5E5E;">-&gt;</span> pd.DataFrame:</span>
<span id="cb11-17">    <span class="co" style="color: #5E5E5E;">"""</span></span>
<span id="cb11-18"><span class="co" style="color: #5E5E5E;">    Reads a Parquet file into a pandas DataFrame, performs data transformations, and returns the resulting DataFrame.</span></span>
<span id="cb11-19"></span>
<span id="cb11-20"><span class="co" style="color: #5E5E5E;">    Parameters:</span></span>
<span id="cb11-21"><span class="co" style="color: #5E5E5E;">        filename (str): The path to the Parquet file to be read.</span></span>
<span id="cb11-22"></span>
<span id="cb11-23"><span class="co" style="color: #5E5E5E;">    Returns:</span></span>
<span id="cb11-24"><span class="co" style="color: #5E5E5E;">        pandas.DataFrame: The processed DataFrame containing the data from the Parquet file.</span></span>
<span id="cb11-25"></span>
<span id="cb11-26"><span class="co" style="color: #5E5E5E;">    Raises:</span></span>
<span id="cb11-27"><span class="co" style="color: #5E5E5E;">        [Any exceptions raised by pandas.read_parquet()]</span></span>
<span id="cb11-28"></span>
<span id="cb11-29"><span class="co" style="color: #5E5E5E;">    Notes:</span></span>
<span id="cb11-30"><span class="co" style="color: #5E5E5E;">        - The function performs the following transformations on the DataFrame:</span></span>
<span id="cb11-31"><span class="co" style="color: #5E5E5E;">            - Converts 'lpep_dropoff_datetime' and 'lpep_pickup_datetime' columns to pandas datetime objects.</span></span>
<span id="cb11-32"><span class="co" style="color: #5E5E5E;">            - Computes the 'duration' column by subtracting 'lpep_pickup_datetime' from 'lpep_dropoff_datetime'</span></span>
<span id="cb11-33"><span class="co" style="color: #5E5E5E;">              and converting the result to minutes.</span></span>
<span id="cb11-34"><span class="co" style="color: #5E5E5E;">            - Filters the DataFrame to include rows where the 'duration' is between 1 and 60 minutes (inclusive).</span></span>
<span id="cb11-35"><span class="co" style="color: #5E5E5E;">            - Converts 'PULocationID' and 'DOLocationID' columns to string type.</span></span>
<span id="cb11-36"></span>
<span id="cb11-37"><span class="co" style="color: #5E5E5E;">    Example:</span></span>
<span id="cb11-38"><span class="co" style="color: #5E5E5E;">        filename = 'data.parquet'</span></span>
<span id="cb11-39"><span class="co" style="color: #5E5E5E;">        df = read_dataframe(filename)</span></span>
<span id="cb11-40"><span class="co" style="color: #5E5E5E;">    """</span></span>
<span id="cb11-41">    <span class="co" style="color: #5E5E5E;"># Read the Parquet file into a DataFrame</span></span>
<span id="cb11-42">    df <span class="op" style="color: #5E5E5E;">=</span> pd.read_parquet(filename)</span>
<span id="cb11-43"></span>
<span id="cb11-44">    <span class="co" style="color: #5E5E5E;"># Convert 'lpep_dropoff_datetime' and 'lpep_pickup_datetime' columns to pandas datetime objects</span></span>
<span id="cb11-45">    df.lpep_dropoff_datetime <span class="op" style="color: #5E5E5E;">=</span> pd.to_datetime(df.lpep_dropoff_datetime)</span>
<span id="cb11-46">    df.lpep_pickup_datetime <span class="op" style="color: #5E5E5E;">=</span> pd.to_datetime(df.lpep_pickup_datetime)</span>
<span id="cb11-47"></span>
<span id="cb11-48">    <span class="co" style="color: #5E5E5E;"># Compute the 'duration' column by subtracting 'lpep_pickup_datetime' from 'lpep_dropoff_datetime' and converting to minutes</span></span>
<span id="cb11-49">    df[<span class="st" style="color: #20794D;">'duration'</span>] <span class="op" style="color: #5E5E5E;">=</span> df.lpep_dropoff_datetime <span class="op" style="color: #5E5E5E;">-</span> df.lpep_pickup_datetime</span>
<span id="cb11-50">    df.duration <span class="op" style="color: #5E5E5E;">=</span> df.duration.<span class="bu" style="color: null;">apply</span>(<span class="kw" style="color: #003B4F;">lambda</span> td: td.total_seconds() <span class="op" style="color: #5E5E5E;">/</span> <span class="dv" style="color: #AD0000;">60</span>)</span>
<span id="cb11-51"></span>
<span id="cb11-52">    <span class="co" style="color: #5E5E5E;"># Filter the DataFrame to include rows where the 'duration' is between 1 and 60 minutes (inclusive)</span></span>
<span id="cb11-53">    df <span class="op" style="color: #5E5E5E;">=</span> df[(df.duration <span class="op" style="color: #5E5E5E;">&gt;=</span> <span class="dv" style="color: #AD0000;">1</span>) <span class="op" style="color: #5E5E5E;">&amp;</span> (df.duration <span class="op" style="color: #5E5E5E;">&lt;=</span> <span class="dv" style="color: #AD0000;">60</span>)]</span>
<span id="cb11-54"></span>
<span id="cb11-55">    <span class="co" style="color: #5E5E5E;"># Convert 'PULocationID' and 'DOLocationID' columns to string type</span></span>
<span id="cb11-56">    categorical <span class="op" style="color: #5E5E5E;">=</span> [<span class="st" style="color: #20794D;">'PULocationID'</span>, <span class="st" style="color: #20794D;">'DOLocationID'</span>]</span>
<span id="cb11-57">    df[categorical] <span class="op" style="color: #5E5E5E;">=</span> df[categorical].astype(<span class="bu" style="color: null;">str</span>)</span>
<span id="cb11-58">    </span>
<span id="cb11-59">    <span class="co" style="color: #5E5E5E;"># Return the processed DataFrame</span></span>
<span id="cb11-60">    <span class="cf" style="color: #003B4F;">return</span> df</span>
<span id="cb11-61"></span>
<span id="cb11-62"><span class="co" style="color: #5E5E5E;"># Read the Parquet file for training data into a DataFrame</span></span>
<span id="cb11-63">df_train <span class="op" style="color: #5E5E5E;">=</span> read_dataframe(<span class="st" style="color: #20794D;">'./data/green_tripdata_2022-01.parquet'</span>)</span>
<span id="cb11-64"></span>
<span id="cb11-65"><span class="co" style="color: #5E5E5E;"># Read the Parquet file for validation data into a DataFrame</span></span>
<span id="cb11-66">df_val <span class="op" style="color: #5E5E5E;">=</span> read_dataframe(<span class="st" style="color: #20794D;">'./data/green_tripdata_2022-02.parquet'</span>)</span>
<span id="cb11-67"></span>
<span id="cb11-68"><span class="co" style="color: #5E5E5E;"># Read the Parquet file for testing data into a DataFrame</span></span>
<span id="cb11-69">df_test <span class="op" style="color: #5E5E5E;">=</span> read_dataframe(<span class="st" style="color: #20794D;">'./data/green_tripdata_2022-03.parquet'</span>)</span>
<span id="cb11-70"></span>
<span id="cb11-71"><span class="kw" style="color: #003B4F;">def</span> preprocess(df: pd.DataFrame, dv: DictVectorizer, fit_dv: <span class="bu" style="color: null;">bool</span> <span class="op" style="color: #5E5E5E;">=</span> <span class="va" style="color: #111111;">False</span>):</span>
<span id="cb11-72">    <span class="co" style="color: #5E5E5E;">"""</span></span>
<span id="cb11-73"><span class="co" style="color: #5E5E5E;">    Preprocesses a pandas DataFrame by creating new features, transforming categorical features into a numerical format,</span></span>
<span id="cb11-74"><span class="co" style="color: #5E5E5E;">    and returning the transformed data along with the DictVectorizer.</span></span>
<span id="cb11-75"></span>
<span id="cb11-76"><span class="co" style="color: #5E5E5E;">    Parameters:</span></span>
<span id="cb11-77"><span class="co" style="color: #5E5E5E;">        df (pandas.DataFrame): The input DataFrame to be preprocessed.</span></span>
<span id="cb11-78"><span class="co" style="color: #5E5E5E;">        dv (sklearn.feature_extraction.DictVectorizer): The DictVectorizer instance to be used for transforming categorical features.</span></span>
<span id="cb11-79"><span class="co" style="color: #5E5E5E;">        fit_dv (bool, optional): Indicates whether to fit the DictVectorizer on the data. Defaults to False.</span></span>
<span id="cb11-80"></span>
<span id="cb11-81"><span class="co" style="color: #5E5E5E;">    Returns:</span></span>
<span id="cb11-82"><span class="co" style="color: #5E5E5E;">        tuple: A tuple containing the transformed feature matrix and the DictVectorizer instance.</span></span>
<span id="cb11-83"></span>
<span id="cb11-84"><span class="co" style="color: #5E5E5E;">    Notes:</span></span>
<span id="cb11-85"><span class="co" style="color: #5E5E5E;">        - The function assumes that the DataFrame contains the columns 'PULocationID' and 'DOLocationID'.</span></span>
<span id="cb11-86"><span class="co" style="color: #5E5E5E;">        - The function creates a new feature 'PU_DO' by concatenating 'PULocationID' and 'DOLocationID'.</span></span>
<span id="cb11-87"><span class="co" style="color: #5E5E5E;">        - The categorical feature 'PU_DO' and numerical feature 'trip_distance' are selected for transformation.</span></span>
<span id="cb11-88"><span class="co" style="color: #5E5E5E;">        - The function transforms the selected features into a dictionary representation and applies the DictVectorizer.</span></span>
<span id="cb11-89"><span class="co" style="color: #5E5E5E;">        - If fit_dv is True, the DictVectorizer is fitted on the data. Otherwise, the existing fitted DictVectorizer is used.</span></span>
<span id="cb11-90"></span>
<span id="cb11-91"><span class="co" style="color: #5E5E5E;">    Example:</span></span>
<span id="cb11-92"><span class="co" style="color: #5E5E5E;">        df = read_dataframe('data.parquet')</span></span>
<span id="cb11-93"><span class="co" style="color: #5E5E5E;">        dv = DictVectorizer()</span></span>
<span id="cb11-94"><span class="co" style="color: #5E5E5E;">        X, dv = preprocess(df, dv, fit_dv=True)</span></span>
<span id="cb11-95"><span class="co" style="color: #5E5E5E;">    """</span></span>
<span id="cb11-96">    <span class="co" style="color: #5E5E5E;"># Create a new feature 'PU_DO' by concatenating 'PULocationID' and 'DOLocationID'</span></span>
<span id="cb11-97">    df[<span class="st" style="color: #20794D;">'PU_DO'</span>] <span class="op" style="color: #5E5E5E;">=</span> df[<span class="st" style="color: #20794D;">'PULocationID'</span>] <span class="op" style="color: #5E5E5E;">+</span> <span class="st" style="color: #20794D;">'_'</span> <span class="op" style="color: #5E5E5E;">+</span> df[<span class="st" style="color: #20794D;">'DOLocationID'</span>]</span>
<span id="cb11-98"></span>
<span id="cb11-99">    <span class="co" style="color: #5E5E5E;"># Select categorical and numerical features for transformation</span></span>
<span id="cb11-100">    categorical <span class="op" style="color: #5E5E5E;">=</span> [<span class="st" style="color: #20794D;">'PU_DO'</span>]</span>
<span id="cb11-101">    numerical <span class="op" style="color: #5E5E5E;">=</span> [<span class="st" style="color: #20794D;">'trip_distance'</span>]</span>
<span id="cb11-102"></span>
<span id="cb11-103">    <span class="co" style="color: #5E5E5E;"># Convert the selected features into a dictionary representation</span></span>
<span id="cb11-104">    dicts <span class="op" style="color: #5E5E5E;">=</span> df[categorical <span class="op" style="color: #5E5E5E;">+</span> numerical].to_dict(orient<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'records'</span>)</span>
<span id="cb11-105"></span>
<span id="cb11-106">    <span class="co" style="color: #5E5E5E;"># Apply DictVectorizer for transforming categorical features</span></span>
<span id="cb11-107">    <span class="cf" style="color: #003B4F;">if</span> fit_dv:</span>
<span id="cb11-108">        <span class="co" style="color: #5E5E5E;"># Fit the DictVectorizer on the data</span></span>
<span id="cb11-109">        X <span class="op" style="color: #5E5E5E;">=</span> dv.fit_transform(dicts)</span>
<span id="cb11-110">    <span class="cf" style="color: #003B4F;">else</span>:</span>
<span id="cb11-111">        <span class="co" style="color: #5E5E5E;"># Transform using the existing fitted DictVectorizer</span></span>
<span id="cb11-112">        X <span class="op" style="color: #5E5E5E;">=</span> dv.transform(dicts)</span>
<span id="cb11-113"></span>
<span id="cb11-114">    <span class="co" style="color: #5E5E5E;"># Return the transformed feature matrix and DictVectorizer</span></span>
<span id="cb11-115">    <span class="cf" style="color: #003B4F;">return</span> X, dv</span>
<span id="cb11-116"></span>
<span id="cb11-117"><span class="co" style="color: #5E5E5E;"># Extract the target variable</span></span>
<span id="cb11-118">target <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">'duration'</span></span>
<span id="cb11-119"></span>
<span id="cb11-120"><span class="co" style="color: #5E5E5E;"># Extract the target variable from the training, validation and testing datasets</span></span>
<span id="cb11-121">y_train <span class="op" style="color: #5E5E5E;">=</span> df_train[target].values</span>
<span id="cb11-122">y_val <span class="op" style="color: #5E5E5E;">=</span> df_val[target].values</span>
<span id="cb11-123">y_test <span class="op" style="color: #5E5E5E;">=</span> df_test[target].values</span>
<span id="cb11-124"></span>
<span id="cb11-125"><span class="co" style="color: #5E5E5E;"># Initialize a DictVectorizer for preprocessing</span></span>
<span id="cb11-126">dv <span class="op" style="color: #5E5E5E;">=</span> DictVectorizer()</span>
<span id="cb11-127"></span>
<span id="cb11-128"><span class="co" style="color: #5E5E5E;"># Preprocess the training data</span></span>
<span id="cb11-129">X_train, dv <span class="op" style="color: #5E5E5E;">=</span> preprocess(df_train, dv, fit_dv<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>)</span>
<span id="cb11-130"></span>
<span id="cb11-131"><span class="co" style="color: #5E5E5E;"># Preprocess the validation data using the fitted DictVectorizer from the training data</span></span>
<span id="cb11-132">X_val, _ <span class="op" style="color: #5E5E5E;">=</span> preprocess(df_val, dv, fit_dv<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">False</span>)</span>
<span id="cb11-133"></span>
<span id="cb11-134"><span class="co" style="color: #5E5E5E;"># Preprocess the testing data using the fitted DictVectorizer from the training data</span></span>
<span id="cb11-135">X_test, _ <span class="op" style="color: #5E5E5E;">=</span> preprocess(df_test, dv, fit_dv<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">False</span>)</span>
<span id="cb11-136"></span>
<span id="cb11-137"><span class="kw" style="color: #003B4F;">def</span> dump_pickle(obj, filename: <span class="bu" style="color: null;">str</span>):</span>
<span id="cb11-138">    <span class="co" style="color: #5E5E5E;">"""</span></span>
<span id="cb11-139"><span class="co" style="color: #5E5E5E;">    Pickles (serializes) an object and saves it to a file.</span></span>
<span id="cb11-140"></span>
<span id="cb11-141"><span class="co" style="color: #5E5E5E;">    Parameters:</span></span>
<span id="cb11-142"><span class="co" style="color: #5E5E5E;">        obj (Any): The object to be pickled.</span></span>
<span id="cb11-143"><span class="co" style="color: #5E5E5E;">        filename (str): The path and filename to save the pickled object.</span></span>
<span id="cb11-144"></span>
<span id="cb11-145"><span class="co" style="color: #5E5E5E;">    Returns:</span></span>
<span id="cb11-146"><span class="co" style="color: #5E5E5E;">        None</span></span>
<span id="cb11-147"></span>
<span id="cb11-148"><span class="co" style="color: #5E5E5E;">    Notes:</span></span>
<span id="cb11-149"><span class="co" style="color: #5E5E5E;">        - The function uses the 'pickle' module to serialize the object and save it to a file.</span></span>
<span id="cb11-150"><span class="co" style="color: #5E5E5E;">        - The file is opened in binary mode for writing using the "wb" mode.</span></span>
<span id="cb11-151"><span class="co" style="color: #5E5E5E;">    """</span></span>
<span id="cb11-152">    <span class="cf" style="color: #003B4F;">with</span> <span class="bu" style="color: null;">open</span>(filename, <span class="st" style="color: #20794D;">"wb"</span>) <span class="im" style="color: #00769E;">as</span> f_out:</span>
<span id="cb11-153">        <span class="cf" style="color: #003B4F;">return</span> pickle.dump(obj, f_out)</span></code></pre></div>
</details>
</div>
<p>Set up the MLflow Tracking Server URI.</p>
<div class="cell" data-execution_count="2">
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb12-1">TRACKING_SERVER_HOST <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">"52.91.235.206"</span> <span class="co" style="color: #5E5E5E;"># fill in with the public IPv4 of the EC2 instance</span></span>
<span id="cb12-2">mlflow.set_tracking_uri(<span class="ss" style="color: #20794D;">f"http://</span><span class="sc" style="color: #5E5E5E;">{</span>TRACKING_SERVER_HOST<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">:5000"</span>)</span></code></pre></div>
</div>
<div class="cell" data-execution_count="3">
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb13-1"><span class="bu" style="color: null;">print</span>(<span class="ss" style="color: #20794D;">f"tracking URI: '</span><span class="sc" style="color: #5E5E5E;">{</span>mlflow<span class="sc" style="color: #5E5E5E;">.</span>get_tracking_uri()<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">'"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>tracking URI: 'http://52.91.235.206:5000'</code></pre>
</div>
</div>
<div class="cell" data-execution_count="5">
<div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb15-1"><span class="co" style="color: #5E5E5E;"># Create a new experiment</span></span>
<span id="cb15-2">mlflow.set_experiment(<span class="st" style="color: #20794D;">"nyc-taxi-experiment"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>2023/05/31 11:43:55 INFO mlflow.tracking.fluent: Experiment with name 'nyc-taxi-experiment' does not exist. Creating a new experiment.</code></pre>
</div>
<div class="cell-output cell-output-display" data-execution_count="5">
<pre><code>&lt;Experiment: artifact_location='s3://mlflow-artifact-remote-storage/1', creation_time=1685547835140, experiment_id='1', last_update_time=1685547835140, lifecycle_stage='active', name='nyc-taxi-experiment', tags={}&gt;</code></pre>
</div>
</div>
</section>
<section id="train-model" class="level3">
<h3 class="anchored" data-anchor-id="train-model">Train Model</h3>
<p>Train a simple Linear Regression model and log the model parameters, metrics, and artifacts.</p>
<div class="cell" data-execution_count="8">
<div class="sourceCode cell-code" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb18-1"><span class="co" style="color: #5E5E5E;"># Specify the destination path for saving model files</span></span>
<span id="cb18-2">model_path <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">"./outputs/models"</span></span>
<span id="cb18-3"></span>
<span id="cb18-4"><span class="co" style="color: #5E5E5E;"># Start an MLflow run</span></span>
<span id="cb18-5"><span class="cf" style="color: #003B4F;">with</span> mlflow.start_run():</span>
<span id="cb18-6">    <span class="co" style="color: #5E5E5E;"># Set a tag for the developer</span></span>
<span id="cb18-7">    mlflow.set_tag(<span class="st" style="color: #20794D;">"developer"</span>, <span class="st" style="color: #20794D;">"Sagar"</span>)</span>
<span id="cb18-8"></span>
<span id="cb18-9">    <span class="co" style="color: #5E5E5E;"># Initialize and train a LinearRegression model</span></span>
<span id="cb18-10">    lr <span class="op" style="color: #5E5E5E;">=</span> LinearRegression()</span>
<span id="cb18-11">    lr.fit(X_train, y_train)</span>
<span id="cb18-12"></span>
<span id="cb18-13">    <span class="co" style="color: #5E5E5E;"># Make predictions on the validation data</span></span>
<span id="cb18-14">    yhat <span class="op" style="color: #5E5E5E;">=</span> lr.predict(X_val)</span>
<span id="cb18-15"></span>
<span id="cb18-16">    <span class="co" style="color: #5E5E5E;"># Calculate the root mean squared error (RMSE)</span></span>
<span id="cb18-17">    rmse <span class="op" style="color: #5E5E5E;">=</span> mean_squared_error(y_val, yhat, squared<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">False</span>)</span>
<span id="cb18-18"></span>
<span id="cb18-19">    <span class="co" style="color: #5E5E5E;"># Log the RMSE metric to MLflow</span></span>
<span id="cb18-20">    mlflow.log_metric(<span class="st" style="color: #20794D;">"rmse"</span>, rmse)</span>
<span id="cb18-21"></span>
<span id="cb18-22">    <span class="co" style="color: #5E5E5E;"># Create dest_path folder unless it already exists</span></span>
<span id="cb18-23">    os.makedirs(model_path, exist_ok<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>)</span>
<span id="cb18-24"></span>
<span id="cb18-25">    <span class="co" style="color: #5E5E5E;"># Save the trained model as a pickle file</span></span>
<span id="cb18-26">    dump_pickle(lr, os.path.join(model_path, <span class="st" style="color: #20794D;">"lin_reg.pkl"</span>))</span>
<span id="cb18-27"></span>
<span id="cb18-28">    <span class="co" style="color: #5E5E5E;"># Log the trained model as an artifact to MLflow</span></span>
<span id="cb18-29">    mlflow.log_artifact(local_path<span class="op" style="color: #5E5E5E;">=</span><span class="ss" style="color: #20794D;">f"</span><span class="sc" style="color: #5E5E5E;">{</span>model_path<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">/lin_reg.pkl"</span>, artifact_path<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"model"</span>)</span></code></pre></div>
</div>
<p>Below you can see the MLflow UI with the experiment run.</p>
<p><img src="https://sagarthacker.com/posts/mlops/images/aws_mlflow/lin_reg_exp.png" class="img-fluid"></p>
<p><img src="https://sagarthacker.com/posts/mlops/images/aws_mlflow/lin_reg_exp_details.png" class="img-fluid"></p>
<p>You can also see that the artifacts are stored in S3 bucket.</p>
<p><img src="https://sagarthacker.com/posts/mlops/images/aws_mlflow/s3_artifacts.png" class="img-fluid"></p>
</section>
<section id="hyperparameter-tuning" class="level3">
<h3 class="anchored" data-anchor-id="hyperparameter-tuning">Hyperparameter Tuning</h3>
<p>Next, we’ll create a new experiment to perform hyperparameter tuning using Hyperopt and Optuna.</p>
<div class="cell" data-execution_count="4">
<div class="sourceCode cell-code" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb19-1"><span class="co" style="color: #5E5E5E;"># Create a new experiment</span></span>
<span id="cb19-2">mlflow.set_experiment(<span class="st" style="color: #20794D;">"random-forest-hyperopt"</span>)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="4">
<pre><code>&lt;Experiment: artifact_location='s3://mlflow-artifact-remote-storage/3', creation_time=1685548270366, experiment_id='3', last_update_time=1685548270366, lifecycle_stage='active', name='random-forest-hyperopt', tags={}&gt;</code></pre>
</div>
</div>
<div class="cell" data-execution_count="5">
<div class="sourceCode cell-code" id="cb21" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb21-1"><span class="kw" style="color: #003B4F;">def</span> run_optimization(num_trials: <span class="bu" style="color: null;">int</span> <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">10</span>):</span>
<span id="cb21-2">    <span class="co" style="color: #5E5E5E;">"""</span></span>
<span id="cb21-3"><span class="co" style="color: #5E5E5E;">    Runs the optimization process using Optuna library to find the optimal hyperparameters for RandomForestRegressor.</span></span>
<span id="cb21-4"></span>
<span id="cb21-5"><span class="co" style="color: #5E5E5E;">    Parameters:</span></span>
<span id="cb21-6"><span class="co" style="color: #5E5E5E;">        num_trials (int): The number of optimization trials to perform. Default is 10.</span></span>
<span id="cb21-7"></span>
<span id="cb21-8"><span class="co" style="color: #5E5E5E;">    Returns:</span></span>
<span id="cb21-9"><span class="co" style="color: #5E5E5E;">        None</span></span>
<span id="cb21-10"></span>
<span id="cb21-11"><span class="co" style="color: #5E5E5E;">    Notes:</span></span>
<span id="cb21-12"><span class="co" style="color: #5E5E5E;">        - The function defines an objective function for Optuna to minimize the root mean squared error (RMSE).</span></span>
<span id="cb21-13"><span class="co" style="color: #5E5E5E;">        - The objective function samples hyperparameters, trains a RandomForestRegressor model with those hyperparameters,</span></span>
<span id="cb21-14"><span class="co" style="color: #5E5E5E;">          evaluates the model on the validation data, and logs the RMSE metric to MLflow.</span></span>
<span id="cb21-15"><span class="co" style="color: #5E5E5E;">        - Optuna performs the optimization process by searching for the set of hyperparameters that minimizes the RMSE.</span></span>
<span id="cb21-16"><span class="co" style="color: #5E5E5E;">    """</span></span>
<span id="cb21-17"></span>
<span id="cb21-18">    <span class="kw" style="color: #003B4F;">def</span> objective(trial):</span>
<span id="cb21-19">        <span class="co" style="color: #5E5E5E;">"""</span></span>
<span id="cb21-20"><span class="co" style="color: #5E5E5E;">        Objective function for Optuna optimization.</span></span>
<span id="cb21-21"></span>
<span id="cb21-22"><span class="co" style="color: #5E5E5E;">        Parameters:</span></span>
<span id="cb21-23"><span class="co" style="color: #5E5E5E;">            trial (optuna.Trial): A trial object representing a single optimization trial.</span></span>
<span id="cb21-24"></span>
<span id="cb21-25"><span class="co" style="color: #5E5E5E;">        Returns:</span></span>
<span id="cb21-26"><span class="co" style="color: #5E5E5E;">            float: The value of the objective function (RMSE).</span></span>
<span id="cb21-27"></span>
<span id="cb21-28"><span class="co" style="color: #5E5E5E;">        Notes:</span></span>
<span id="cb21-29"><span class="co" style="color: #5E5E5E;">            - The objective function samples hyperparameters from the defined search space.</span></span>
<span id="cb21-30"><span class="co" style="color: #5E5E5E;">            - It initializes and trains a RandomForestRegressor model with the sampled hyperparameters.</span></span>
<span id="cb21-31"><span class="co" style="color: #5E5E5E;">            - The model is evaluated on the validation data, and the RMSE is calculated.</span></span>
<span id="cb21-32"><span class="co" style="color: #5E5E5E;">            - The RMSE and the sampled hyperparameters are logged to MLflow.</span></span>
<span id="cb21-33"><span class="co" style="color: #5E5E5E;">        """</span></span>
<span id="cb21-34">        params <span class="op" style="color: #5E5E5E;">=</span> {</span>
<span id="cb21-35">            <span class="st" style="color: #20794D;">'n_estimators'</span>: trial.suggest_int(<span class="st" style="color: #20794D;">'n_estimators'</span>, <span class="dv" style="color: #AD0000;">10</span>, <span class="dv" style="color: #AD0000;">50</span>, <span class="dv" style="color: #AD0000;">1</span>),</span>
<span id="cb21-36">            <span class="st" style="color: #20794D;">'max_depth'</span>: trial.suggest_int(<span class="st" style="color: #20794D;">'max_depth'</span>, <span class="dv" style="color: #AD0000;">1</span>, <span class="dv" style="color: #AD0000;">20</span>, <span class="dv" style="color: #AD0000;">1</span>),</span>
<span id="cb21-37">            <span class="st" style="color: #20794D;">'min_samples_split'</span>: trial.suggest_int(<span class="st" style="color: #20794D;">'min_samples_split'</span>, <span class="dv" style="color: #AD0000;">2</span>, <span class="dv" style="color: #AD0000;">10</span>, <span class="dv" style="color: #AD0000;">1</span>),</span>
<span id="cb21-38">            <span class="st" style="color: #20794D;">'min_samples_leaf'</span>: trial.suggest_int(<span class="st" style="color: #20794D;">'min_samples_leaf'</span>, <span class="dv" style="color: #AD0000;">1</span>, <span class="dv" style="color: #AD0000;">4</span>, <span class="dv" style="color: #AD0000;">1</span>),</span>
<span id="cb21-39">            <span class="st" style="color: #20794D;">'random_state'</span>: <span class="dv" style="color: #AD0000;">42</span>,</span>
<span id="cb21-40">            <span class="st" style="color: #20794D;">'n_jobs'</span>: <span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">1</span></span>
<span id="cb21-41">        }</span>
<span id="cb21-42">        </span>
<span id="cb21-43">        <span class="co" style="color: #5E5E5E;"># Start a new MLflow run for each trial</span></span>
<span id="cb21-44">        <span class="cf" style="color: #003B4F;">with</span> mlflow.start_run():</span>
<span id="cb21-45">            <span class="co" style="color: #5E5E5E;"># Set a tag for the model type</span></span>
<span id="cb21-46">            mlflow.set_tag(<span class="st" style="color: #20794D;">"model"</span>, <span class="st" style="color: #20794D;">"RandomForestRegressor"</span>)</span>
<span id="cb21-47">            </span>
<span id="cb21-48">            <span class="co" style="color: #5E5E5E;"># Log the sampled hyperparameters to MLflow</span></span>
<span id="cb21-49">            mlflow.log_params(params)</span>
<span id="cb21-50"></span>
<span id="cb21-51">            <span class="co" style="color: #5E5E5E;"># Initialize a RandomForestRegressor model with the sampled hyperparameters</span></span>
<span id="cb21-52">            rf <span class="op" style="color: #5E5E5E;">=</span> RandomForestRegressor(<span class="op" style="color: #5E5E5E;">**</span>params)</span>
<span id="cb21-53"></span>
<span id="cb21-54">            <span class="co" style="color: #5E5E5E;"># Train the model on the training data</span></span>
<span id="cb21-55">            rf.fit(X_train, y_train)</span>
<span id="cb21-56"></span>
<span id="cb21-57">            <span class="co" style="color: #5E5E5E;"># Make predictions on the validation data</span></span>
<span id="cb21-58">            y_pred <span class="op" style="color: #5E5E5E;">=</span> rf.predict(X_val)</span>
<span id="cb21-59"></span>
<span id="cb21-60">            <span class="co" style="color: #5E5E5E;"># Calculate the root mean squared error (RMSE)</span></span>
<span id="cb21-61">            rmse <span class="op" style="color: #5E5E5E;">=</span> mean_squared_error(y_val, y_pred, squared<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">False</span>)</span>
<span id="cb21-62"></span>
<span id="cb21-63">            <span class="co" style="color: #5E5E5E;"># Log the RMSE metric to MLflow</span></span>
<span id="cb21-64">            mlflow.log_metric(<span class="st" style="color: #20794D;">"rmse"</span>, rmse)</span>
<span id="cb21-65"></span>
<span id="cb21-66">        <span class="cf" style="color: #003B4F;">return</span> rmse</span>
<span id="cb21-67"></span>
<span id="cb21-68">    <span class="co" style="color: #5E5E5E;"># Use the Tree-structured Parzen Estimator (TPE) sampler for efficient hyperparameter search</span></span>
<span id="cb21-69">    sampler <span class="op" style="color: #5E5E5E;">=</span> TPESampler(seed<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">42</span>)</span>
<span id="cb21-70"></span>
<span id="cb21-71">    <span class="co" style="color: #5E5E5E;"># Create an Optuna study with the defined objective function and search direction</span></span>
<span id="cb21-72">    study <span class="op" style="color: #5E5E5E;">=</span> optuna.create_study(direction<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"minimize"</span>, sampler<span class="op" style="color: #5E5E5E;">=</span>sampler)</span>
<span id="cb21-73"></span>
<span id="cb21-74">    <span class="co" style="color: #5E5E5E;"># Run the optimization process with the specified number of trials</span></span>
<span id="cb21-75">    study.optimize(objective, n_trials<span class="op" style="color: #5E5E5E;">=</span>num_trials)</span>
<span id="cb21-76"></span>
<span id="cb21-77">run_optimization()</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>[I 2023-05-31 11:57:34,678] A new study created in memory with name: no-name-41ada3cf-dabd-4100-a384-dd6a2ee09103
[I 2023-05-31 11:57:38,080] Trial 0 finished with value: 6.012747224033297 and parameters: {'n_estimators': 25, 'max_depth': 20, 'min_samples_split': 8, 'min_samples_leaf': 3}. Best is trial 0 with value: 6.012747224033297.
[I 2023-05-31 11:57:38,649] Trial 1 finished with value: 6.249433998787504 and parameters: {'n_estimators': 16, 'max_depth': 4, 'min_samples_split': 2, 'min_samples_leaf': 4}. Best is trial 0 with value: 6.012747224033297.
[I 2023-05-31 11:57:42,149] Trial 2 finished with value: 6.039045655830305 and parameters: {'n_estimators': 34, 'max_depth': 15, 'min_samples_split': 2, 'min_samples_leaf': 4}. Best is trial 0 with value: 6.012747224033297.
[I 2023-05-31 11:57:43,620] Trial 3 finished with value: 6.179387143797027 and parameters: {'n_estimators': 44, 'max_depth': 5, 'min_samples_split': 3, 'min_samples_leaf': 1}. Best is trial 0 with value: 6.012747224033297.
[I 2023-05-31 11:57:45,445] Trial 4 finished with value: 6.075505898039151 and parameters: {'n_estimators': 22, 'max_depth': 11, 'min_samples_split': 5, 'min_samples_leaf': 2}. Best is trial 0 with value: 6.012747224033297.
[I 2023-05-31 11:57:46,134] Trial 5 finished with value: 6.441117537172997 and parameters: {'n_estimators': 35, 'max_depth': 3, 'min_samples_split': 4, 'min_samples_leaf': 2}. Best is trial 0 with value: 6.012747224033297.
[I 2023-05-31 11:57:49,416] Trial 6 finished with value: 6.0285791267371165 and parameters: {'n_estimators': 28, 'max_depth': 16, 'min_samples_split': 3, 'min_samples_leaf': 3}. Best is trial 0 with value: 6.012747224033297.
[I 2023-05-31 11:57:49,958] Trial 7 finished with value: 7.881244954282265 and parameters: {'n_estimators': 34, 'max_depth': 1, 'min_samples_split': 7, 'min_samples_leaf': 1}. Best is trial 0 with value: 6.012747224033297.
[I 2023-05-31 11:57:51,295] Trial 8 finished with value: 6.025608014492215 and parameters: {'n_estimators': 12, 'max_depth': 19, 'min_samples_split': 10, 'min_samples_leaf': 4}. Best is trial 0 with value: 6.012747224033297.
[I 2023-05-31 11:57:51,848] Trial 9 finished with value: 7.071070856187059 and parameters: {'n_estimators': 22, 'max_depth': 2, 'min_samples_split': 8, 'min_samples_leaf': 2}. Best is trial 0 with value: 6.012747224033297.</code></pre>
</div>
</div>
<p><img src="https://sagarthacker.com/posts/mlops/images/aws_mlflow/hyperparameter_tuning.png" class="img-fluid"></p>
</section>
<section id="model-registry" class="level3">
<h3 class="anchored" data-anchor-id="model-registry">Model Registry</h3>
<p>Finally, we’ll take the top 5 models from the hyperparameter tuning experiment and run them on the test dataset. We’ll log the metrics and artifacts for each model. We’ll register the model with the best metrics to the model registry.</p>
<div class="cell" data-execution_count="6">
<div class="sourceCode cell-code" id="cb23" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb23-1"><span class="co" style="color: #5E5E5E;"># Hyperparameter optimization experiment name</span></span>
<span id="cb23-2">HPO_EXPERIMENT_NAME <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">"random-forest-hyperopt"</span></span>
<span id="cb23-3"></span>
<span id="cb23-4"><span class="co" style="color: #5E5E5E;"># Best model experiment name</span></span>
<span id="cb23-5">EXPERIMENT_NAME <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">"random-forest-best-models"</span></span>
<span id="cb23-6"></span>
<span id="cb23-7"><span class="co" style="color: #5E5E5E;"># Create a new experiment for the best models</span></span>
<span id="cb23-8">mlflow.set_experiment(EXPERIMENT_NAME)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="6">
<pre><code>&lt;Experiment: artifact_location='s3://mlflow-artifact-remote-storage/2', creation_time=1685548138856, experiment_id='2', last_update_time=1685548138856, lifecycle_stage='active', name='random-forest-best-models', tags={}&gt;</code></pre>
</div>
</div>
<div class="cell" data-execution_count="7">
<div class="sourceCode cell-code" id="cb25" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb25-1"><span class="co" style="color: #5E5E5E;"># Automatically log parameters and metrics</span></span>
<span id="cb25-2">mlflow.sklearn.autolog()</span></code></pre></div>
</div>
<div class="cell" data-execution_count="8">
<div class="sourceCode cell-code" id="cb26" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb26-1"><span class="co" style="color: #5E5E5E;"># RandomForest Parameters</span></span>
<span id="cb26-2">RF_PARAMS <span class="op" style="color: #5E5E5E;">=</span> [<span class="st" style="color: #20794D;">'max_depth'</span>, <span class="st" style="color: #20794D;">'n_estimators'</span>, <span class="st" style="color: #20794D;">'min_samples_split'</span>,</span>
<span id="cb26-3">             <span class="st" style="color: #20794D;">'min_samples_leaf'</span>, <span class="st" style="color: #20794D;">'random_state'</span>, <span class="st" style="color: #20794D;">'n_jobs'</span>]</span></code></pre></div>
</div>
<div class="cell" data-execution_count="9">
<div class="sourceCode cell-code" id="cb27" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb27-1"><span class="kw" style="color: #003B4F;">def</span> train_and_log_model(params):</span>
<span id="cb27-2">    <span class="co" style="color: #5E5E5E;">"""</span></span>
<span id="cb27-3"><span class="co" style="color: #5E5E5E;">    Trains a RandomForestRegressor model with the given hyperparameters and logs evaluation metrics to MLflow.</span></span>
<span id="cb27-4"></span>
<span id="cb27-5"><span class="co" style="color: #5E5E5E;">    Parameters:</span></span>
<span id="cb27-6"><span class="co" style="color: #5E5E5E;">        params (dict): Dictionary of hyperparameters for RandomForestRegressor.</span></span>
<span id="cb27-7"></span>
<span id="cb27-8"><span class="co" style="color: #5E5E5E;">    Returns:</span></span>
<span id="cb27-9"><span class="co" style="color: #5E5E5E;">        None</span></span>
<span id="cb27-10"></span>
<span id="cb27-11"><span class="co" style="color: #5E5E5E;">    Notes:</span></span>
<span id="cb27-12"><span class="co" style="color: #5E5E5E;">        - The function starts an MLflow run to track the model training and evaluation process.</span></span>
<span id="cb27-13"><span class="co" style="color: #5E5E5E;">        - It converts certain hyperparameters to integers.</span></span>
<span id="cb27-14"><span class="co" style="color: #5E5E5E;">        - A RandomForestRegressor model is initialized with the provided hyperparameters.</span></span>
<span id="cb27-15"><span class="co" style="color: #5E5E5E;">        - The model is trained on the training data.</span></span>
<span id="cb27-16"><span class="co" style="color: #5E5E5E;">        - The trained model is evaluated on the validation and test sets, and the root mean squared error (RMSE) is calculated and logged to MLflow as evaluation metrics.</span></span>
<span id="cb27-17"><span class="co" style="color: #5E5E5E;">    """</span></span>
<span id="cb27-18"></span>
<span id="cb27-19">    <span class="cf" style="color: #003B4F;">with</span> mlflow.start_run():</span>
<span id="cb27-20">        <span class="co" style="color: #5E5E5E;"># Convert specific hyperparameters to integers</span></span>
<span id="cb27-21">        <span class="cf" style="color: #003B4F;">for</span> param <span class="kw" style="color: #003B4F;">in</span> RF_PARAMS:</span>
<span id="cb27-22">            params[param] <span class="op" style="color: #5E5E5E;">=</span> <span class="bu" style="color: null;">int</span>(params[param])</span>
<span id="cb27-23"></span>
<span id="cb27-24">        <span class="co" style="color: #5E5E5E;"># Initialize a RandomForestRegressor model with the given hyperparameters</span></span>
<span id="cb27-25">        rf <span class="op" style="color: #5E5E5E;">=</span> RandomForestRegressor(<span class="op" style="color: #5E5E5E;">**</span>params)</span>
<span id="cb27-26"></span>
<span id="cb27-27">        <span class="co" style="color: #5E5E5E;"># Train the model on the training data</span></span>
<span id="cb27-28">        rf.fit(X_train, y_train)</span>
<span id="cb27-29"></span>
<span id="cb27-30">        <span class="co" style="color: #5E5E5E;"># Evaluate the trained model on the validation set</span></span>
<span id="cb27-31">        val_rmse <span class="op" style="color: #5E5E5E;">=</span> mean_squared_error(y_val, rf.predict(X_val), squared<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">False</span>)</span>
<span id="cb27-32"></span>
<span id="cb27-33">        <span class="co" style="color: #5E5E5E;"># Log the validation RMSE metric to MLflow</span></span>
<span id="cb27-34">        mlflow.log_metric(<span class="st" style="color: #20794D;">"val_rmse"</span>, val_rmse)</span>
<span id="cb27-35"></span>
<span id="cb27-36">        <span class="co" style="color: #5E5E5E;"># Evaluate the trained model on the test set</span></span>
<span id="cb27-37">        test_rmse <span class="op" style="color: #5E5E5E;">=</span> mean_squared_error(y_test, rf.predict(X_test), squared<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">False</span>)</span>
<span id="cb27-38"></span>
<span id="cb27-39">        <span class="co" style="color: #5E5E5E;"># Log the test RMSE metric to MLflow</span></span>
<span id="cb27-40">        mlflow.log_metric(<span class="st" style="color: #20794D;">"test_rmse"</span>, test_rmse)</span>
<span id="cb27-41"></span>
<span id="cb27-42"><span class="kw" style="color: #003B4F;">def</span> run_register_model(top_n: <span class="bu" style="color: null;">int</span>):</span>
<span id="cb27-43">    <span class="co" style="color: #5E5E5E;">"""</span></span>
<span id="cb27-44"><span class="co" style="color: #5E5E5E;">    Runs the process to register the best model based on the top_n model runs with the lowest test RMSE.</span></span>
<span id="cb27-45"></span>
<span id="cb27-46"><span class="co" style="color: #5E5E5E;">    Parameters:</span></span>
<span id="cb27-47"><span class="co" style="color: #5E5E5E;">        top_n (int): The number of top model runs to consider.</span></span>
<span id="cb27-48"></span>
<span id="cb27-49"><span class="co" style="color: #5E5E5E;">    Returns:</span></span>
<span id="cb27-50"><span class="co" style="color: #5E5E5E;">        None</span></span>
<span id="cb27-51"></span>
<span id="cb27-52"><span class="co" style="color: #5E5E5E;">    Notes:</span></span>
<span id="cb27-53"><span class="co" style="color: #5E5E5E;">        - The function interacts with the MLflow tracking server to retrieve and register models.</span></span>
<span id="cb27-54"><span class="co" style="color: #5E5E5E;">        - It retrieves the top_n model runs based on the lowest validation RMSE.</span></span>
<span id="cb27-55"><span class="co" style="color: #5E5E5E;">        - For each run, it trains a model using the hyperparameters from the run and logs evaluation metrics to MLflow.</span></span>
<span id="cb27-56"><span class="co" style="color: #5E5E5E;">        - After evaluating the models, it selects the one with the lowest test RMSE.</span></span>
<span id="cb27-57"><span class="co" style="color: #5E5E5E;">        - The selected model is registered with a specified name in MLflow.</span></span>
<span id="cb27-58"><span class="co" style="color: #5E5E5E;">    """</span></span>
<span id="cb27-59"></span>
<span id="cb27-60">    <span class="co" style="color: #5E5E5E;"># Connect to the MLflow tracking server</span></span>
<span id="cb27-61">    client <span class="op" style="color: #5E5E5E;">=</span> MlflowClient()</span>
<span id="cb27-62"></span>
<span id="cb27-63">    <span class="co" style="color: #5E5E5E;"># Retrieve the top_n model runs and log the models</span></span>
<span id="cb27-64">    experiment <span class="op" style="color: #5E5E5E;">=</span> client.get_experiment_by_name(HPO_EXPERIMENT_NAME)</span>
<span id="cb27-65"></span>
<span id="cb27-66">    <span class="co" style="color: #5E5E5E;"># Retrieve the top_n model runs based on the lowest validation RMSE</span></span>
<span id="cb27-67">    runs <span class="op" style="color: #5E5E5E;">=</span> client.search_runs(</span>
<span id="cb27-68">        experiment_ids<span class="op" style="color: #5E5E5E;">=</span>experiment.experiment_id,</span>
<span id="cb27-69">        run_view_type<span class="op" style="color: #5E5E5E;">=</span>ViewType.ACTIVE_ONLY,</span>
<span id="cb27-70">        max_results<span class="op" style="color: #5E5E5E;">=</span>top_n,</span>
<span id="cb27-71">        order_by<span class="op" style="color: #5E5E5E;">=</span>[<span class="st" style="color: #20794D;">"metrics.rmse ASC"</span>]</span>
<span id="cb27-72">    )</span>
<span id="cb27-73"></span>
<span id="cb27-74">    <span class="co" style="color: #5E5E5E;"># Train and log the model for each run</span></span>
<span id="cb27-75">    <span class="cf" style="color: #003B4F;">for</span> run <span class="kw" style="color: #003B4F;">in</span> runs:</span>
<span id="cb27-76">        <span class="co" style="color: #5E5E5E;"># Train and log the model based on the hyperparameters from the run</span></span>
<span id="cb27-77">        train_and_log_model(params<span class="op" style="color: #5E5E5E;">=</span>run.data.params)</span>
<span id="cb27-78"></span>
<span id="cb27-79">    <span class="co" style="color: #5E5E5E;"># Select the model with the lowest test RMSE</span></span>
<span id="cb27-80">    experiment <span class="op" style="color: #5E5E5E;">=</span> client.get_experiment_by_name(EXPERIMENT_NAME)</span>
<span id="cb27-81"></span>
<span id="cb27-82">    <span class="co" style="color: #5E5E5E;"># Retrieve model runs based on the lowest test RMSE, and select the first run (with the lowest test RMSE)</span></span>
<span id="cb27-83">    best_run <span class="op" style="color: #5E5E5E;">=</span> client.search_runs(</span>
<span id="cb27-84">        experiment_ids<span class="op" style="color: #5E5E5E;">=</span>experiment.experiment_id,</span>
<span id="cb27-85">        run_view_type<span class="op" style="color: #5E5E5E;">=</span>ViewType.ACTIVE_ONLY,</span>
<span id="cb27-86">        order_by<span class="op" style="color: #5E5E5E;">=</span>[<span class="st" style="color: #20794D;">"metrics.test_rmse ASC"</span>]</span>
<span id="cb27-87">    )[<span class="dv" style="color: #AD0000;">0</span>]</span>
<span id="cb27-88"></span>
<span id="cb27-89">    <span class="co" style="color: #5E5E5E;"># Register the best model</span></span>
<span id="cb27-90">    model_uri <span class="op" style="color: #5E5E5E;">=</span> <span class="ss" style="color: #20794D;">f"runs:/</span><span class="sc" style="color: #5E5E5E;">{</span>best_run<span class="sc" style="color: #5E5E5E;">.</span>info<span class="sc" style="color: #5E5E5E;">.</span>run_id<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">/model"</span></span>
<span id="cb27-91"></span>
<span id="cb27-92">    <span class="co" style="color: #5E5E5E;"># Register the best model with a specified name</span></span>
<span id="cb27-93">    mlflow.register_model(</span>
<span id="cb27-94">        model_uri<span class="op" style="color: #5E5E5E;">=</span>model_uri,</span>
<span id="cb27-95">        name<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"random-forest-best-model"</span></span>
<span id="cb27-96">    )</span></code></pre></div>
</div>
<div class="cell" data-execution_count="10">
<div class="sourceCode cell-code" id="cb28" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb28-1"><span class="co" style="color: #5E5E5E;"># The number of top model runs to consider</span></span>
<span id="cb28-2">top_n <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">5</span></span>
<span id="cb28-3"></span>
<span id="cb28-4">run_register_model(top_n<span class="op" style="color: #5E5E5E;">=</span>top_n)</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>2023/05/31 11:58:21 WARNING mlflow.utils.autologging_utils: MLflow autologging encountered a warning: "/Users/wizard/Astronaut/Dev/MLOps/week2/venv/lib/python3.9/site-packages/_distutils_hack/__init__.py:33: UserWarning: Setuptools is replacing distutils."
Successfully registered model 'random-forest-best-model'.
2023/05/31 11:58:49 INFO mlflow.tracking._model_registry.client: Waiting up to 300 seconds for model version to finish creation. Model name: random-forest-best-model, version 1
Created version '1' of model 'random-forest-best-model'.</code></pre>
</div>
</div>
<p><img src="https://sagarthacker.com/posts/mlops/images/aws_mlflow/best_test_models.png" class="img-fluid"></p>
<p>Congratulations! 🎉 You have successfully set up MLflow on AWS EC2 instance and used it to track your machine learning experiments.</p>
<div class="callout-tip callout callout-style-default callout-captioned">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-caption-container flex-fill">
STOP EC2 instance
</div>
</div>
<div class="callout-body-container callout-body">
<p>Please remember to stop the EC2 instance after completing your work to avoid incurring any additional charges.</p>
</div>
</div>
<p>Thank you for reading and I hope you found this post helpful. Upvote if you liked it, comment if you loved it. Hope to see you guys in the next one. Peace!</p>


</section>
</section>

 ]]></description>
  <category>MLOps</category>
  <category>MLflow</category>
  <category>AWS</category>
  <guid>https://sagarthacker.com/posts/mlops/mlflow_on_aws.html</guid>
  <pubDate>Tue, 30 May 2023 04:00:00 GMT</pubDate>
  <media:content url="https://sagarthacker.com/posts/mlops/images/find_ec2.png" medium="image" type="image/png" height="80" width="144"/>
</item>
<item>
  <title>Introduction to MLflow</title>
  <dc:creator>Sagar Thacker</dc:creator>
  <link>https://sagarthacker.com/posts/mlops/mlflow.html</link>
  <description><![CDATA[ 




<p>Welcome to our latest blog post, where we delve into the fascinating world of experiment tracking and its powerful implementation using MLflow. 📚 We’ll explore the concept of experiment tracking and learn how MLflow can revolutionize the way we track and manage our machine learning experiments.</p>
<p>In this comprehensive guide, we will walk you through the process of leveraging MLflow to effectively track your experiments, enabling you to gain valuable insights into model performance, parameter tuning, and results. Discover how MLflow’s model registry feature empowers you to version your models, ensuring reproducibility and seamless collaboration.</p>
<section id="what-is-experiment-tracking" class="level2">
<h2 class="anchored" data-anchor-id="what-is-experiment-tracking">What is Experiment Tracking?</h2>
<p>In a nutshell, it is the process of building an ML model. More formally, Experiment tracking is the process of keeping track of all the relevant information from an ML experiment, which includes:</p>
<ul>
<li>Source code</li>
<li>Environment</li>
<li>Data</li>
<li>Model</li>
<li>Hyperparameters</li>
<li>Metrics</li>
</ul>
<p>Terminologies associated with ML Experiments:</p>
<ol type="1">
<li><strong>Experiment Run</strong>: Each trail while building an ML model is called an experiment run. Whether it’s training a vanilla Linear Regression model or conducting hyperparameter tuning with various combinations, each distinct attempt is considered an experiment run. It allows for systematic organization and analysis of different approaches and variations.</li>
<li><strong>Run Artifact</strong>: Any file that is associated with an ML run is an Artifact. Example: Model weights, Model predictions, Model metrics, etc.</li>
<li><strong>Experiment Metadata</strong>: Additional information such as Model Signature - description of a model’s inputs and outputs, Model Input Example - example of a valid model input.</li>
</ol>
</section>
<section id="why-is-experiment-tracking-important" class="level2">
<h2 class="anchored" data-anchor-id="why-is-experiment-tracking-important">Why is Experiment Tracking Important?</h2>
<ul>
<li><strong>Reproducibility</strong>: It is important to be able to reproduce the results of an experiment. This is especially true in the case of ML experiments where the results are not deterministic. Experiment tracking helps us to reproduce the results of an experiment by keeping track of all the relevant information.</li>
<li><strong>Organization</strong>: Any file associated with an ML run is considered an artifact. These artifacts can include crucial components such as model weights, model predictions, model metrics, or any other files generated during the experiment. They serve as valuable resources for evaluating and understanding the outcomes of each run.</li>
<li><strong>Optimization</strong>: In addition to the core elements of an ML experiment, there is additional metadata that provides valuable context and insights. This metadata includes the model signature, which describes the inputs and outputs of the model, and the model input example, which provides an example of a valid input for the model. These details contribute to a comprehensive understanding of the experiment and aid in reproducibility.</li>
</ul>
<p>In the past, before the advent of dedicated experiment tracking tools, researchers and data scientists relied on spreadsheets to keep track of their experiments. However, this manual approach presented several challenges and limitations. Let’s explore the major points of concern:</p>
<ul>
<li><strong>Error Prone</strong>: The process of manually copying and pasting the results of an experiment from a Jupyter notebook or other sources into a spreadsheet was tedious and error-prone. It often led to mistakes or inaccuracies in recording the data, undermining the reliability and integrity of the experiment records.</li>
<li><strong>No standard format</strong>: Without a standardized format for organizing and documenting experiment results, researchers faced difficulties in comparing and analyzing the outcomes of different experiments. The lack of consistency hindered the ability to draw meaningful insights and make informed decisions based on the collected data.</li>
<li><strong>Visibility &amp; Collaboration</strong>: Sharing experiment results with other team members was a cumbersome task. Spreadsheet-based tracking offered limited visibility and collaboration capabilities, impeding effective teamwork and knowledge sharing. It was challenging to provide access, gather feedback, or collaborate on an experiment in a seamless manner.</li>
</ul>
</section>
<section id="getting-started-with-mlflow" class="level2">
<h2 class="anchored" data-anchor-id="getting-started-with-mlflow">Getting Started with MLflow</h2>
<p>MLflow is an open-source platform for managing the end-to-end machine learning lifecycle. It provides a comprehensive set of tools for tracking experiments, packaging ML code, and deploying models. MLflow is designed to work with any ML library and language, and it is built on an open API, enabling seamless integration with other platforms and tools.</p>
<p>To see MLflow in action, let’s walk through a simple example of training a Linear Regression model on NY Green Taxi Trips dataset. We will use MLflow to track the experiment and record the results.</p>
<section id="install-mlflow-and-setup-environment" class="level3">
<h3 class="anchored" data-anchor-id="install-mlflow-and-setup-environment">Install MLflow and Setup Environment</h3>
<p>Create a new virtual environment and install MLflow and other libraries using the following command:</p>
<div class="code-with-filename">
<div class="code-with-filename-file">
<pre><strong>requirements.txt</strong></pre>
</div>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode numberSource bash number-lines code-with-copy"><code class="sourceCode bash"><span id="cb1-1"><span class="ex" style="color: null;">mlflow</span></span>
<span id="cb1-2"><span class="ex" style="color: null;">jupyter</span></span>
<span id="cb1-3"><span class="ex" style="color: null;">scikit-learn</span></span>
<span id="cb1-4"><span class="ex" style="color: null;">pandas</span></span>
<span id="cb1-5"><span class="ex" style="color: null;">xgboost</span></span>
<span id="cb1-6"><span class="ex" style="color: null;">fastparquet</span></span>
<span id="cb1-7"><span class="ex" style="color: null;">hyperopt</span></span>
<span id="cb1-8"><span class="ex" style="color: null;">optuna</span></span></code></pre></div>
</div>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode numberSource bash number-lines code-with-copy"><code class="sourceCode bash"><span id="cb2-1"><span class="co" style="color: #5E5E5E;"># Create conda environment</span></span>
<span id="cb2-2"><span class="ex" style="color: null;">conda</span> create <span class="at" style="color: #657422;">-p</span> venv python=3.9 <span class="at" style="color: #657422;">-y</span></span>
<span id="cb2-3"></span>
<span id="cb2-4"><span class="co" style="color: #5E5E5E;"># Activate conda environment</span></span>
<span id="cb2-5"><span class="ex" style="color: null;">conda</span> activate venv/</span>
<span id="cb2-6"></span>
<span id="cb2-7"><span class="co" style="color: #5E5E5E;"># Install required libraries</span></span>
<span id="cb2-8"><span class="ex" style="color: null;">pip</span> install <span class="at" style="color: #657422;">-r</span> requirements.txt <span class="at" style="color: #657422;">--no-cache-dir</span></span></code></pre></div>
<p>Download the dataset using the following command:</p>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode numberSource bash number-lines code-with-copy"><code class="sourceCode bash"><span id="cb3-1"><span class="co" style="color: #5E5E5E;"># Create data directory</span></span>
<span id="cb3-2"><span class="fu" style="color: #4758AB;">mkdir</span> data</span>
<span id="cb3-3"></span>
<span id="cb3-4"><span class="co" style="color: #5E5E5E;"># Move to data directory</span></span>
<span id="cb3-5"><span class="bu" style="color: null;">cd</span> data</span>
<span id="cb3-6"></span>
<span id="cb3-7"><span class="co" style="color: #5E5E5E;"># Download dataset</span></span>
<span id="cb3-8"><span class="fu" style="color: #4758AB;">wget</span> https://d37ci6vzurychx.cloudfront.net/trip-data/green_tripdata_2022-01.parquet <span class="co" style="color: #5E5E5E;"># January 2022</span></span>
<span id="cb3-9"><span class="fu" style="color: #4758AB;">wget</span> https://d37ci6vzurychx.cloudfront.net/trip-data/green_tripdata_2022-02.parquet <span class="co" style="color: #5E5E5E;"># February 2022</span></span>
<span id="cb3-10"><span class="fu" style="color: #4758AB;">wget</span> https://d37ci6vzurychx.cloudfront.net/trip-data/green_tripdata_2022-03.parquet <span class="co" style="color: #5E5E5E;"># March 2022</span></span></code></pre></div>
<p>We’ll also create a jupyter notebook named <code>mlflow.ipynb</code> to run our experiment. After following the above steps, you should have the following directory structure:</p>
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode numberSource bash number-lines code-with-copy"><code class="sourceCode bash"><span id="cb4-1"><span class="bu" style="color: null;">.</span></span>
<span id="cb4-2"><span class="ex" style="color: null;">├──</span> data</span>
<span id="cb4-3"><span class="ex" style="color: null;">│</span>   ├── green_tripdata_2022-01.parquet</span>
<span id="cb4-4"><span class="ex" style="color: null;">│</span>   ├── green_tripdata_2022-02.parquet</span>
<span id="cb4-5"><span class="ex" style="color: null;">│</span>   └── green_tripdata_2022-03.parquet</span>
<span id="cb4-6"><span class="ex" style="color: null;">├──</span> mlflow.ipynb</span>
<span id="cb4-7"><span class="ex" style="color: null;">├──</span> requirements.txt</span>
<span id="cb4-8"><span class="ex" style="color: null;">└──</span> venv</span></code></pre></div>
<p>To see MLflow UI in action, we’ll run the following command while you’re in the root directory in the terminal:</p>
<div class="sourceCode" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode numberSource bash number-lines code-with-copy"><code class="sourceCode bash"><span id="cb5-1"><span class="ex" style="color: null;">mlflow</span> ui</span></code></pre></div>
<p>This will start the MLflow server on port 5000. You can access the MLflow UI at http://127.0.0.1:5000. Shown below:</p>
<p><img src="https://sagarthacker.com/posts/mlops/images/mlflow_ui.png" class="img-fluid"></p>
<div class="callout-note callout callout-style-default callout-captioned">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-caption-container flex-fill">
Note
</div>
</div>
<div class="callout-body-container callout-body">
<p>If you face an <strong>Access to 127.0.0.1 was denied. You don’t have authorization to view this page. HTTP ERROR 403</strong> error while accessing the MLflow UI, you can resolve it by clearing the browser cache and cookies.</p>
</div>
</div>
<p>One interesting thing to note here is that MLflow will create a new directory named <code>mlruns</code> in the current working directory. This directory will contain all the experiment runs and artifacts. This configuration of backend and artifact storage is called <code>MLflow on localhost</code>. There are other configurations available as well, which we will explore in another post.</p>
<p align="center">
<img src="https://sagarthacker.com/posts/mlops/https:/mlflow.org/docs/latest/_images/scenario_1.png" width="400" height="450/">
</p><p>
Source: <a href="https://mlflow.org/docs/latest/tracking.html#scenario-1-mlflow-on-localhost">MLflow Documentation</a>
</p>
<p></p>
</section>
<section id="load-dataset" class="level3">
<h3 class="anchored" data-anchor-id="load-dataset">Load Dataset</h3>
<p>Let’s start by importing the required libraries and loading the dataset.</p>
<div class="cell" data-execution_count="24">
<details>
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb6-1"><span class="im" style="color: #00769E;">import</span> os</span>
<span id="cb6-2"><span class="im" style="color: #00769E;">import</span> numpy <span class="im" style="color: #00769E;">as</span> np</span>
<span id="cb6-3"><span class="im" style="color: #00769E;">import</span> pandas <span class="im" style="color: #00769E;">as</span> pd</span>
<span id="cb6-4"><span class="im" style="color: #00769E;">import</span> pickle</span>
<span id="cb6-5"><span class="im" style="color: #00769E;">import</span> mlflow</span>
<span id="cb6-6"><span class="im" style="color: #00769E;">import</span> optuna</span>
<span id="cb6-7"></span>
<span id="cb6-8"><span class="im" style="color: #00769E;">from</span> mlflow.entities <span class="im" style="color: #00769E;">import</span> ViewType</span>
<span id="cb6-9"><span class="im" style="color: #00769E;">from</span> mlflow.tracking <span class="im" style="color: #00769E;">import</span> MlflowClient</span>
<span id="cb6-10"><span class="im" style="color: #00769E;">from</span> optuna.samplers <span class="im" style="color: #00769E;">import</span> TPESampler</span>
<span id="cb6-11"><span class="im" style="color: #00769E;">from</span> sklearn.feature_extraction <span class="im" style="color: #00769E;">import</span> DictVectorizer</span>
<span id="cb6-12"><span class="im" style="color: #00769E;">from</span> sklearn.linear_model <span class="im" style="color: #00769E;">import</span> LinearRegression, Lasso</span>
<span id="cb6-13"><span class="im" style="color: #00769E;">from</span> sklearn.ensemble <span class="im" style="color: #00769E;">import</span> RandomForestRegressor</span>
<span id="cb6-14"><span class="im" style="color: #00769E;">from</span> sklearn.metrics <span class="im" style="color: #00769E;">import</span> mean_squared_error</span></code></pre></div>
</details>
</div>
<div class="cell" data-execution_count="6">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb7-1"><span class="kw" style="color: #003B4F;">def</span> read_dataframe(filename: <span class="bu" style="color: null;">str</span>) <span class="op" style="color: #5E5E5E;">-&gt;</span> pd.DataFrame:</span>
<span id="cb7-2">    <span class="co" style="color: #5E5E5E;">"""</span></span>
<span id="cb7-3"><span class="co" style="color: #5E5E5E;">    Reads a Parquet file into a pandas DataFrame, performs data transformations, and returns the resulting DataFrame.</span></span>
<span id="cb7-4"></span>
<span id="cb7-5"><span class="co" style="color: #5E5E5E;">    Parameters:</span></span>
<span id="cb7-6"><span class="co" style="color: #5E5E5E;">        filename (str): The path to the Parquet file to be read.</span></span>
<span id="cb7-7"></span>
<span id="cb7-8"><span class="co" style="color: #5E5E5E;">    Returns:</span></span>
<span id="cb7-9"><span class="co" style="color: #5E5E5E;">        pandas.DataFrame: The processed DataFrame containing the data from the Parquet file.</span></span>
<span id="cb7-10"></span>
<span id="cb7-11"><span class="co" style="color: #5E5E5E;">    Raises:</span></span>
<span id="cb7-12"><span class="co" style="color: #5E5E5E;">        [Any exceptions raised by pandas.read_parquet()]</span></span>
<span id="cb7-13"></span>
<span id="cb7-14"><span class="co" style="color: #5E5E5E;">    Notes:</span></span>
<span id="cb7-15"><span class="co" style="color: #5E5E5E;">        - The function performs the following transformations on the DataFrame:</span></span>
<span id="cb7-16"><span class="co" style="color: #5E5E5E;">            - Converts 'lpep_dropoff_datetime' and 'lpep_pickup_datetime' columns to pandas datetime objects.</span></span>
<span id="cb7-17"><span class="co" style="color: #5E5E5E;">            - Computes the 'duration' column by subtracting 'lpep_pickup_datetime' from 'lpep_dropoff_datetime'</span></span>
<span id="cb7-18"><span class="co" style="color: #5E5E5E;">              and converting the result to minutes.</span></span>
<span id="cb7-19"><span class="co" style="color: #5E5E5E;">            - Filters the DataFrame to include rows where the 'duration' is between 1 and 60 minutes (inclusive).</span></span>
<span id="cb7-20"><span class="co" style="color: #5E5E5E;">            - Converts 'PULocationID' and 'DOLocationID' columns to string type.</span></span>
<span id="cb7-21"></span>
<span id="cb7-22"><span class="co" style="color: #5E5E5E;">    Example:</span></span>
<span id="cb7-23"><span class="co" style="color: #5E5E5E;">        filename = 'data.parquet'</span></span>
<span id="cb7-24"><span class="co" style="color: #5E5E5E;">        df = read_dataframe(filename)</span></span>
<span id="cb7-25"><span class="co" style="color: #5E5E5E;">    """</span></span>
<span id="cb7-26">    <span class="co" style="color: #5E5E5E;"># Read the Parquet file into a DataFrame</span></span>
<span id="cb7-27">    df <span class="op" style="color: #5E5E5E;">=</span> pd.read_parquet(filename)</span>
<span id="cb7-28"></span>
<span id="cb7-29">    <span class="co" style="color: #5E5E5E;"># Convert 'lpep_dropoff_datetime' and 'lpep_pickup_datetime' columns to pandas datetime objects</span></span>
<span id="cb7-30">    df.lpep_dropoff_datetime <span class="op" style="color: #5E5E5E;">=</span> pd.to_datetime(df.lpep_dropoff_datetime)</span>
<span id="cb7-31">    df.lpep_pickup_datetime <span class="op" style="color: #5E5E5E;">=</span> pd.to_datetime(df.lpep_pickup_datetime)</span>
<span id="cb7-32"></span>
<span id="cb7-33">    <span class="co" style="color: #5E5E5E;"># Compute the 'duration' column by subtracting 'lpep_pickup_datetime' from 'lpep_dropoff_datetime' and converting to minutes</span></span>
<span id="cb7-34">    df[<span class="st" style="color: #20794D;">'duration'</span>] <span class="op" style="color: #5E5E5E;">=</span> df.lpep_dropoff_datetime <span class="op" style="color: #5E5E5E;">-</span> df.lpep_pickup_datetime</span>
<span id="cb7-35">    df.duration <span class="op" style="color: #5E5E5E;">=</span> df.duration.<span class="bu" style="color: null;">apply</span>(<span class="kw" style="color: #003B4F;">lambda</span> td: td.total_seconds() <span class="op" style="color: #5E5E5E;">/</span> <span class="dv" style="color: #AD0000;">60</span>)</span>
<span id="cb7-36"></span>
<span id="cb7-37">    <span class="co" style="color: #5E5E5E;"># Filter the DataFrame to include rows where the 'duration' is between 1 and 60 minutes (inclusive)</span></span>
<span id="cb7-38">    df <span class="op" style="color: #5E5E5E;">=</span> df[(df.duration <span class="op" style="color: #5E5E5E;">&gt;=</span> <span class="dv" style="color: #AD0000;">1</span>) <span class="op" style="color: #5E5E5E;">&amp;</span> (df.duration <span class="op" style="color: #5E5E5E;">&lt;=</span> <span class="dv" style="color: #AD0000;">60</span>)]</span>
<span id="cb7-39"></span>
<span id="cb7-40">    <span class="co" style="color: #5E5E5E;"># Convert 'PULocationID' and 'DOLocationID' columns to string type</span></span>
<span id="cb7-41">    categorical <span class="op" style="color: #5E5E5E;">=</span> [<span class="st" style="color: #20794D;">'PULocationID'</span>, <span class="st" style="color: #20794D;">'DOLocationID'</span>]</span>
<span id="cb7-42">    df[categorical] <span class="op" style="color: #5E5E5E;">=</span> df[categorical].astype(<span class="bu" style="color: null;">str</span>)</span>
<span id="cb7-43">    </span>
<span id="cb7-44">    <span class="co" style="color: #5E5E5E;"># Return the processed DataFrame</span></span>
<span id="cb7-45">    <span class="cf" style="color: #003B4F;">return</span> df</span></code></pre></div>
</div>
<div class="cell" data-execution_count="17">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb8-1"><span class="co" style="color: #5E5E5E;"># Read the Parquet file for training data into a DataFrame</span></span>
<span id="cb8-2">df_train <span class="op" style="color: #5E5E5E;">=</span> read_dataframe(<span class="st" style="color: #20794D;">'./data/green_tripdata_2022-01.parquet'</span>)</span>
<span id="cb8-3"></span>
<span id="cb8-4"><span class="co" style="color: #5E5E5E;"># Read the Parquet file for validation data into a DataFrame</span></span>
<span id="cb8-5">df_val <span class="op" style="color: #5E5E5E;">=</span> read_dataframe(<span class="st" style="color: #20794D;">'./data/green_tripdata_2022-02.parquet'</span>)</span>
<span id="cb8-6"></span>
<span id="cb8-7"><span class="co" style="color: #5E5E5E;"># Read the Parquet file for testing data into a DataFrame</span></span>
<span id="cb8-8">df_test <span class="op" style="color: #5E5E5E;">=</span> read_dataframe(<span class="st" style="color: #20794D;">'./data/green_tripdata_2022-03.parquet'</span>)</span></code></pre></div>
</div>
</section>
<section id="prepare-and-transform-dataset" class="level3">
<h3 class="anchored" data-anchor-id="prepare-and-transform-dataset">Prepare and Transform Dataset</h3>
<div class="cell" data-execution_count="9">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb9-1"><span class="kw" style="color: #003B4F;">def</span> preprocess(df: pd.DataFrame, dv: DictVectorizer, fit_dv: <span class="bu" style="color: null;">bool</span> <span class="op" style="color: #5E5E5E;">=</span> <span class="va" style="color: #111111;">False</span>):</span>
<span id="cb9-2">    <span class="co" style="color: #5E5E5E;">"""</span></span>
<span id="cb9-3"><span class="co" style="color: #5E5E5E;">    Preprocesses a pandas DataFrame by creating new features, transforming categorical features into a numerical format,</span></span>
<span id="cb9-4"><span class="co" style="color: #5E5E5E;">    and returning the transformed data along with the DictVectorizer.</span></span>
<span id="cb9-5"></span>
<span id="cb9-6"><span class="co" style="color: #5E5E5E;">    Parameters:</span></span>
<span id="cb9-7"><span class="co" style="color: #5E5E5E;">        df (pandas.DataFrame): The input DataFrame to be preprocessed.</span></span>
<span id="cb9-8"><span class="co" style="color: #5E5E5E;">        dv (sklearn.feature_extraction.DictVectorizer): The DictVectorizer instance to be used for transforming categorical features.</span></span>
<span id="cb9-9"><span class="co" style="color: #5E5E5E;">        fit_dv (bool, optional): Indicates whether to fit the DictVectorizer on the data. Defaults to False.</span></span>
<span id="cb9-10"></span>
<span id="cb9-11"><span class="co" style="color: #5E5E5E;">    Returns:</span></span>
<span id="cb9-12"><span class="co" style="color: #5E5E5E;">        tuple: A tuple containing the transformed feature matrix and the DictVectorizer instance.</span></span>
<span id="cb9-13"></span>
<span id="cb9-14"><span class="co" style="color: #5E5E5E;">    Notes:</span></span>
<span id="cb9-15"><span class="co" style="color: #5E5E5E;">        - The function assumes that the DataFrame contains the columns 'PULocationID' and 'DOLocationID'.</span></span>
<span id="cb9-16"><span class="co" style="color: #5E5E5E;">        - The function creates a new feature 'PU_DO' by concatenating 'PULocationID' and 'DOLocationID'.</span></span>
<span id="cb9-17"><span class="co" style="color: #5E5E5E;">        - The categorical feature 'PU_DO' and numerical feature 'trip_distance' are selected for transformation.</span></span>
<span id="cb9-18"><span class="co" style="color: #5E5E5E;">        - The function transforms the selected features into a dictionary representation and applies the DictVectorizer.</span></span>
<span id="cb9-19"><span class="co" style="color: #5E5E5E;">        - If fit_dv is True, the DictVectorizer is fitted on the data. Otherwise, the existing fitted DictVectorizer is used.</span></span>
<span id="cb9-20"></span>
<span id="cb9-21"><span class="co" style="color: #5E5E5E;">    Example:</span></span>
<span id="cb9-22"><span class="co" style="color: #5E5E5E;">        df = read_dataframe('data.parquet')</span></span>
<span id="cb9-23"><span class="co" style="color: #5E5E5E;">        dv = DictVectorizer()</span></span>
<span id="cb9-24"><span class="co" style="color: #5E5E5E;">        X, dv = preprocess(df, dv, fit_dv=True)</span></span>
<span id="cb9-25"><span class="co" style="color: #5E5E5E;">    """</span></span>
<span id="cb9-26">    <span class="co" style="color: #5E5E5E;"># Create a new feature 'PU_DO' by concatenating 'PULocationID' and 'DOLocationID'</span></span>
<span id="cb9-27">    df[<span class="st" style="color: #20794D;">'PU_DO'</span>] <span class="op" style="color: #5E5E5E;">=</span> df[<span class="st" style="color: #20794D;">'PULocationID'</span>] <span class="op" style="color: #5E5E5E;">+</span> <span class="st" style="color: #20794D;">'_'</span> <span class="op" style="color: #5E5E5E;">+</span> df[<span class="st" style="color: #20794D;">'DOLocationID'</span>]</span>
<span id="cb9-28"></span>
<span id="cb9-29">    <span class="co" style="color: #5E5E5E;"># Select categorical and numerical features for transformation</span></span>
<span id="cb9-30">    categorical <span class="op" style="color: #5E5E5E;">=</span> [<span class="st" style="color: #20794D;">'PU_DO'</span>]</span>
<span id="cb9-31">    numerical <span class="op" style="color: #5E5E5E;">=</span> [<span class="st" style="color: #20794D;">'trip_distance'</span>]</span>
<span id="cb9-32"></span>
<span id="cb9-33">    <span class="co" style="color: #5E5E5E;"># Convert the selected features into a dictionary representation</span></span>
<span id="cb9-34">    dicts <span class="op" style="color: #5E5E5E;">=</span> df[categorical <span class="op" style="color: #5E5E5E;">+</span> numerical].to_dict(orient<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'records'</span>)</span>
<span id="cb9-35"></span>
<span id="cb9-36">    <span class="co" style="color: #5E5E5E;"># Apply DictVectorizer for transforming categorical features</span></span>
<span id="cb9-37">    <span class="cf" style="color: #003B4F;">if</span> fit_dv:</span>
<span id="cb9-38">        <span class="co" style="color: #5E5E5E;"># Fit the DictVectorizer on the data</span></span>
<span id="cb9-39">        X <span class="op" style="color: #5E5E5E;">=</span> dv.fit_transform(dicts)</span>
<span id="cb9-40">    <span class="cf" style="color: #003B4F;">else</span>:</span>
<span id="cb9-41">        <span class="co" style="color: #5E5E5E;"># Transform using the existing fitted DictVectorizer</span></span>
<span id="cb9-42">        X <span class="op" style="color: #5E5E5E;">=</span> dv.transform(dicts)</span>
<span id="cb9-43"></span>
<span id="cb9-44">    <span class="co" style="color: #5E5E5E;"># Return the transformed feature matrix and DictVectorizer</span></span>
<span id="cb9-45">    <span class="cf" style="color: #003B4F;">return</span> X, dv</span></code></pre></div>
</div>
<div class="cell" data-execution_count="18">
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb10-1"><span class="co" style="color: #5E5E5E;"># Extract the target variable</span></span>
<span id="cb10-2">target <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">'duration'</span></span>
<span id="cb10-3"></span>
<span id="cb10-4"><span class="co" style="color: #5E5E5E;"># Extract the target variable from the training, validation and testing datasets</span></span>
<span id="cb10-5">y_train <span class="op" style="color: #5E5E5E;">=</span> df_train[target].values</span>
<span id="cb10-6">y_val <span class="op" style="color: #5E5E5E;">=</span> df_val[target].values</span>
<span id="cb10-7">y_test <span class="op" style="color: #5E5E5E;">=</span> df_test[target].values</span>
<span id="cb10-8"></span>
<span id="cb10-9"><span class="co" style="color: #5E5E5E;"># Initialize a DictVectorizer for preprocessing</span></span>
<span id="cb10-10">dv <span class="op" style="color: #5E5E5E;">=</span> DictVectorizer()</span>
<span id="cb10-11"></span>
<span id="cb10-12"><span class="co" style="color: #5E5E5E;"># Preprocess the training data</span></span>
<span id="cb10-13">X_train, dv <span class="op" style="color: #5E5E5E;">=</span> preprocess(df_train, dv, fit_dv<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>)</span>
<span id="cb10-14"></span>
<span id="cb10-15"><span class="co" style="color: #5E5E5E;"># Preprocess the validation data using the fitted DictVectorizer from the training data</span></span>
<span id="cb10-16">X_val, _ <span class="op" style="color: #5E5E5E;">=</span> preprocess(df_val, dv, fit_dv<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">False</span>)</span>
<span id="cb10-17"></span>
<span id="cb10-18"><span class="co" style="color: #5E5E5E;"># Preprocess the testing data using the fitted DictVectorizer from the training data</span></span>
<span id="cb10-19">X_test, _ <span class="op" style="color: #5E5E5E;">=</span> preprocess(df_test, dv, fit_dv<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">False</span>)</span></code></pre></div>
</div>
<div class="cell" data-execution_count="12">
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb11-1"><span class="kw" style="color: #003B4F;">def</span> dump_pickle(obj, filename: <span class="bu" style="color: null;">str</span>):</span>
<span id="cb11-2">    <span class="co" style="color: #5E5E5E;">"""</span></span>
<span id="cb11-3"><span class="co" style="color: #5E5E5E;">    Pickles (serializes) an object and saves it to a file.</span></span>
<span id="cb11-4"></span>
<span id="cb11-5"><span class="co" style="color: #5E5E5E;">    Parameters:</span></span>
<span id="cb11-6"><span class="co" style="color: #5E5E5E;">        obj (Any): The object to be pickled.</span></span>
<span id="cb11-7"><span class="co" style="color: #5E5E5E;">        filename (str): The path and filename to save the pickled object.</span></span>
<span id="cb11-8"></span>
<span id="cb11-9"><span class="co" style="color: #5E5E5E;">    Returns:</span></span>
<span id="cb11-10"><span class="co" style="color: #5E5E5E;">        None</span></span>
<span id="cb11-11"></span>
<span id="cb11-12"><span class="co" style="color: #5E5E5E;">    Notes:</span></span>
<span id="cb11-13"><span class="co" style="color: #5E5E5E;">        - The function uses the 'pickle' module to serialize the object and save it to a file.</span></span>
<span id="cb11-14"><span class="co" style="color: #5E5E5E;">        - The file is opened in binary mode for writing using the "wb" mode.</span></span>
<span id="cb11-15"><span class="co" style="color: #5E5E5E;">    """</span></span>
<span id="cb11-16">    <span class="cf" style="color: #003B4F;">with</span> <span class="bu" style="color: null;">open</span>(filename, <span class="st" style="color: #20794D;">"wb"</span>) <span class="im" style="color: #00769E;">as</span> f_out:</span>
<span id="cb11-17">        <span class="cf" style="color: #003B4F;">return</span> pickle.dump(obj, f_out)</span>
<span id="cb11-18"></span>
<span id="cb11-19"></span>
<span id="cb11-20"><span class="co" style="color: #5E5E5E;"># Specify the destination path for saving files</span></span>
<span id="cb11-21">dest_path <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">'./outputs'</span></span>
<span id="cb11-22"></span>
<span id="cb11-23"><span class="co" style="color: #5E5E5E;"># Create dest_path folder unless it already exists</span></span>
<span id="cb11-24">os.makedirs(dest_path, exist_ok<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>)</span>
<span id="cb11-25"></span>
<span id="cb11-26"><span class="co" style="color: #5E5E5E;"># Save DictVectorizer object as a pickle file</span></span>
<span id="cb11-27">dump_pickle(dv, os.path.join(dest_path, <span class="st" style="color: #20794D;">"dv.pkl"</span>))</span></code></pre></div>
</div>
</section>
<section id="train-linear-regression-model-with-mlflow" class="level3">
<h3 class="anchored" data-anchor-id="train-linear-regression-model-with-mlflow">Train Linear Regression Model with MLflow</h3>
<p>In mlflow you create one experiment and all the runs are stored under that experiment. You can create a new experiment using the following command:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb12-1"><span class="co" style="color: #5E5E5E;"># Create a new experiment</span></span>
<span id="cb12-2">mlflow.set_experiment(<span class="st" style="color: #20794D;">"nyc-taxi-experiment"</span>)</span></code></pre></div>
</div>
<p>If you check your MLflow UI, you’ll notice a new experiment named <code>ny-taxi-experiment</code> has been created under Experiments section. All the runs and artifacts will be stored under this experiment.</p>
<p><img src="https://sagarthacker.com/posts/mlops/images/mlflow_new_exp.png" class="img-fluid"></p>
<div class="cell" data-execution_count="14">
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb13-1"><span class="co" style="color: #5E5E5E;"># Specify the destination path for saving model files</span></span>
<span id="cb13-2">model_path <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">"./outputs/models"</span></span>
<span id="cb13-3"></span>
<span id="cb13-4"><span class="co" style="color: #5E5E5E;"># Start an MLflow run</span></span>
<span id="cb13-5"><span class="cf" style="color: #003B4F;">with</span> mlflow.start_run():</span>
<span id="cb13-6">    <span class="co" style="color: #5E5E5E;"># Set a tag for the developer</span></span>
<span id="cb13-7">    mlflow.set_tag(<span class="st" style="color: #20794D;">"developer"</span>, <span class="st" style="color: #20794D;">"Sagar"</span>)</span>
<span id="cb13-8"></span>
<span id="cb13-9">    <span class="co" style="color: #5E5E5E;"># Initialize and train a LinearRegression model</span></span>
<span id="cb13-10">    lr <span class="op" style="color: #5E5E5E;">=</span> LinearRegression()</span>
<span id="cb13-11">    lr.fit(X_train, y_train)</span>
<span id="cb13-12"></span>
<span id="cb13-13">    <span class="co" style="color: #5E5E5E;"># Make predictions on the validation data</span></span>
<span id="cb13-14">    yhat <span class="op" style="color: #5E5E5E;">=</span> lr.predict(X_val)</span>
<span id="cb13-15"></span>
<span id="cb13-16">    <span class="co" style="color: #5E5E5E;"># Calculate the root mean squared error (RMSE)</span></span>
<span id="cb13-17">    rmse <span class="op" style="color: #5E5E5E;">=</span> mean_squared_error(y_val, yhat, squared<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">False</span>)</span>
<span id="cb13-18"></span>
<span id="cb13-19">    <span class="co" style="color: #5E5E5E;"># Log the RMSE metric to MLflow</span></span>
<span id="cb13-20">    mlflow.log_metric(<span class="st" style="color: #20794D;">"rmse"</span>, rmse)</span>
<span id="cb13-21"></span>
<span id="cb13-22">    <span class="co" style="color: #5E5E5E;"># Create dest_path folder unless it already exists</span></span>
<span id="cb13-23">    os.makedirs(model_path, exist_ok<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>)</span>
<span id="cb13-24"></span>
<span id="cb13-25">    <span class="co" style="color: #5E5E5E;"># Save the trained model as a pickle file</span></span>
<span id="cb13-26">    dump_pickle(lr, os.path.join(model_path, <span class="st" style="color: #20794D;">"lin_reg.pkl"</span>))</span>
<span id="cb13-27"></span>
<span id="cb13-28">    <span class="co" style="color: #5E5E5E;"># Log the trained model as an artifact to MLflow</span></span>
<span id="cb13-29">    mlflow.log_artifact(local_path<span class="op" style="color: #5E5E5E;">=</span><span class="ss" style="color: #20794D;">f"</span><span class="sc" style="color: #5E5E5E;">{</span>model_path<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">/lin_reg.pkl"</span>, artifact_path<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"models_pickle"</span>)</span></code></pre></div>
</div>
<p>After running an experiment run, go to your MLflow UI and there you can see an entry of the run. If you click on the run you have observer other details associated with the run such as <code>Metrics</code>, <code>Tags</code>, <code>Artifacts</code>. In the <code>Artifacts</code> section you can see the <code>model_pickle</code> folder which contains the model file. You can download the model file from there and use it for prediction.</p>
<div class="callout-tip callout callout-style-default callout-captioned">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-caption-container flex-fill">
Tip
</div>
</div>
<div class="callout-body-container callout-body">
<p>If you don’t see your run on the UI, you can refresh using <code>Refresh</code> button on the right side of the page above the table.</p>
</div>
</div>
<p><img src="https://sagarthacker.com/posts/mlops/images/linear_reg.png" class="img-fluid"></p>
<p><img src="https://sagarthacker.com/posts/mlops/images/lr_exp.png" class="img-fluid"></p>
<p>Voila 🎉! You have successfully trained a Linear Regression model and tracked the experiment using MLflow. You can find the complete code.</p>
</section>
<section id="traing-a-lasso-regression-model" class="level3">
<h3 class="anchored" data-anchor-id="traing-a-lasso-regression-model">Traing a Lasso Regression Model</h3>
<div class="cell" data-execution_count="15">
<div class="sourceCode cell-code" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb14-1"><span class="co" style="color: #5E5E5E;"># Specify the destination path for saving model files</span></span>
<span id="cb14-2">model_path <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">"./outputs/models"</span></span>
<span id="cb14-3"></span>
<span id="cb14-4"><span class="co" style="color: #5E5E5E;"># Start an MLflow run</span></span>
<span id="cb14-5"><span class="cf" style="color: #003B4F;">with</span> mlflow.start_run():</span>
<span id="cb14-6">    <span class="co" style="color: #5E5E5E;"># Set a tag for the developer</span></span>
<span id="cb14-7">    mlflow.set_tag(<span class="st" style="color: #20794D;">"developer"</span>, <span class="st" style="color: #20794D;">"Sagar"</span>)</span>
<span id="cb14-8"></span>
<span id="cb14-9">    <span class="co" style="color: #5E5E5E;"># Set the value for the regularization parameter (alpha)</span></span>
<span id="cb14-10">    alpha <span class="op" style="color: #5E5E5E;">=</span> <span class="fl" style="color: #AD0000;">0.1</span></span>
<span id="cb14-11"></span>
<span id="cb14-12">    <span class="co" style="color: #5E5E5E;"># Log the regularization parameter (alpha) as a parameter in MLflow</span></span>
<span id="cb14-13">    mlflow.log_param(<span class="st" style="color: #20794D;">"alpha"</span>, alpha)</span>
<span id="cb14-14"></span>
<span id="cb14-15">    <span class="co" style="color: #5E5E5E;"># Initialize and train a Lasso Regression model</span></span>
<span id="cb14-16">    lasso <span class="op" style="color: #5E5E5E;">=</span> Lasso(alpha<span class="op" style="color: #5E5E5E;">=</span>alpha)</span>
<span id="cb14-17">    lasso.fit(X_train, y_train)</span>
<span id="cb14-18"></span>
<span id="cb14-19">    <span class="co" style="color: #5E5E5E;"># Make predictions on the validation data</span></span>
<span id="cb14-20">    yhat <span class="op" style="color: #5E5E5E;">=</span> lasso.predict(X_val)</span>
<span id="cb14-21"></span>
<span id="cb14-22">    <span class="co" style="color: #5E5E5E;"># Calculate the root mean squared error (RMSE)</span></span>
<span id="cb14-23">    rmse <span class="op" style="color: #5E5E5E;">=</span> mean_squared_error(y_val, yhat, squared<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">False</span>)</span>
<span id="cb14-24"></span>
<span id="cb14-25">    <span class="co" style="color: #5E5E5E;"># Log the RMSE metric to MLflow</span></span>
<span id="cb14-26">    mlflow.log_metric(<span class="st" style="color: #20794D;">"rmse"</span>, rmse)</span>
<span id="cb14-27"></span>
<span id="cb14-28">    <span class="co" style="color: #5E5E5E;"># Create the destination folder for saving model files if it doesn't exist</span></span>
<span id="cb14-29">    os.makedirs(model_path, exist_ok<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>)</span>
<span id="cb14-30"></span>
<span id="cb14-31">    <span class="co" style="color: #5E5E5E;"># Save the trained Lasso Regression model as a pickle file</span></span>
<span id="cb14-32">    dump_pickle(lr, os.path.join(model_path, <span class="st" style="color: #20794D;">"lasso_reg.pkl"</span>))</span>
<span id="cb14-33"></span>
<span id="cb14-34">    <span class="co" style="color: #5E5E5E;"># Log the trained model as an artifact to MLflow</span></span>
<span id="cb14-35">    mlflow.log_artifact(local_path<span class="op" style="color: #5E5E5E;">=</span><span class="ss" style="color: #20794D;">f"</span><span class="sc" style="color: #5E5E5E;">{</span>model_path<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">/lasso_reg.pkl"</span>, artifact_path<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"models_pickle"</span>)</span></code></pre></div>
</div>
<p>Similar to Linear Regression, we can train a Lasso Regression model and track the experiment using MLflow.</p>
</section>
</section>
<section id="hyperparameter-tuning" class="level2">
<h2 class="anchored" data-anchor-id="hyperparameter-tuning">Hyperparameter Tuning</h2>
<p>Tools such as MLflow shine when it comes to hyperparameter tuning and model selection. Let’s see how we can leverage MLflow to tune the hyperparameters of our model.</p>
<p>We’ll setup a new experiment for hyperparameter tuning and use MLflow to track the results. We’ll use <code>Hyperopt</code> and <code>Optuna</code> libraries for hyperparameter tuning.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb15-1"><span class="co" style="color: #5E5E5E;"># Create a new experiment</span></span>
<span id="cb15-2">mlflow.set_experiment(<span class="st" style="color: #20794D;">"random-forest-hyperopt"</span>)</span></code></pre></div>
</div>
<div class="cell" data-execution_count="21">
<div class="sourceCode cell-code" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb16-1"><span class="kw" style="color: #003B4F;">def</span> run_optimization(num_trials: <span class="bu" style="color: null;">int</span> <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">10</span>):</span>
<span id="cb16-2">    <span class="co" style="color: #5E5E5E;">"""</span></span>
<span id="cb16-3"><span class="co" style="color: #5E5E5E;">    Runs the optimization process using Optuna library to find the optimal hyperparameters for RandomForestRegressor.</span></span>
<span id="cb16-4"></span>
<span id="cb16-5"><span class="co" style="color: #5E5E5E;">    Parameters:</span></span>
<span id="cb16-6"><span class="co" style="color: #5E5E5E;">        num_trials (int): The number of optimization trials to perform. Default is 10.</span></span>
<span id="cb16-7"></span>
<span id="cb16-8"><span class="co" style="color: #5E5E5E;">    Returns:</span></span>
<span id="cb16-9"><span class="co" style="color: #5E5E5E;">        None</span></span>
<span id="cb16-10"></span>
<span id="cb16-11"><span class="co" style="color: #5E5E5E;">    Notes:</span></span>
<span id="cb16-12"><span class="co" style="color: #5E5E5E;">        - The function defines an objective function for Optuna to minimize the root mean squared error (RMSE).</span></span>
<span id="cb16-13"><span class="co" style="color: #5E5E5E;">        - The objective function samples hyperparameters, trains a RandomForestRegressor model with those hyperparameters,</span></span>
<span id="cb16-14"><span class="co" style="color: #5E5E5E;">          evaluates the model on the validation data, and logs the RMSE metric to MLflow.</span></span>
<span id="cb16-15"><span class="co" style="color: #5E5E5E;">        - Optuna performs the optimization process by searching for the set of hyperparameters that minimizes the RMSE.</span></span>
<span id="cb16-16"><span class="co" style="color: #5E5E5E;">    """</span></span>
<span id="cb16-17"></span>
<span id="cb16-18">    <span class="kw" style="color: #003B4F;">def</span> objective(trial):</span>
<span id="cb16-19">        <span class="co" style="color: #5E5E5E;">"""</span></span>
<span id="cb16-20"><span class="co" style="color: #5E5E5E;">        Objective function for Optuna optimization.</span></span>
<span id="cb16-21"></span>
<span id="cb16-22"><span class="co" style="color: #5E5E5E;">        Parameters:</span></span>
<span id="cb16-23"><span class="co" style="color: #5E5E5E;">            trial (optuna.Trial): A trial object representing a single optimization trial.</span></span>
<span id="cb16-24"></span>
<span id="cb16-25"><span class="co" style="color: #5E5E5E;">        Returns:</span></span>
<span id="cb16-26"><span class="co" style="color: #5E5E5E;">            float: The value of the objective function (RMSE).</span></span>
<span id="cb16-27"></span>
<span id="cb16-28"><span class="co" style="color: #5E5E5E;">        Notes:</span></span>
<span id="cb16-29"><span class="co" style="color: #5E5E5E;">            - The objective function samples hyperparameters from the defined search space.</span></span>
<span id="cb16-30"><span class="co" style="color: #5E5E5E;">            - It initializes and trains a RandomForestRegressor model with the sampled hyperparameters.</span></span>
<span id="cb16-31"><span class="co" style="color: #5E5E5E;">            - The model is evaluated on the validation data, and the RMSE is calculated.</span></span>
<span id="cb16-32"><span class="co" style="color: #5E5E5E;">            - The RMSE and the sampled hyperparameters are logged to MLflow.</span></span>
<span id="cb16-33"><span class="co" style="color: #5E5E5E;">        """</span></span>
<span id="cb16-34">        params <span class="op" style="color: #5E5E5E;">=</span> {</span>
<span id="cb16-35">            <span class="st" style="color: #20794D;">'n_estimators'</span>: trial.suggest_int(<span class="st" style="color: #20794D;">'n_estimators'</span>, <span class="dv" style="color: #AD0000;">10</span>, <span class="dv" style="color: #AD0000;">50</span>, <span class="dv" style="color: #AD0000;">1</span>),</span>
<span id="cb16-36">            <span class="st" style="color: #20794D;">'max_depth'</span>: trial.suggest_int(<span class="st" style="color: #20794D;">'max_depth'</span>, <span class="dv" style="color: #AD0000;">1</span>, <span class="dv" style="color: #AD0000;">20</span>, <span class="dv" style="color: #AD0000;">1</span>),</span>
<span id="cb16-37">            <span class="st" style="color: #20794D;">'min_samples_split'</span>: trial.suggest_int(<span class="st" style="color: #20794D;">'min_samples_split'</span>, <span class="dv" style="color: #AD0000;">2</span>, <span class="dv" style="color: #AD0000;">10</span>, <span class="dv" style="color: #AD0000;">1</span>),</span>
<span id="cb16-38">            <span class="st" style="color: #20794D;">'min_samples_leaf'</span>: trial.suggest_int(<span class="st" style="color: #20794D;">'min_samples_leaf'</span>, <span class="dv" style="color: #AD0000;">1</span>, <span class="dv" style="color: #AD0000;">4</span>, <span class="dv" style="color: #AD0000;">1</span>),</span>
<span id="cb16-39">            <span class="st" style="color: #20794D;">'random_state'</span>: <span class="dv" style="color: #AD0000;">42</span>,</span>
<span id="cb16-40">            <span class="st" style="color: #20794D;">'n_jobs'</span>: <span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">1</span></span>
<span id="cb16-41">        }</span>
<span id="cb16-42">        </span>
<span id="cb16-43">        <span class="co" style="color: #5E5E5E;"># Start a new MLflow run for each trial</span></span>
<span id="cb16-44">        <span class="cf" style="color: #003B4F;">with</span> mlflow.start_run():</span>
<span id="cb16-45">            <span class="co" style="color: #5E5E5E;"># Set a tag for the model type</span></span>
<span id="cb16-46">            mlflow.set_tag(<span class="st" style="color: #20794D;">"model"</span>, <span class="st" style="color: #20794D;">"RandomForestRegressor"</span>)</span>
<span id="cb16-47">            </span>
<span id="cb16-48">            <span class="co" style="color: #5E5E5E;"># Log the sampled hyperparameters to MLflow</span></span>
<span id="cb16-49">            mlflow.log_params(params)</span>
<span id="cb16-50"></span>
<span id="cb16-51">            <span class="co" style="color: #5E5E5E;"># Initialize a RandomForestRegressor model with the sampled hyperparameters</span></span>
<span id="cb16-52">            rf <span class="op" style="color: #5E5E5E;">=</span> RandomForestRegressor(<span class="op" style="color: #5E5E5E;">**</span>params)</span>
<span id="cb16-53"></span>
<span id="cb16-54">            <span class="co" style="color: #5E5E5E;"># Train the model on the training data</span></span>
<span id="cb16-55">            rf.fit(X_train, y_train)</span>
<span id="cb16-56"></span>
<span id="cb16-57">            <span class="co" style="color: #5E5E5E;"># Make predictions on the validation data</span></span>
<span id="cb16-58">            y_pred <span class="op" style="color: #5E5E5E;">=</span> rf.predict(X_val)</span>
<span id="cb16-59"></span>
<span id="cb16-60">            <span class="co" style="color: #5E5E5E;"># Calculate the root mean squared error (RMSE)</span></span>
<span id="cb16-61">            rmse <span class="op" style="color: #5E5E5E;">=</span> mean_squared_error(y_val, y_pred, squared<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">False</span>)</span>
<span id="cb16-62"></span>
<span id="cb16-63">            <span class="co" style="color: #5E5E5E;"># Log the RMSE metric to MLflow</span></span>
<span id="cb16-64">            mlflow.log_metric(<span class="st" style="color: #20794D;">"rmse"</span>, rmse)</span>
<span id="cb16-65"></span>
<span id="cb16-66">        <span class="cf" style="color: #003B4F;">return</span> rmse</span>
<span id="cb16-67"></span>
<span id="cb16-68">    <span class="co" style="color: #5E5E5E;"># Use the Tree-structured Parzen Estimator (TPE) sampler for efficient hyperparameter search</span></span>
<span id="cb16-69">    sampler <span class="op" style="color: #5E5E5E;">=</span> TPESampler(seed<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">42</span>)</span>
<span id="cb16-70"></span>
<span id="cb16-71">    <span class="co" style="color: #5E5E5E;"># Create an Optuna study with the defined objective function and search direction</span></span>
<span id="cb16-72">    study <span class="op" style="color: #5E5E5E;">=</span> optuna.create_study(direction<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"minimize"</span>, sampler<span class="op" style="color: #5E5E5E;">=</span>sampler)</span>
<span id="cb16-73"></span>
<span id="cb16-74">    <span class="co" style="color: #5E5E5E;"># Run the optimization process with the specified number of trials</span></span>
<span id="cb16-75">    study.optimize(objective, n_trials<span class="op" style="color: #5E5E5E;">=</span>num_trials)</span>
<span id="cb16-76"></span>
<span id="cb16-77">run_optimization()</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>[I 2023-05-26 12:23:03,233] A new study created in memory with name: no-name-19f4f970-eafc-402c-89b3-2aa461ab17fc
[I 2023-05-26 12:23:04,744] Trial 0 finished with value: 6.012747224033297 and parameters: {'n_estimators': 25, 'max_depth': 20, 'min_samples_split': 8, 'min_samples_leaf': 3}. Best is trial 0 with value: 6.012747224033297.
[I 2023-05-26 12:23:04,872] Trial 1 finished with value: 6.249433998787504 and parameters: {'n_estimators': 16, 'max_depth': 4, 'min_samples_split': 2, 'min_samples_leaf': 4}. Best is trial 0 with value: 6.012747224033297.
[I 2023-05-26 12:23:06,223] Trial 2 finished with value: 6.039045655830305 and parameters: {'n_estimators': 34, 'max_depth': 15, 'min_samples_split': 2, 'min_samples_leaf': 4}. Best is trial 0 with value: 6.012747224033297.
[I 2023-05-26 12:23:06,636] Trial 3 finished with value: 6.179387143797025 and parameters: {'n_estimators': 44, 'max_depth': 5, 'min_samples_split': 3, 'min_samples_leaf': 1}. Best is trial 0 with value: 6.012747224033297.
[I 2023-05-26 12:23:07,140] Trial 4 finished with value: 6.075505898039151 and parameters: {'n_estimators': 22, 'max_depth': 11, 'min_samples_split': 5, 'min_samples_leaf': 2}. Best is trial 0 with value: 6.012747224033297.
[I 2023-05-26 12:23:07,316] Trial 5 finished with value: 6.441117537172997 and parameters: {'n_estimators': 35, 'max_depth': 3, 'min_samples_split': 4, 'min_samples_leaf': 2}. Best is trial 0 with value: 6.012747224033297.
[I 2023-05-26 12:23:08,432] Trial 6 finished with value: 6.0285791267371165 and parameters: {'n_estimators': 28, 'max_depth': 16, 'min_samples_split': 3, 'min_samples_leaf': 3}. Best is trial 0 with value: 6.012747224033297.
[I 2023-05-26 12:23:08,532] Trial 7 finished with value: 7.881244954282265 and parameters: {'n_estimators': 34, 'max_depth': 1, 'min_samples_split': 7, 'min_samples_leaf': 1}. Best is trial 0 with value: 6.012747224033297.
[I 2023-05-26 12:23:09,146] Trial 8 finished with value: 6.025608014492215 and parameters: {'n_estimators': 12, 'max_depth': 19, 'min_samples_split': 10, 'min_samples_leaf': 4}. Best is trial 0 with value: 6.012747224033297.
[I 2023-05-26 12:23:09,239] Trial 9 finished with value: 7.071070856187059 and parameters: {'n_estimators': 22, 'max_depth': 2, 'min_samples_split': 8, 'min_samples_leaf': 2}. Best is trial 0 with value: 6.012747224033297.</code></pre>
</div>
</div>
<p>After running the experiment, you can see the results in the MLflow UI. You can also select multiple runs and compare them using the <code>Compare</code> button on the top left corner of the table.</p>
<p><img src="https://sagarthacker.com/posts/mlops/images/hyperparameter_rf.png" class="img-fluid"></p>
<p><img src="https://sagarthacker.com/posts/mlops/images/compare_results.png" class="img-fluid"></p>
<ul>
<li>One of the most interesting plot in the MLflow UI is the <code>Parallel Coordinates Plot</code>. It allows you to visualize the relationship between the hyperparameters and the metrics.</li>
<li><code>Scatter plot</code> allows you to visualize the relationship between a single hyperparameter and the metric.</li>
<li><code>Box Plot</code> are similar to scatter plot in terms of visualization.</li>
<li><code>Contour Plot</code> allows you to visualize the relationship between two hyperparameters and the metric.</li>
</ul>
<p>Apart from the visualizations, they also provide more information of the <code>Run Duration</code>, <code>Parameters</code>, <code>Metrics</code> and <code>Tags</code> associated with the run in a tabular format to compare the runs.</p>
</section>
<section id="model-registry" class="level2">
<h2 class="anchored" data-anchor-id="model-registry">Model Registry</h2>
<p>MLflow Model Registry is a centralized model store, set of APIs, and UI, to collaboratively manage the full lifecycle of an MLflow Model. It provides model lineage (which MLflow Experiment and Run produced the model), model versioning, stage transitions (for example from staging to production), annotations, and other functionality to track the model lifecycle.</p>
<p>From our example above for hyperparameter tuning, we can register the best model which performs well on the test dataset.</p>
<p>To interact with an MLflow Tracking Server and an MLflow Registry Server, we utilize the Client class. It allows us to create and manage experiments and runs in the Tracking Server, as well as create and manage registered models and model versions in the Registry Server. The mlflow.client module offers a Python interface for performing CRUD operations on MLflow Experiments, Runs, Model Versions, and Registered Models. It serves as a lower-level API that directly corresponds to MLflow’s REST API calls.</p>
<p>More information about the MLflow Client can be found <a href="https://mlflow.org/docs/latest/python_api/mlflow.client.html">here</a>.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb18-1"><span class="co" style="color: #5E5E5E;"># Hyperparameter optimization experiment name</span></span>
<span id="cb18-2">HPO_EXPERIMENT_NAME <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">"random-forest-hyperopt"</span></span>
<span id="cb18-3"></span>
<span id="cb18-4"><span class="co" style="color: #5E5E5E;"># Best model experiment name</span></span>
<span id="cb18-5">EXPERIMENT_NAME <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">"random-forest-best-models"</span></span>
<span id="cb18-6"></span>
<span id="cb18-7"><span class="co" style="color: #5E5E5E;"># Create a new experiment for the best models</span></span>
<span id="cb18-8">mlflow.set_experiment(EXPERIMENT_NAME)</span></code></pre></div>
</div>
<div class="cell" data-execution_count="27">
<div class="sourceCode cell-code" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb19-1"><span class="co" style="color: #5E5E5E;"># Automatically log parameters and metrics</span></span>
<span id="cb19-2">mlflow.sklearn.autolog()</span></code></pre></div>
</div>
<div class="cell" data-execution_count="23">
<div class="sourceCode cell-code" id="cb20" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb20-1"><span class="co" style="color: #5E5E5E;"># RandomForest Parameters</span></span>
<span id="cb20-2">RF_PARAMS <span class="op" style="color: #5E5E5E;">=</span> [<span class="st" style="color: #20794D;">'max_depth'</span>, <span class="st" style="color: #20794D;">'n_estimators'</span>, <span class="st" style="color: #20794D;">'min_samples_split'</span>,</span>
<span id="cb20-3">             <span class="st" style="color: #20794D;">'min_samples_leaf'</span>, <span class="st" style="color: #20794D;">'random_state'</span>, <span class="st" style="color: #20794D;">'n_jobs'</span>]</span></code></pre></div>
</div>
<div class="cell" data-execution_count="25">
<div class="sourceCode cell-code" id="cb21" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb21-1"><span class="kw" style="color: #003B4F;">def</span> train_and_log_model(params):</span>
<span id="cb21-2">    <span class="co" style="color: #5E5E5E;">"""</span></span>
<span id="cb21-3"><span class="co" style="color: #5E5E5E;">    Trains a RandomForestRegressor model with the given hyperparameters and logs evaluation metrics to MLflow.</span></span>
<span id="cb21-4"></span>
<span id="cb21-5"><span class="co" style="color: #5E5E5E;">    Parameters:</span></span>
<span id="cb21-6"><span class="co" style="color: #5E5E5E;">        params (dict): Dictionary of hyperparameters for RandomForestRegressor.</span></span>
<span id="cb21-7"></span>
<span id="cb21-8"><span class="co" style="color: #5E5E5E;">    Returns:</span></span>
<span id="cb21-9"><span class="co" style="color: #5E5E5E;">        None</span></span>
<span id="cb21-10"></span>
<span id="cb21-11"><span class="co" style="color: #5E5E5E;">    Notes:</span></span>
<span id="cb21-12"><span class="co" style="color: #5E5E5E;">        - The function starts an MLflow run to track the model training and evaluation process.</span></span>
<span id="cb21-13"><span class="co" style="color: #5E5E5E;">        - It converts certain hyperparameters to integers.</span></span>
<span id="cb21-14"><span class="co" style="color: #5E5E5E;">        - A RandomForestRegressor model is initialized with the provided hyperparameters.</span></span>
<span id="cb21-15"><span class="co" style="color: #5E5E5E;">        - The model is trained on the training data.</span></span>
<span id="cb21-16"><span class="co" style="color: #5E5E5E;">        - The trained model is evaluated on the validation and test sets, and the root mean squared error (RMSE) is calculated and logged to MLflow as evaluation metrics.</span></span>
<span id="cb21-17"><span class="co" style="color: #5E5E5E;">    """</span></span>
<span id="cb21-18"></span>
<span id="cb21-19">    <span class="cf" style="color: #003B4F;">with</span> mlflow.start_run():</span>
<span id="cb21-20">        <span class="co" style="color: #5E5E5E;"># Convert specific hyperparameters to integers</span></span>
<span id="cb21-21">        <span class="cf" style="color: #003B4F;">for</span> param <span class="kw" style="color: #003B4F;">in</span> RF_PARAMS:</span>
<span id="cb21-22">            params[param] <span class="op" style="color: #5E5E5E;">=</span> <span class="bu" style="color: null;">int</span>(params[param])</span>
<span id="cb21-23"></span>
<span id="cb21-24">        <span class="co" style="color: #5E5E5E;"># Initialize a RandomForestRegressor model with the given hyperparameters</span></span>
<span id="cb21-25">        rf <span class="op" style="color: #5E5E5E;">=</span> RandomForestRegressor(<span class="op" style="color: #5E5E5E;">**</span>params)</span>
<span id="cb21-26"></span>
<span id="cb21-27">        <span class="co" style="color: #5E5E5E;"># Train the model on the training data</span></span>
<span id="cb21-28">        rf.fit(X_train, y_train)</span>
<span id="cb21-29"></span>
<span id="cb21-30">        <span class="co" style="color: #5E5E5E;"># Evaluate the trained model on the validation set</span></span>
<span id="cb21-31">        val_rmse <span class="op" style="color: #5E5E5E;">=</span> mean_squared_error(y_val, rf.predict(X_val), squared<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">False</span>)</span>
<span id="cb21-32"></span>
<span id="cb21-33">        <span class="co" style="color: #5E5E5E;"># Log the validation RMSE metric to MLflow</span></span>
<span id="cb21-34">        mlflow.log_metric(<span class="st" style="color: #20794D;">"val_rmse"</span>, val_rmse)</span>
<span id="cb21-35"></span>
<span id="cb21-36">        <span class="co" style="color: #5E5E5E;"># Evaluate the trained model on the test set</span></span>
<span id="cb21-37">        test_rmse <span class="op" style="color: #5E5E5E;">=</span> mean_squared_error(y_test, rf.predict(X_test), squared<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">False</span>)</span>
<span id="cb21-38"></span>
<span id="cb21-39">        <span class="co" style="color: #5E5E5E;"># Log the test RMSE metric to MLflow</span></span>
<span id="cb21-40">        mlflow.log_metric(<span class="st" style="color: #20794D;">"test_rmse"</span>, test_rmse)</span></code></pre></div>
</div>
<div class="cell" data-execution_count="26">
<div class="sourceCode cell-code" id="cb22" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb22-1"><span class="kw" style="color: #003B4F;">def</span> run_register_model(top_n: <span class="bu" style="color: null;">int</span>):</span>
<span id="cb22-2">    <span class="co" style="color: #5E5E5E;">"""</span></span>
<span id="cb22-3"><span class="co" style="color: #5E5E5E;">    Runs the process to register the best model based on the top_n model runs with the lowest test RMSE.</span></span>
<span id="cb22-4"></span>
<span id="cb22-5"><span class="co" style="color: #5E5E5E;">    Parameters:</span></span>
<span id="cb22-6"><span class="co" style="color: #5E5E5E;">        top_n (int): The number of top model runs to consider.</span></span>
<span id="cb22-7"></span>
<span id="cb22-8"><span class="co" style="color: #5E5E5E;">    Returns:</span></span>
<span id="cb22-9"><span class="co" style="color: #5E5E5E;">        None</span></span>
<span id="cb22-10"></span>
<span id="cb22-11"><span class="co" style="color: #5E5E5E;">    Notes:</span></span>
<span id="cb22-12"><span class="co" style="color: #5E5E5E;">        - The function interacts with the MLflow tracking server to retrieve and register models.</span></span>
<span id="cb22-13"><span class="co" style="color: #5E5E5E;">        - It retrieves the top_n model runs based on the lowest validation RMSE.</span></span>
<span id="cb22-14"><span class="co" style="color: #5E5E5E;">        - For each run, it trains a model using the hyperparameters from the run and logs evaluation metrics to MLflow.</span></span>
<span id="cb22-15"><span class="co" style="color: #5E5E5E;">        - After evaluating the models, it selects the one with the lowest test RMSE.</span></span>
<span id="cb22-16"><span class="co" style="color: #5E5E5E;">        - The selected model is registered with a specified name in MLflow.</span></span>
<span id="cb22-17"><span class="co" style="color: #5E5E5E;">    """</span></span>
<span id="cb22-18"></span>
<span id="cb22-19">    <span class="co" style="color: #5E5E5E;"># Connect to the MLflow tracking server</span></span>
<span id="cb22-20">    client <span class="op" style="color: #5E5E5E;">=</span> MlflowClient()</span>
<span id="cb22-21"></span>
<span id="cb22-22">    <span class="co" style="color: #5E5E5E;"># Retrieve the top_n model runs and log the models</span></span>
<span id="cb22-23">    experiment <span class="op" style="color: #5E5E5E;">=</span> client.get_experiment_by_name(HPO_EXPERIMENT_NAME)</span>
<span id="cb22-24"></span>
<span id="cb22-25">    <span class="co" style="color: #5E5E5E;"># Retrieve the top_n model runs based on the lowest validation RMSE</span></span>
<span id="cb22-26">    runs <span class="op" style="color: #5E5E5E;">=</span> client.search_runs(</span>
<span id="cb22-27">        experiment_ids<span class="op" style="color: #5E5E5E;">=</span>experiment.experiment_id,</span>
<span id="cb22-28">        run_view_type<span class="op" style="color: #5E5E5E;">=</span>ViewType.ACTIVE_ONLY,</span>
<span id="cb22-29">        max_results<span class="op" style="color: #5E5E5E;">=</span>top_n,</span>
<span id="cb22-30">        order_by<span class="op" style="color: #5E5E5E;">=</span>[<span class="st" style="color: #20794D;">"metrics.rmse ASC"</span>]</span>
<span id="cb22-31">    )</span>
<span id="cb22-32"></span>
<span id="cb22-33">    <span class="co" style="color: #5E5E5E;"># Train and log the model for each run</span></span>
<span id="cb22-34">    <span class="cf" style="color: #003B4F;">for</span> run <span class="kw" style="color: #003B4F;">in</span> runs:</span>
<span id="cb22-35">        <span class="co" style="color: #5E5E5E;"># Train and log the model based on the hyperparameters from the run</span></span>
<span id="cb22-36">        train_and_log_model(params<span class="op" style="color: #5E5E5E;">=</span>run.data.params)</span>
<span id="cb22-37"></span>
<span id="cb22-38">    <span class="co" style="color: #5E5E5E;"># Select the model with the lowest test RMSE</span></span>
<span id="cb22-39">    experiment <span class="op" style="color: #5E5E5E;">=</span> client.get_experiment_by_name(EXPERIMENT_NAME)</span>
<span id="cb22-40"></span>
<span id="cb22-41">    <span class="co" style="color: #5E5E5E;"># Retrieve model runs based on the lowest test RMSE, and select the first run (with the lowest test RMSE)</span></span>
<span id="cb22-42">    best_run <span class="op" style="color: #5E5E5E;">=</span> client.search_runs(</span>
<span id="cb22-43">        experiment_ids<span class="op" style="color: #5E5E5E;">=</span>experiment.experiment_id,</span>
<span id="cb22-44">        run_view_type<span class="op" style="color: #5E5E5E;">=</span>ViewType.ACTIVE_ONLY,</span>
<span id="cb22-45">        order_by<span class="op" style="color: #5E5E5E;">=</span>[<span class="st" style="color: #20794D;">"metrics.test_rmse ASC"</span>]</span>
<span id="cb22-46">    )[<span class="dv" style="color: #AD0000;">0</span>]</span>
<span id="cb22-47"></span>
<span id="cb22-48">    <span class="co" style="color: #5E5E5E;"># Register the best model</span></span>
<span id="cb22-49">    model_uri <span class="op" style="color: #5E5E5E;">=</span> <span class="ss" style="color: #20794D;">f"runs:/</span><span class="sc" style="color: #5E5E5E;">{</span>best_run<span class="sc" style="color: #5E5E5E;">.</span>info<span class="sc" style="color: #5E5E5E;">.</span>run_id<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">/model"</span></span>
<span id="cb22-50"></span>
<span id="cb22-51">    <span class="co" style="color: #5E5E5E;"># Register the best model with a specified name</span></span>
<span id="cb22-52">    mlflow.register_model(</span>
<span id="cb22-53">        model_uri<span class="op" style="color: #5E5E5E;">=</span>model_uri,</span>
<span id="cb22-54">        name<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"random-forest-best-model"</span></span>
<span id="cb22-55">    )</span></code></pre></div>
</div>
<div class="cell" data-execution_count="29">
<div class="sourceCode cell-code" id="cb23" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb23-1"><span class="co" style="color: #5E5E5E;"># The number of top model runs to consider</span></span>
<span id="cb23-2">top_n <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">5</span></span>
<span id="cb23-3"></span>
<span id="cb23-4">run_register_model(top_n<span class="op" style="color: #5E5E5E;">=</span>top_n)</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>2023/05/26 13:27:30 WARNING mlflow.utils.autologging_utils: MLflow autologging encountered a warning: "/Users/wizard/Astronaut/Dev/MLOps/week2/venv/lib/python3.9/site-packages/_distutils_hack/__init__.py:33: UserWarning: Setuptools is replacing distutils."
Successfully registered model 'random-forest-best-model'.
2023/05/26 13:27:40 INFO mlflow.tracking._model_registry.client: Waiting up to 300 seconds for model version to finish creation. Model name: random-forest-best-model, version 1
Created version '1' of model 'random-forest-best-model'.</code></pre>
</div>
</div>
<p>By following the mentioned steps, a new experiment called random-forest-best-models will be created, displaying five runs. You may observe that each run provides additional information. This is due to the utilization of MLflow’s <strong>autologging</strong> feature.</p>
<p>Read more about autologging <a href="https://mlflow.org/docs/latest/tracking.html#automatic-logging">here</a></p>
<p>Autologging captures more parameters, metrics, and tags, and also saves the model as an artifact along with environment details. This feature proves particularly beneficial when you aim to reproduce the results. You have the option to download the model and environment details, enabling you to replicate the outcomes accurately.</p>
<p><img src="https://sagarthacker.com/posts/mlops/images/rf_test_runs.png" class="img-fluid"></p>
<p>Click on the run with the best model stored and access additional details about the run.</p>
<p><img src="https://sagarthacker.com/posts/mlops/images/best_test_run.png" class="img-fluid"></p>
<p>By clicking on the link to model registry in the above image, you will be redirected to the model registry page.</p>
<p><img src="https://sagarthacker.com/posts/mlops/images/best_model.png" class="img-fluid"></p>
<p>Another way to access the model registry is by clicking on the model registry tab on the left side of the MLflow UI. You will be able to see the model registry page with the best model registered.</p>
<p><img src="https://sagarthacker.com/posts/mlops/images/mlflow_model_section.png" class="img-fluid"></p>
<p>You also have an option to change the stage of the model to <code>Staging</code>, <code>Production</code>, or <code>Archived</code>. You can do this by clicking on the stage transition button on the right side of the model name.</p>
<p>In the MLflow ecosystem, the responsibility of determining which models are ready for production lies with the Data Scientist. Once a model is registered in the model registry, the Deployment Engineer can review important details such as the model’s parameters, size, and performance. Based on this information, they can make informed decisions on moving the model across different stages.</p>
<p>It’s important to note that the model registry itself does not handle the deployment of models. It serves as a centralized repository to list the models that are considered production-ready, with stages acting as labels. To complete the deployment process, it is recommended to complement the model registry with a CI/CD pipeline specifically designed for deploying models. This pipeline would handle the actual deployment process, incorporating the production-ready models identified in the model registry.</p>
<p><img src="https://sagarthacker.com/posts/mlops/images/change_stage.png" class="img-fluid"></p>
</section>
<section id="mlflow-limitations" class="level2">
<h2 class="anchored" data-anchor-id="mlflow-limitations">MLflow Limitations</h2>
<p>MLflow, while a powerful tool for experiment tracking and model management, has certain limitations to consider.</p>
<ul>
<li><strong>Authentication &amp; Users</strong>: It lacks built-in authentication and user management capabilities, making it less suitable for environments requiring strict access control.</li>
<li><strong>Data versioning</strong>: MLflow does not provide a native solution for data versioning, requiring alternative approaches.</li>
<li><strong>Model/Data Monitoring &amp; Alerting</strong>: Moreover, for model and data monitoring, as well as alerting, other specialized tools may be more appropriate.</li>
</ul>
</section>
<section id="alternatives-to-mlflow" class="level2">
<h2 class="anchored" data-anchor-id="alternatives-to-mlflow">Alternatives to MLflow</h2>
<ul>
<li><a href="https://neptune.ai/">Neptune.ai</a></li>
<li><a href="https://www.comet.com/site/">Comet</a></li>
<li><a href="https://wandb.ai/site">Weights &amp; Biases</a></li>
</ul>
<p>Congratulation 🎉! You have successfully trained ML model and tracked the experiment using MLflow.</p>
<p>Thank you for reading and I hope you found this notebook helpful. Upvote if you liked it, comment if you loved it. Hope to see you guys in the next one. Peace!</p>


</section>

 ]]></description>
  <category>MLOps</category>
  <category>MLflow</category>
  <guid>https://sagarthacker.com/posts/mlops/mlflow.html</guid>
  <pubDate>Sun, 28 May 2023 04:00:00 GMT</pubDate>
  <media:content url="https://sagarthacker.com/posts/mlops/images/mlflow_ui.png" medium="image" type="image/png" height="77" width="144"/>
</item>
<item>
  <title>AWS Instance Setup</title>
  <dc:creator>Sagar Thacker</dc:creator>
  <link>https://sagarthacker.com/posts/mlops/aws_setup.html</link>
  <description><![CDATA[ 




<p>Welcome to our blog post where we’ll guide you through setting up your AWS instance and installing all the necessary requirements for your work. We understand the importance of a smooth and efficient setup process, so we’ll provide step-by-step instructions to ensure you have everything you need to get started.</p>
<p>Let’s dive in and get your environment up and running seamlessly!</p>
<section id="setup-aws-instance" class="level2">
<h2 class="anchored" data-anchor-id="setup-aws-instance">Setup AWS Instance</h2>
<ol type="1">
<li>Go to <code>https://aws.amazon.com</code> to Sign in / Create an AWS Account.</li>
<li>To launch EC2 instance, click on to <code>services</code> on the left-top corner of the page. Select <code>Compute</code> and <code>EC2</code>.</li>
</ol>
<p><img src="https://sagarthacker.com/posts/mlops/images/find_ec2.png" class="img-fluid"></p>
<ol start="3" type="1">
<li>To launch a new instance, click on <code>Launch Instance</code>.</li>
</ol>
<p><img src="https://sagarthacker.com/posts/mlops/images/launch_instance.png" class="img-fluid"></p>
<ol start="4" type="1">
<li>Set any <code>Name</code> to the instance and select <code>Ubuntu</code> in the <code>Application and OS Images</code> section. Also, choose <code>Ubuntu Server 20.04 LTS (HVM), SSD Volume Type</code> as the Amazon Machine Image (AMI).</li>
</ol>
<p><img src="https://sagarthacker.com/posts/mlops/images/choose_os_image.png" class="img-fluid"></p>
<ol start="5" type="1">
<li>Select <code>t2.xlarge</code> as the Instance type for our instance. As 16GiB of memory should be ideal for our work.</li>
</ol>
<p><img src="https://sagarthacker.com/posts/mlops/images/choose_instance_type.png" class="img-fluid"></p>
<ol start="6" type="1">
<li>If you don’t already have a <code>Key pair</code>, you can create a new key pair. You would be asked to download and save your key pair.</li>
</ol>
<div class="callout-tip callout callout-style-default callout-captioned">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-caption-container flex-fill">
Tip
</div>
</div>
<div class="callout-body-container callout-body">
<p>Save your key pair at <code>~/.ssh/</code> folder.</p>
</div>
</div>
<p align="center">
<img src="https://sagarthacker.com/posts/mlops/images/setup_key_pair.png">
</p>
<ol start="7" type="1">
<li>Lastly, increase the storage to <code>30 GiB</code> as we would be working with large file and docker images with would consume some space.</li>
</ol>
<p><img src="https://sagarthacker.com/posts/mlops/images/choose_storage.png" class="img-fluid"></p>
<ol start="8" type="1">
<li>Click on <code>Launch Instance</code> to create and start the new instance.</li>
</ol>
</section>
<section id="connect-to-instance-via-ssh" class="level2">
<h2 class="anchored" data-anchor-id="connect-to-instance-via-ssh">Connect to Instance via SSH</h2>
<p>Once your instance is running, you can go to the instance summary page to checkout your <code>Public IPv4 address</code> which will be used to connect to the instance via ssh.</p>
<p>To check whether you can establish a connection to your instance:</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode numberSource {bash} number-lines code-with-copy"><code class="sourceCode"><span id="cb1-1">ssh -i ~/.ssh/mlops-zc-key.pem ubuntu@&lt;your-public-ipv4-address&gt;</span></code></pre></div>
<p>Eg. <code>ssh -i ~/.ssh/mlops-zc-key ubuntu@34.236.146.20</code></p>
<div class="callout-tip callout callout-style-default callout-captioned">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-caption-container flex-fill">
bad permissions error
</div>
</div>
<div class="callout-body-container callout-body">
<p>If you receive an error like:</p>
<p><strong>It is required that your private key files are NOT accessible by others. This private key will be ignored.</strong></p>
<p>Change the file permission using the command:</p>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode numberSource {sh} number-lines code-with-copy"><code class="sourceCode"><span id="cb2-1">chmod go-r ~/.ssh/mlops-zc-key.pem</span></code></pre></div>
</div>
</div>
<p>If asked about <em>“Are you sure you want to continue connecting (yes/no/[fingerprint])?”</em>, type <code>yes</code>.</p>
<p>Rather than manually entering the whole command, you can save the configurations at <code>~/.ssh/config</code> file. If you don’t already have an file name <code>config</code> in the <code>~/.ssh/</code> directory then go to your .ssh directory and use the command <code>touch config</code> to create the file.</p>
<p>To edit the file use the command <code>vim ~/.ssh/config</code>.</p>
<p>In the file add the following details:</p>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode numberSource {sh} number-lines code-with-copy"><code class="sourceCode"><span id="cb3-1">Host mlops-zoomcamp</span>
<span id="cb3-2">    HostName &lt;your-public-ipv4-address&gt;</span>
<span id="cb3-3">    User ubuntu</span>
<span id="cb3-4">    IdentityFile ~/.ssh/mlops-zc-key.pem</span></code></pre></div>
<div class="callout-caution callout callout-style-default callout-captioned">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-caption-container flex-fill">
Caution
</div>
</div>
<div class="callout-body-container callout-body">
<p>Every time you <strong>stop and start</strong> your instance you would have to edit the <code>config</code> file and change the <code>public ipv4 address</code> with the new ipv4 address.</p>
</div>
</div>
</section>
<section id="install-softwares" class="level2">
<h2 class="anchored" data-anchor-id="install-softwares">Install Softwares</h2>
<section id="python" class="level3">
<h3 class="anchored" data-anchor-id="python">Python</h3>
<ol type="1">
<li>Create a directory called <code>downloads</code> and move into the directory.</li>
</ol>
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode numberSource {sh} number-lines code-with-copy"><code class="sourceCode"><span id="cb4-1">mkdir downloads</span>
<span id="cb4-2">cd downloads</span></code></pre></div>
<ol start="2" type="1">
<li>Download and Install Anaconda</li>
</ol>
<div class="sourceCode" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode numberSource {sh} number-lines code-with-copy"><code class="sourceCode"><span id="cb5-1">wget https://repo.anaconda.com/archive/Anaconda3-2023.03-1-Linux-x86_64.sh</span>
<span id="cb5-2">bash Anaconda3-2023.03-1-Linux-x86_64.sh</span></code></pre></div>
<ol start="3" type="1">
<li>For the following prompts:</li>
</ol>
<div class="sourceCode" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode numberSource {sh} number-lines code-with-copy"><code class="sourceCode"><span id="cb6-1">Anaconda3 will now be installed into this location:</span>
<span id="cb6-2">/home/ubuntu/anaconda3</span></code></pre></div>
<p><code>Press Enter</code></p>
<div class="sourceCode" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode numberSource {sh} number-lines code-with-copy"><code class="sourceCode"><span id="cb7-1">Do you wish the installer to initialize Anaconda3</span>
<span id="cb7-2">by running conda init? [yes|no]</span>
<span id="cb7-3">[no] &gt;&gt;&gt;</span></code></pre></div>
<p>Type <code>yes</code></p>
<p>Python installed 🎉</p>
</section>
<section id="docker" class="level3">
<h3 class="anchored" data-anchor-id="docker">Docker</h3>
<ol type="1">
<li>Update packages using the command</li>
</ol>
<div class="sourceCode" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode numberSource {sh} number-lines code-with-copy"><code class="sourceCode"><span id="cb8-1">sudo apt update</span></code></pre></div>
<ol start="2" type="1">
<li>Install Docker</li>
</ol>
<div class="sourceCode" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode numberSource {sh} number-lines code-with-copy"><code class="sourceCode"><span id="cb9-1">sudo apt install docker.io</span></code></pre></div>
<ol start="3" type="1">
<li>Check docker is installed by running hello-world program in docker:</li>
</ol>
<div class="sourceCode" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode numberSource {sh} number-lines code-with-copy"><code class="sourceCode"><span id="cb10-1">sudo docker run hello-world</span></code></pre></div>
<p>We don’t want to use sudo everytime we run docker. To do that, create the docker group and add your user:</p>
<ol type="1">
<li>Create the docker group.</li>
</ol>
<div class="sourceCode" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode numberSource {sh} number-lines code-with-copy"><code class="sourceCode"><span id="cb11-1">sudo groupadd docker</span></code></pre></div>
<ol start="2" type="1">
<li>Add your user to the docker group.</li>
</ol>
<div class="sourceCode" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode numberSource {sh} number-lines code-with-copy"><code class="sourceCode"><span id="cb12-1">sudo usermod -aG docker $USER</span></code></pre></div>
<ol start="3" type="1">
<li>Log out and log back in so that your group membership is re-evaluated.</li>
</ol>
<div class="callout-note callout callout-style-default callout-captioned">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-caption-container flex-fill">
Note
</div>
</div>
<div class="callout-body-container callout-body">
<p>If you’re running Linux in a virtual machine, it may be necessary to restart the virtual machine for changes to take effect.</p>
</div>
</div>
<ul>
<li>To check if you can run docker without using sudo, use the command</li>
</ul>
<div class="sourceCode" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode numberSource {sh} number-lines code-with-copy"><code class="sourceCode"><span id="cb13-1">docker --help</span></code></pre></div>
<p>Docker installed 🎉</p>
</section>
<section id="docker-compose" class="level3">
<h3 class="anchored" data-anchor-id="docker-compose">docker-compose</h3>
<ol type="1">
<li>Move to the home directory. It will look like</li>
</ol>
<div class="sourceCode" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode numberSource {sh} number-lines code-with-copy"><code class="sourceCode"><span id="cb14-1">ubuntu@ip-172-31-19-228:~/downloads$ cd ..</span>
<span id="cb14-2">ubuntu@ip-172-31-19-228:~$ ls</span>
<span id="cb14-3">anaconda3 downloads</span></code></pre></div>
<ol start="2" type="1">
<li>Create a folder named <code>soft</code> and move into the folder.</li>
</ol>
<div class="sourceCode" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode numberSource {sh} number-lines code-with-copy"><code class="sourceCode"><span id="cb15-1">mkdir soft</span>
<span id="cb15-2">cd soft</span></code></pre></div>
<ol start="3" type="1">
<li>Download docker-compose and make the file executable</li>
</ol>
<div class="sourceCode" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode numberSource {sh} number-lines code-with-copy"><code class="sourceCode"><span id="cb16-1">wget https://github.com/docker/compose/releases/download/v2.18.1/docker-compose-linux-x86_64 -O docker-compose</span>
<span id="cb16-2"></span>
<span id="cb16-3">chmod +x docker-compose</span></code></pre></div>
<p>To access docker-compose from any location we need to add the PATH to the bashrc file. Again move to the home directory.</p>
<ol start="4" type="1">
<li>Open the <code>.bashrc</code> file using the command</li>
</ol>
<div class="sourceCode" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode numberSource {sh} number-lines code-with-copy"><code class="sourceCode"><span id="cb17-1">vim .bashrc</span></code></pre></div>
<ul>
<li>Move to the end of the file and press <code>i</code> to go into <code>Insert</code> Mode.</li>
<li>Add the following peice of code in the file.</li>
</ul>
<div class="sourceCode" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode numberSource {sh} number-lines code-with-copy"><code class="sourceCode"><span id="cb18-1">export PATH="${HOME}/soft:${PATH}"</span></code></pre></div>
<ul>
<li>Save and Exit the file:
<ol type="1">
<li>Press <code>esc</code> key</li>
<li>Type <code>:wq</code> and hit <code>enter</code></li>
</ol></li>
</ul>
<ol start="5" type="1">
<li>Run the command to execute the file:</li>
</ol>
<div class="sourceCode" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode numberSource {sh} number-lines code-with-copy"><code class="sourceCode"><span id="cb19-1">source .bashrc</span></code></pre></div>
<ul>
<li>Cross-check by typing <code>which docker-compose</code>. You’ll get the output as <code>/home/ubuntu/soft/docker-compose</code></li>
</ul>
<p>docker-compose installed 🎉</p>
<div class="callout-tip callout callout-style-default callout-captioned">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-caption-container flex-fill">
STOP EC2 instance
</div>
</div>
<div class="callout-body-container callout-body">
<p>Please remember to stop the EC2 instance after completing your work to avoid incurring any additional charges.</p>
</div>
</div>
<p>Thank you for reading and I hope you found this notebook helpful. Upvote if you liked it, comment if you loved it. Hope to see you guys in the next one. Peace!</p>


</section>
</section>

 ]]></description>
  <category>AWS</category>
  <guid>https://sagarthacker.com/posts/mlops/aws_setup.html</guid>
  <pubDate>Fri, 19 May 2023 04:00:00 GMT</pubDate>
  <media:content url="https://sagarthacker.com/posts/mlops/images/find_ec2.png" medium="image" type="image/png" height="80" width="144"/>
</item>
<item>
  <title>Introduction to MLOps</title>
  <dc:creator>Sagar Thacker</dc:creator>
  <link>https://sagarthacker.com/posts/mlops/introduction.html</link>
  <description><![CDATA[ 




<p>For as long as I can remember, Jupyter Notebooks have been my go-to tool for machine learning (ML) projects. When it comes to experimentation, prototyping, and data exploration, Jupyter Notebooks undoubtedly reign supreme. However, automating and operationalizing ML products presents a significant challenge.</p>
<p>That’s where MLOps (Machine Learning Operations) comes into play. MLOps refers to a set of practices aimed at fostering collaboration and communication between data scientists and operations professionals. It bridges the gap between ML development and deployment, streamlining the process and ensuring efficient and scalable ML product deployment.</p>
<p><img src="https://sagarthacker.com/posts/mlops/https:/i0.wp.com/neptune.ai/wp-content/uploads/2022/10/MLOps_cycle.jpg?ssl=1" class="img-fluid" alt="mlops_architecture"> Source: <a href="https://neptune.ai/blog/mlops">Neptune.ai</a></p>
<section id="drawbacks-on-working-with-jupyter-notebooks" class="level2">
<h2 class="anchored" data-anchor-id="drawbacks-on-working-with-jupyter-notebooks">Drawbacks on working with Jupyter Notebooks</h2>
<ul>
<li><p><strong>Lack of reproducibility</strong>: The flexibility to execute cells independently and out of order can make reproducing experiments challenging. It is crucial to carefully document the order of cell execution and ensure that all necessary cells are run to achieve reproducible results.</p></li>
<li><p><strong>Issues with version control</strong>: Jupyter Notebooks are not designed to work seamlessly with version control systems like Git. The JSON-based structure of notebooks makes it difficult to track changes, merge conflicts, and collaborate effectively when multiple team members are working on the same notebook simultaneously.</p></li>
<li><p><strong>Lack of scalability</strong>: Jupyter Notebooks may face limitations in dealing with large datasets or computationally demanding tasks. Due to their single kernel architecture, they may struggle with memory restrictions and long execution times when working with big data or complex machine learning models.</p></li>
<li><p><strong>Limited code organization</strong>: While Jupyter Notebooks allow for code organization using cells and sections, larger notebooks can become challenging to navigate and maintain. As the size of the notebook grows, it can be harder to find specific sections of code, leading to reduced code readability and maintainability.</p></li>
<li><p><strong>Performance limitations</strong>: Jupyter Notebooks excel in providing an interactive and exploratory environment, but they may not be the most performant option for computationally intensive tasks. For tasks requiring high-speed execution or efficient memory utilization, alternative tools like Python scripts or specialized frameworks may be more suitable.</p></li>
</ul>
</section>
<section id="devops-vs-mlops" class="level2">
<h2 class="anchored" data-anchor-id="devops-vs-mlops">DevOps vs MLOps</h2>
<p>DevOps principles have gained widespread acceptance in the software development industry due to their ability to integrate and automate software development and IT operations, leading to iterative improvements, fast feedback, collaboration, and automation. MLOps principles, derived from DevOps, aim to bring these best practices to the realm of machine learning and enable faster deployment of ML models into production.</p>
<p>However, there are notable differences in how MLOps operates compared to DevOps:</p>
<ul>
<li><p><strong>Experimental nature</strong>: MLOps involves extensive experimentation by data scientists and ML/DL engineers. They need to manage data and code to ensure reproducibility while experimenting with different features such as hyperparameters, parameters, and models. Reproducibility remains a challenge in the ML/DL sector, which sets it apart from the more deterministic nature of traditional software development in DevOps.</p></li>
<li><p><strong>Hybrid team composition</strong>: MLOps teams have a hybrid structure that includes data scientists or ML researchers alongside software engineers. While data scientists focus on experimentation, model development, and exploratory data analysis, they may lack the expertise of software engineers in building production-ready services. This combination of skill sets is essential for successfully deploying ML models in production. `</p></li>
<li><p><strong>Testing</strong>: Testing in MLOps goes beyond conventional code tests like unit testing and integration testing. It encompasses model validation, model training, and other specific tasks associated with testing an ML system. The unique challenges of testing ML models require specialized techniques and frameworks to ensure model accuracy and reliability.</p></li>
<li><p><strong>Automated deployment</strong>: Deploying an offline-trained ML model as a prediction service requires a multi-step pipeline in MLOps. Automating the tasks that data scientists manually perform before model deployment adds complexity to the process. It involves automating model retraining, validation, and deployment steps to ensure efficient and seamless deployment of updated models.</p></li>
<li><p><strong>Production performance degradation and Training-Serving Skew</strong>: ML models in production can experience reduced performance due to changing data profiles or suboptimal coding. Unlike traditional software systems, ML models are sensitive to changes in data and require monitoring and adaptation to maintain optimal performance. Training-Serving Skew refers to discrepancies between how data is handled in the training and serving pipelines, which can further impact model performance.</p></li>
<li><p><strong>Monitoring</strong>: Monitoring is essential for ML models in production. It involves tracking the performance of deployed models and monitoring the summary statistics of the data used to build the models. Monitoring helps identify deviations from expected values, triggering alerts or initiating a roll-back process when necessary. Since data profiles and statistics can change over time, ongoing monitoring is critical for maintaining model effectiveness.</p></li>
</ul>
</section>
<section id="mlops-principles" class="level2">
<h2 class="anchored" data-anchor-id="mlops-principles">MLOps Principles</h2>
<p>MLOps, which stands for Machine Learning Operations, encompasses a set of principles and practices aimed at streamlining the lifecycle of machine learning projects and promoting collaboration and communication between teams. Here are some key principles of MLOps:</p>
<ul>
<li><p><strong>Version control</strong>: Implementing version control systems, such as Git, enables tracking and management of changes to ML models, code, and data. It ensures reproducibility, facilitates collaboration and helps teams work together effectively.</p></li>
<li><p><strong>Continuous Integration and Continuous Deployment (CI/CD)</strong>: MLOps encourages the use of CI/CD pipelines for automating the build, testing, and deployment of ML models. This iterative approach enables fast feedback, reduces errors, and accelerates the development and deployment process.</p></li>
<li><p><strong>Infrastructure as Code (IaC)</strong>: MLOps embraces the concept of treating infrastructure as code using tools like Terraform or AWS CloudFormation. By defining infrastructure configurations using code, teams can easily manage and version control their cloud infrastructure. IaC enables reproducibility by providing a consistent and automated way to provision and manage resources in the cloud. It also facilitates scalability, allowing teams to easily scale up or down their infrastructure as needed, ensuring efficient and cost-effective deployments for ML models.</p></li>
<li><p><strong>Model Monitoring</strong>: Monitoring ML models in production is vital to detect performance issues, data drift, and anomalies. Dedicated monitoring tools help track model performance, identify deviations, and trigger alerts for timely updates and maintenance.</p></li>
<li><p><strong>Collaboration and Communication</strong>: Effective collaboration and communication between data scientists, engineers, and operations teams are critical in MLOps. Sharing knowledge, documenting processes, and fostering a collaborative culture enhance team productivity and ensure the successful delivery of ML projects.</p></li>
<li><p><strong>Automated Testing</strong>: Implementing automated testing frameworks ensures the quality and reliability of ML models. This includes unit tests, integration tests, and performance tests that validate model behavior and catch potential issues early in the development process.</p></li>
</ul>
<p><img src="https://sagarthacker.com/posts/mlops/https:/databaseline.tech/images/2020-02-21-ml-cicd-mlops-sig.png" class="img-fluid" alt="end-to-end-ml-project"> Source: <a href="https://www.kdnuggets.com/2020/07/tour-end-to-end-machine-learning-platforms.html">End-to-End Machine Learning Platforms By Ian Hellström</a></p>
</section>
<section id="mlops-maturity-model" class="level2">
<h2 class="anchored" data-anchor-id="mlops-maturity-model">MLOps maturity model</h2>
<p>The MLOps maturity model represents the level of proficiency and scalability in managing and operationalizing machine learning (ML) systems within an organization. It illustrates how effectively the company can develop, implement, monitor, and maintain ML models. The stages of MLOps maturity may vary depending on the framework or model used, but they generally progress as follows:</p>
<ul>
<li><p>Level 0: No MLOps</p>
<ul>
<li>Managing the complete lifecycle of ML models is challenging.</li>
<li>Teams are diverse, and releases are cumbersome.</li>
<li>Lack of transparency and feedback from deployed models.</li>
</ul></li>
<li><p>Level 1: DevOps but no MLOps</p>
<ul>
<li>Releases are less cumbersome compared to Level 0 but still rely heavily on the Data Team for each new model.</li>
<li>Limited feedback on model performance in production.</li>
<li>Difficulties in tracing and reproducing results.</li>
</ul></li>
<li><p>Level 2: Automated Training</p>
<ul>
<li>The training environment is fully managed and traceable.</li>
<li>Models can be easily reproduced.</li>
<li>Releases are performed manually but with reduced friction.</li>
</ul></li>
<li><p>Level 3: Automated Model Deployment</p>
<ul>
<li>Releases are automated and have low friction.</li>
<li>Full traceability from deployment back to the original data.</li>
<li>The entire environment is managed, including training, testing, and production stages.</li>
</ul></li>
<li><p>Level 4: Full MLOps Automated Operations</p>
<ul>
<li>The entire system is automated and easily monitored.</li>
<li>Production systems provide insights for continuous improvement and can automatically incorporate new models.</li>
<li>Approaching a zero-downtime system with high availability.</li>
</ul></li>
</ul>
</section>
<section id="bonus-reading-materials" class="level2">
<h2 class="anchored" data-anchor-id="bonus-reading-materials">Bonus Reading Materials</h2>
<ol type="1">
<li><a href="https://learn.microsoft.com/en-us/azure/architecture/example-scenario/mlops/mlops-maturity-model">MLOps Maturity Model - Azure</a></li>
<li><a href="https://madewithml.com/#mlops">Made with ML - By Goku Mohandas</a></li>
<li><a href="https://github.com/dair-ai/MLOPs-Primer">MLOps Primer</a></li>
</ol>
<p>Thank you for reading and I hope you found this notebook helpful. Upvote if you liked it, comment if you loved it. Hope to see you guys in the next one. Peace!</p>


</section>

 ]]></description>
  <category>MLOps</category>
  <guid>https://sagarthacker.com/posts/mlops/introduction.html</guid>
  <pubDate>Thu, 18 May 2023 04:00:00 GMT</pubDate>
  <media:content url="https://i0.wp.com/neptune.ai/wp-content/uploads/2022/10/MLOps_cycle.jpg?ssl=1" medium="image"/>
</item>
<item>
  <title>EDA - Playground Series Season 3, Episode 4</title>
  <dc:creator>Sagar Thacker</dc:creator>
  <link>https://sagarthacker.com/posts/kaggle/pss3e3-eda.html</link>
  <description><![CDATA[ 




<div class="cell" data-tags="[]" data-execution_count="1">
<details>
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="co" style="color: #5E5E5E;"># Import libraries</span></span>
<span id="cb1-2"></span>
<span id="cb1-3"><span class="im" style="color: #00769E;">import</span> numpy <span class="im" style="color: #00769E;">as</span> np</span>
<span id="cb1-4"><span class="im" style="color: #00769E;">import</span> pandas <span class="im" style="color: #00769E;">as</span> pd</span>
<span id="cb1-5"><span class="im" style="color: #00769E;">import</span> matplotlib.pyplot <span class="im" style="color: #00769E;">as</span> plt</span>
<span id="cb1-6"><span class="im" style="color: #00769E;">import</span> seaborn <span class="im" style="color: #00769E;">as</span> sns</span>
<span id="cb1-7"></span>
<span id="cb1-8">pd.options.display.max_columns <span class="op" style="color: #5E5E5E;">=</span> <span class="va" style="color: #111111;">None</span></span>
<span id="cb1-9"><span class="op" style="color: #5E5E5E;">%</span>matplotlib inline</span></code></pre></div>
</details>
</div>
<section id="data-description" class="level2">
<h2 class="anchored" data-anchor-id="data-description">1. Data Description</h2>
<p>The dataset for this competition (both train and test) was generated from a deep learning model trained on the <a href="https://www.kaggle.com/datasets/mlg-ulb/creditcardfraud">Credit Card Fraud Detection</a>. Feature distributions are close to, but not exactly the same, as the original.</p>
<p>We are given three files:</p>
<ul>
<li>train.csv - the training dataset; Class is the target</li>
<li>test.csv - the test dataset; our objective is to predict Class</li>
<li>sample_submission.csv - a sample submission file in the correct format</li>
</ul>
<p>Description of each column:</p>
<table class="table">
<caption>Feature Description</caption>
<colgroup>
<col style="width: 10%">
<col style="width: 75%">
</colgroup>
<thead>
<tr class="header">
<th style="text-align: left;">Feature</th>
<th style="text-align: left;">Description</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: left;">id</td>
<td style="text-align: left;">Indentifier for unique rows</td>
</tr>
<tr class="even">
<td style="text-align: left;">Time</td>
<td style="text-align: left;">Number of seconds elapsed between this transaction and the first transaction in the dataset</td>
</tr>
<tr class="odd">
<td style="text-align: left;">V1-V28</td>
<td style="text-align: left;">Features generated from the original dataset</td>
</tr>
<tr class="even">
<td style="text-align: left;">Amount</td>
<td style="text-align: left;">Transaction amount</td>
</tr>
<tr class="odd">
<td style="text-align: left;">Class</td>
<td style="text-align: left;">Target Feature: 1 for fraudulent transactions, 0 otherwise</td>
</tr>
</tbody>
</table>
</section>
<section id="overview-and-structure" class="level2">
<h2 class="anchored" data-anchor-id="overview-and-structure">2. Overview and Structure</h2>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2023-01-31T00:07:24.601923Z&quot;,&quot;iopub.status.busy&quot;:&quot;2023-01-31T00:07:24.600747Z&quot;,&quot;iopub.status.idle&quot;:&quot;2023-01-31T00:07:30.694113Z&quot;,&quot;shell.execute_reply&quot;:&quot;2023-01-31T00:07:30.692668Z&quot;}" data-papermill="{&quot;duration&quot;:6.105956,&quot;end_time&quot;:&quot;2023-01-31T00:07:30.697628&quot;,&quot;exception&quot;:false,&quot;start_time&quot;:&quot;2023-01-31T00:07:24.591672&quot;,&quot;status&quot;:&quot;completed&quot;}" data-tags="[]" data-execution_count="2">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb2-1">__dirname <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">'../input/playground-series-s3e4/'</span></span>
<span id="cb2-2"></span>
<span id="cb2-3">train <span class="op" style="color: #5E5E5E;">=</span> pd.read_csv(__dirname <span class="op" style="color: #5E5E5E;">+</span> <span class="st" style="color: #20794D;">'train.csv'</span>)</span>
<span id="cb2-4">test <span class="op" style="color: #5E5E5E;">=</span> pd.read_csv(__dirname <span class="op" style="color: #5E5E5E;">+</span> <span class="st" style="color: #20794D;">'test.csv'</span>)</span></code></pre></div>
</div>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2023-01-31T00:07:30.716949Z&quot;,&quot;iopub.status.busy&quot;:&quot;2023-01-31T00:07:30.716469Z&quot;,&quot;iopub.status.idle&quot;:&quot;2023-01-31T00:07:30.760814Z&quot;,&quot;shell.execute_reply&quot;:&quot;2023-01-31T00:07:30.759542Z&quot;}" data-papermill="{&quot;duration&quot;:0.05853,&quot;end_time&quot;:&quot;2023-01-31T00:07:30.765107&quot;,&quot;exception&quot;:false,&quot;start_time&quot;:&quot;2023-01-31T00:07:30.706577&quot;,&quot;status&quot;:&quot;completed&quot;}" data-tags="[]" data-execution_count="3">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb3-1"><span class="co" style="color: #5E5E5E;"># Display top 5 rows of train set</span></span>
<span id="cb3-2">train.head()</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="3">

<div>

<table class="dataframe table table-sm table-striped">
  <thead>
    <tr>
      <th></th>
      <th>id</th>
      <th>Time</th>
      <th>V1</th>
      <th>V2</th>
      <th>V3</th>
      <th>V4</th>
      <th>V5</th>
      <th>V6</th>
      <th>V7</th>
      <th>V8</th>
      <th>V9</th>
      <th>V10</th>
      <th>V11</th>
      <th>V12</th>
      <th>V13</th>
      <th>V14</th>
      <th>V15</th>
      <th>V16</th>
      <th>V17</th>
      <th>V18</th>
      <th>V19</th>
      <th>V20</th>
      <th>V21</th>
      <th>V22</th>
      <th>V23</th>
      <th>V24</th>
      <th>V25</th>
      <th>V26</th>
      <th>V27</th>
      <th>V28</th>
      <th>Amount</th>
      <th>Class</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td>0</td>
      <td>0.0</td>
      <td>2.074329</td>
      <td>-0.129425</td>
      <td>-1.137418</td>
      <td>0.412846</td>
      <td>-0.192638</td>
      <td>-1.210144</td>
      <td>0.110697</td>
      <td>-0.263477</td>
      <td>0.742144</td>
      <td>0.108782</td>
      <td>-1.070243</td>
      <td>-0.234910</td>
      <td>-1.099360</td>
      <td>0.502467</td>
      <td>0.169318</td>
      <td>0.065688</td>
      <td>-0.306957</td>
      <td>-0.323800</td>
      <td>0.103348</td>
      <td>-0.292969</td>
      <td>-0.334701</td>
      <td>-0.887840</td>
      <td>0.336701</td>
      <td>-0.110835</td>
      <td>-0.291459</td>
      <td>0.207733</td>
      <td>-0.076576</td>
      <td>-0.059577</td>
      <td>1.98</td>
      <td>0</td>
    </tr>
    <tr>
      <th>1</th>
      <td>1</td>
      <td>0.0</td>
      <td>1.998827</td>
      <td>-1.250891</td>
      <td>-0.520969</td>
      <td>-0.894539</td>
      <td>-1.122528</td>
      <td>-0.270866</td>
      <td>-1.029289</td>
      <td>0.050198</td>
      <td>-0.109948</td>
      <td>0.908773</td>
      <td>0.836798</td>
      <td>-0.056580</td>
      <td>-0.120990</td>
      <td>-0.144028</td>
      <td>-0.039582</td>
      <td>1.653057</td>
      <td>-0.253599</td>
      <td>-0.814354</td>
      <td>0.716784</td>
      <td>0.065717</td>
      <td>0.054848</td>
      <td>-0.038367</td>
      <td>0.133518</td>
      <td>-0.461928</td>
      <td>-0.465491</td>
      <td>-0.464655</td>
      <td>-0.009413</td>
      <td>-0.038238</td>
      <td>84.00</td>
      <td>0</td>
    </tr>
    <tr>
      <th>2</th>
      <td>2</td>
      <td>0.0</td>
      <td>0.091535</td>
      <td>1.004517</td>
      <td>-0.223445</td>
      <td>-0.435249</td>
      <td>0.667548</td>
      <td>-0.988351</td>
      <td>0.948146</td>
      <td>-0.084789</td>
      <td>-0.042027</td>
      <td>-0.818383</td>
      <td>-0.376512</td>
      <td>-0.226546</td>
      <td>-0.552869</td>
      <td>-0.886466</td>
      <td>-0.180890</td>
      <td>0.230286</td>
      <td>0.590579</td>
      <td>-0.321590</td>
      <td>-0.433959</td>
      <td>-0.021375</td>
      <td>-0.326725</td>
      <td>-0.803736</td>
      <td>0.154495</td>
      <td>0.951233</td>
      <td>-0.506919</td>
      <td>0.085046</td>
      <td>0.224458</td>
      <td>0.087356</td>
      <td>2.69</td>
      <td>0</td>
    </tr>
    <tr>
      <th>3</th>
      <td>3</td>
      <td>0.0</td>
      <td>1.979649</td>
      <td>-0.184949</td>
      <td>-1.064206</td>
      <td>0.120125</td>
      <td>-0.215238</td>
      <td>-0.648829</td>
      <td>-0.087826</td>
      <td>-0.035367</td>
      <td>0.885838</td>
      <td>-0.007527</td>
      <td>0.637441</td>
      <td>0.676960</td>
      <td>-1.504823</td>
      <td>0.554039</td>
      <td>-0.824356</td>
      <td>-0.527267</td>
      <td>-0.095838</td>
      <td>-0.312519</td>
      <td>0.642659</td>
      <td>-0.340089</td>
      <td>-0.095514</td>
      <td>-0.079792</td>
      <td>0.167701</td>
      <td>-0.042939</td>
      <td>0.000799</td>
      <td>-0.096148</td>
      <td>-0.057780</td>
      <td>-0.073839</td>
      <td>1.00</td>
      <td>0</td>
    </tr>
    <tr>
      <th>4</th>
      <td>4</td>
      <td>0.0</td>
      <td>1.025898</td>
      <td>-0.171827</td>
      <td>1.203717</td>
      <td>1.243900</td>
      <td>-0.636572</td>
      <td>1.099074</td>
      <td>-0.938651</td>
      <td>0.569239</td>
      <td>0.692665</td>
      <td>-0.097495</td>
      <td>1.338869</td>
      <td>1.391399</td>
      <td>-0.128167</td>
      <td>-0.081836</td>
      <td>0.100548</td>
      <td>-0.338937</td>
      <td>0.090864</td>
      <td>-0.423645</td>
      <td>-0.731939</td>
      <td>-0.203628</td>
      <td>0.099157</td>
      <td>0.608908</td>
      <td>0.027901</td>
      <td>-0.262813</td>
      <td>0.257834</td>
      <td>-0.252829</td>
      <td>0.108338</td>
      <td>0.021051</td>
      <td>1.00</td>
      <td>0</td>
    </tr>
  </tbody>
</table>
</div>
</div>
</div>
<section id="data-structure-and-statistics" class="level3">
<h3 class="anchored" data-anchor-id="data-structure-and-statistics">2.1. Data Structure and Statistics</h3>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2023-01-31T00:07:30.800362Z&quot;,&quot;iopub.status.busy&quot;:&quot;2023-01-31T00:07:30.799086Z&quot;,&quot;iopub.status.idle&quot;:&quot;2023-01-31T00:07:30.807131Z&quot;,&quot;shell.execute_reply&quot;:&quot;2023-01-31T00:07:30.805208Z&quot;}" data-papermill="{&quot;duration&quot;:0.021172,&quot;end_time&quot;:&quot;2023-01-31T00:07:30.810936&quot;,&quot;exception&quot;:false,&quot;start_time&quot;:&quot;2023-01-31T00:07:30.789764&quot;,&quot;status&quot;:&quot;completed&quot;}" data-tags="[]" data-execution_count="4">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb4-1"><span class="bu" style="color: null;">print</span>(<span class="ss" style="color: #20794D;">f"Training set has </span><span class="sc" style="color: #5E5E5E;">{</span>train<span class="sc" style="color: #5E5E5E;">.</span>shape[<span class="dv" style="color: #AD0000;">0</span>]<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;"> rows and </span><span class="sc" style="color: #5E5E5E;">{</span>train<span class="sc" style="color: #5E5E5E;">.</span>shape[<span class="dv" style="color: #AD0000;">1</span>]<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;"> columns"</span>)</span>
<span id="cb4-2"><span class="bu" style="color: null;">print</span>(<span class="ss" style="color: #20794D;">f"Testing set has </span><span class="sc" style="color: #5E5E5E;">{</span>test<span class="sc" style="color: #5E5E5E;">.</span>shape[<span class="dv" style="color: #AD0000;">0</span>]<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;"> rows and </span><span class="sc" style="color: #5E5E5E;">{</span>test<span class="sc" style="color: #5E5E5E;">.</span>shape[<span class="dv" style="color: #AD0000;">1</span>]<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;"> columns"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Training set has 219129 rows and 32 columns
Testing set has 146087 rows and 31 columns</code></pre>
</div>
</div>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2023-01-31T00:07:30.829714Z&quot;,&quot;iopub.status.busy&quot;:&quot;2023-01-31T00:07:30.829270Z&quot;,&quot;iopub.status.idle&quot;:&quot;2023-01-31T00:07:30.880467Z&quot;,&quot;shell.execute_reply&quot;:&quot;2023-01-31T00:07:30.879191Z&quot;}" data-papermill="{&quot;duration&quot;:0.06414,&quot;end_time&quot;:&quot;2023-01-31T00:07:30.883502&quot;,&quot;exception&quot;:false,&quot;start_time&quot;:&quot;2023-01-31T00:07:30.819362&quot;,&quot;status&quot;:&quot;completed&quot;}" data-tags="[]" data-execution_count="5">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb6-1">train.info()</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>&lt;class 'pandas.core.frame.DataFrame'&gt;
RangeIndex: 219129 entries, 0 to 219128
Data columns (total 32 columns):
 #   Column  Non-Null Count   Dtype  
---  ------  --------------   -----  
 0   id      219129 non-null  int64  
 1   Time    219129 non-null  float64
 2   V1      219129 non-null  float64
 3   V2      219129 non-null  float64
 4   V3      219129 non-null  float64
 5   V4      219129 non-null  float64
 6   V5      219129 non-null  float64
 7   V6      219129 non-null  float64
 8   V7      219129 non-null  float64
 9   V8      219129 non-null  float64
 10  V9      219129 non-null  float64
 11  V10     219129 non-null  float64
 12  V11     219129 non-null  float64
 13  V12     219129 non-null  float64
 14  V13     219129 non-null  float64
 15  V14     219129 non-null  float64
 16  V15     219129 non-null  float64
 17  V16     219129 non-null  float64
 18  V17     219129 non-null  float64
 19  V18     219129 non-null  float64
 20  V19     219129 non-null  float64
 21  V20     219129 non-null  float64
 22  V21     219129 non-null  float64
 23  V22     219129 non-null  float64
 24  V23     219129 non-null  float64
 25  V24     219129 non-null  float64
 26  V25     219129 non-null  float64
 27  V26     219129 non-null  float64
 28  V27     219129 non-null  float64
 29  V28     219129 non-null  float64
 30  Amount  219129 non-null  float64
 31  Class   219129 non-null  int64  
dtypes: float64(30), int64(2)
memory usage: 53.5 MB</code></pre>
</div>
</div>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2023-01-31T00:07:30.903515Z&quot;,&quot;iopub.status.busy&quot;:&quot;2023-01-31T00:07:30.902118Z&quot;,&quot;iopub.status.idle&quot;:&quot;2023-01-31T00:07:30.929003Z&quot;,&quot;shell.execute_reply&quot;:&quot;2023-01-31T00:07:30.927782Z&quot;}" data-papermill="{&quot;duration&quot;:0.03946,&quot;end_time&quot;:&quot;2023-01-31T00:07:30.931708&quot;,&quot;exception&quot;:false,&quot;start_time&quot;:&quot;2023-01-31T00:07:30.892248&quot;,&quot;status&quot;:&quot;completed&quot;}" data-tags="[]" data-execution_count="6">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb8-1">test.info()</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>&lt;class 'pandas.core.frame.DataFrame'&gt;
RangeIndex: 146087 entries, 0 to 146086
Data columns (total 31 columns):
 #   Column  Non-Null Count   Dtype  
---  ------  --------------   -----  
 0   id      146087 non-null  int64  
 1   Time    146087 non-null  float64
 2   V1      146087 non-null  float64
 3   V2      146087 non-null  float64
 4   V3      146087 non-null  float64
 5   V4      146087 non-null  float64
 6   V5      146087 non-null  float64
 7   V6      146087 non-null  float64
 8   V7      146087 non-null  float64
 9   V8      146087 non-null  float64
 10  V9      146087 non-null  float64
 11  V10     146087 non-null  float64
 12  V11     146087 non-null  float64
 13  V12     146087 non-null  float64
 14  V13     146087 non-null  float64
 15  V14     146087 non-null  float64
 16  V15     146087 non-null  float64
 17  V16     146087 non-null  float64
 18  V17     146087 non-null  float64
 19  V18     146087 non-null  float64
 20  V19     146087 non-null  float64
 21  V20     146087 non-null  float64
 22  V21     146087 non-null  float64
 23  V22     146087 non-null  float64
 24  V23     146087 non-null  float64
 25  V24     146087 non-null  float64
 26  V25     146087 non-null  float64
 27  V26     146087 non-null  float64
 28  V27     146087 non-null  float64
 29  V28     146087 non-null  float64
 30  Amount  146087 non-null  float64
dtypes: float64(30), int64(1)
memory usage: 34.6 MB</code></pre>
</div>
</div>
<p>We find:</p>
<ul>
<li>All the columns in the both train and test set are either int64 or float64.</li>
<li>Based on the value for <code>Non-Null</code> we can observe we don’t have any missing values in our datasets.</li>
<li>As categorical type features are not present, it reduces some pain points while data preprocessing.</li>
</ul>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2023-01-31T00:07:30.966902Z&quot;,&quot;iopub.status.busy&quot;:&quot;2023-01-31T00:07:30.966429Z&quot;,&quot;iopub.status.idle&quot;:&quot;2023-01-31T00:07:31.404354Z&quot;,&quot;shell.execute_reply&quot;:&quot;2023-01-31T00:07:31.403196Z&quot;}" data-papermill="{&quot;duration&quot;:0.451072,&quot;end_time&quot;:&quot;2023-01-31T00:07:31.407735&quot;,&quot;exception&quot;:false,&quot;start_time&quot;:&quot;2023-01-31T00:07:30.956663&quot;,&quot;status&quot;:&quot;completed&quot;}" data-tags="[]" data-execution_count="7">
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb10-1">train.describe()</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="7">

<div>

<table class="dataframe table table-sm table-striped">
  <thead>
    <tr>
      <th></th>
      <th>id</th>
      <th>Time</th>
      <th>V1</th>
      <th>V2</th>
      <th>V3</th>
      <th>V4</th>
      <th>V5</th>
      <th>V6</th>
      <th>V7</th>
      <th>V8</th>
      <th>V9</th>
      <th>V10</th>
      <th>V11</th>
      <th>V12</th>
      <th>V13</th>
      <th>V14</th>
      <th>V15</th>
      <th>V16</th>
      <th>V17</th>
      <th>V18</th>
      <th>V19</th>
      <th>V20</th>
      <th>V21</th>
      <th>V22</th>
      <th>V23</th>
      <th>V24</th>
      <th>V25</th>
      <th>V26</th>
      <th>V27</th>
      <th>V28</th>
      <th>Amount</th>
      <th>Class</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>count</th>
      <td>219129.000000</td>
      <td>219129.000000</td>
      <td>219129.000000</td>
      <td>219129.000000</td>
      <td>219129.000000</td>
      <td>219129.000000</td>
      <td>219129.000000</td>
      <td>219129.000000</td>
      <td>219129.000000</td>
      <td>219129.000000</td>
      <td>219129.000000</td>
      <td>219129.000000</td>
      <td>219129.000000</td>
      <td>219129.000000</td>
      <td>219129.000000</td>
      <td>219129.000000</td>
      <td>219129.000000</td>
      <td>219129.000000</td>
      <td>219129.000000</td>
      <td>219129.000000</td>
      <td>219129.000000</td>
      <td>219129.000000</td>
      <td>219129.000000</td>
      <td>219129.000000</td>
      <td>219129.000000</td>
      <td>219129.000000</td>
      <td>219129.000000</td>
      <td>219129.000000</td>
      <td>219129.000000</td>
      <td>219129.000000</td>
      <td>219129.000000</td>
      <td>219129.000000</td>
    </tr>
    <tr>
      <th>mean</th>
      <td>109564.000000</td>
      <td>62377.415376</td>
      <td>0.096008</td>
      <td>0.048345</td>
      <td>0.592102</td>
      <td>0.069273</td>
      <td>-0.161555</td>
      <td>0.133688</td>
      <td>-0.128224</td>
      <td>0.149534</td>
      <td>-0.048337</td>
      <td>-0.039758</td>
      <td>0.153632</td>
      <td>-0.061038</td>
      <td>0.014330</td>
      <td>0.067649</td>
      <td>0.108643</td>
      <td>0.013650</td>
      <td>0.036815</td>
      <td>-0.033927</td>
      <td>-0.008302</td>
      <td>0.009708</td>
      <td>-0.031064</td>
      <td>-0.050852</td>
      <td>-0.050531</td>
      <td>-0.002992</td>
      <td>0.124005</td>
      <td>0.009881</td>
      <td>0.014034</td>
      <td>0.017313</td>
      <td>66.359803</td>
      <td>0.002140</td>
    </tr>
    <tr>
      <th>std</th>
      <td>63257.237906</td>
      <td>25620.348569</td>
      <td>1.395425</td>
      <td>1.159805</td>
      <td>1.132884</td>
      <td>1.253125</td>
      <td>1.069530</td>
      <td>1.202411</td>
      <td>0.817207</td>
      <td>0.716212</td>
      <td>1.054143</td>
      <td>0.821889</td>
      <td>0.976946</td>
      <td>0.998470</td>
      <td>1.039145</td>
      <td>0.801335</td>
      <td>0.891613</td>
      <td>0.786654</td>
      <td>0.691709</td>
      <td>0.784454</td>
      <td>0.739928</td>
      <td>0.439521</td>
      <td>0.422777</td>
      <td>0.597812</td>
      <td>0.318175</td>
      <td>0.593100</td>
      <td>0.406741</td>
      <td>0.473867</td>
      <td>0.233355</td>
      <td>0.164859</td>
      <td>150.795017</td>
      <td>0.046214</td>
    </tr>
    <tr>
      <th>min</th>
      <td>0.000000</td>
      <td>0.000000</td>
      <td>-29.807725</td>
      <td>-44.247914</td>
      <td>-19.722872</td>
      <td>-5.263650</td>
      <td>-37.591259</td>
      <td>-25.659750</td>
      <td>-31.179799</td>
      <td>-28.903442</td>
      <td>-8.756951</td>
      <td>-22.092656</td>
      <td>-4.190145</td>
      <td>-16.180165</td>
      <td>-4.373778</td>
      <td>-15.585021</td>
      <td>-4.155728</td>
      <td>-11.778839</td>
      <td>-20.756768</td>
      <td>-7.456060</td>
      <td>-4.281628</td>
      <td>-18.679066</td>
      <td>-14.689621</td>
      <td>-8.748979</td>
      <td>-11.958588</td>
      <td>-2.836285</td>
      <td>-3.958591</td>
      <td>-1.858672</td>
      <td>-9.234767</td>
      <td>-4.551680</td>
      <td>0.000000</td>
      <td>0.000000</td>
    </tr>
    <tr>
      <th>25%</th>
      <td>54782.000000</td>
      <td>47933.000000</td>
      <td>-0.846135</td>
      <td>-0.573728</td>
      <td>-0.027154</td>
      <td>-0.769256</td>
      <td>-0.847346</td>
      <td>-0.631835</td>
      <td>-0.646730</td>
      <td>-0.095948</td>
      <td>-0.711444</td>
      <td>-0.499563</td>
      <td>-0.576969</td>
      <td>-0.476890</td>
      <td>-0.671601</td>
      <td>-0.329905</td>
      <td>-0.461596</td>
      <td>-0.461077</td>
      <td>-0.406675</td>
      <td>-0.496990</td>
      <td>-0.463035</td>
      <td>-0.167927</td>
      <td>-0.190418</td>
      <td>-0.473099</td>
      <td>-0.174478</td>
      <td>-0.332540</td>
      <td>-0.126080</td>
      <td>-0.318330</td>
      <td>-0.050983</td>
      <td>-0.009512</td>
      <td>5.990000</td>
      <td>0.000000</td>
    </tr>
    <tr>
      <th>50%</th>
      <td>109564.000000</td>
      <td>63189.000000</td>
      <td>0.385913</td>
      <td>0.046937</td>
      <td>0.735895</td>
      <td>0.064856</td>
      <td>-0.229929</td>
      <td>-0.087778</td>
      <td>-0.098970</td>
      <td>0.111219</td>
      <td>-0.131323</td>
      <td>-0.106034</td>
      <td>0.090545</td>
      <td>0.087649</td>
      <td>-0.016837</td>
      <td>0.049266</td>
      <td>0.178975</td>
      <td>0.054550</td>
      <td>-0.013949</td>
      <td>-0.039451</td>
      <td>-0.002935</td>
      <td>-0.037702</td>
      <td>-0.042858</td>
      <td>-0.032856</td>
      <td>-0.063307</td>
      <td>0.038708</td>
      <td>0.145934</td>
      <td>-0.086388</td>
      <td>0.015905</td>
      <td>0.022163</td>
      <td>21.900000</td>
      <td>0.000000</td>
    </tr>
    <tr>
      <th>75%</th>
      <td>164346.000000</td>
      <td>77519.000000</td>
      <td>1.190661</td>
      <td>0.814145</td>
      <td>1.306110</td>
      <td>0.919353</td>
      <td>0.356856</td>
      <td>0.482388</td>
      <td>0.385567</td>
      <td>0.390976</td>
      <td>0.583715</td>
      <td>0.403967</td>
      <td>0.917392</td>
      <td>0.608480</td>
      <td>0.695547</td>
      <td>0.460837</td>
      <td>0.791255</td>
      <td>0.531777</td>
      <td>0.410978</td>
      <td>0.446448</td>
      <td>0.455718</td>
      <td>0.126750</td>
      <td>0.109187</td>
      <td>0.354910</td>
      <td>0.060221</td>
      <td>0.394566</td>
      <td>0.402926</td>
      <td>0.253869</td>
      <td>0.076814</td>
      <td>0.066987</td>
      <td>68.930000</td>
      <td>0.000000</td>
    </tr>
    <tr>
      <th>max</th>
      <td>219128.000000</td>
      <td>120580.000000</td>
      <td>2.430494</td>
      <td>16.068473</td>
      <td>6.145578</td>
      <td>12.547997</td>
      <td>34.581260</td>
      <td>16.233967</td>
      <td>39.824099</td>
      <td>18.270586</td>
      <td>13.423914</td>
      <td>15.878405</td>
      <td>9.417789</td>
      <td>5.406614</td>
      <td>5.976265</td>
      <td>6.078453</td>
      <td>4.693323</td>
      <td>5.834992</td>
      <td>8.845303</td>
      <td>4.847887</td>
      <td>4.090974</td>
      <td>15.407839</td>
      <td>22.062945</td>
      <td>6.163541</td>
      <td>12.734391</td>
      <td>4.572739</td>
      <td>3.111624</td>
      <td>3.402344</td>
      <td>13.123618</td>
      <td>23.263746</td>
      <td>7475.000000</td>
      <td>1.000000</td>
    </tr>
  </tbody>
</table>
</div>
</div>
</div>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2023-01-31T00:07:31.427729Z&quot;,&quot;iopub.status.busy&quot;:&quot;2023-01-31T00:07:31.427308Z&quot;,&quot;iopub.status.idle&quot;:&quot;2023-01-31T00:07:31.730358Z&quot;,&quot;shell.execute_reply&quot;:&quot;2023-01-31T00:07:31.729145Z&quot;}" data-papermill="{&quot;duration&quot;:0.315712,&quot;end_time&quot;:&quot;2023-01-31T00:07:31.732765&quot;,&quot;exception&quot;:false,&quot;start_time&quot;:&quot;2023-01-31T00:07:31.417053&quot;,&quot;status&quot;:&quot;completed&quot;}" data-tags="[]" data-execution_count="8">
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb11-1">test.describe()</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="8">

<div>

<table class="dataframe table table-sm table-striped">
  <thead>
    <tr>
      <th></th>
      <th>id</th>
      <th>Time</th>
      <th>V1</th>
      <th>V2</th>
      <th>V3</th>
      <th>V4</th>
      <th>V5</th>
      <th>V6</th>
      <th>V7</th>
      <th>V8</th>
      <th>V9</th>
      <th>V10</th>
      <th>V11</th>
      <th>V12</th>
      <th>V13</th>
      <th>V14</th>
      <th>V15</th>
      <th>V16</th>
      <th>V17</th>
      <th>V18</th>
      <th>V19</th>
      <th>V20</th>
      <th>V21</th>
      <th>V22</th>
      <th>V23</th>
      <th>V24</th>
      <th>V25</th>
      <th>V26</th>
      <th>V27</th>
      <th>V28</th>
      <th>Amount</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>count</th>
      <td>146087.000000</td>
      <td>146087.000000</td>
      <td>146087.000000</td>
      <td>146087.000000</td>
      <td>146087.000000</td>
      <td>146087.000000</td>
      <td>146087.000000</td>
      <td>146087.000000</td>
      <td>146087.000000</td>
      <td>146087.000000</td>
      <td>146087.000000</td>
      <td>146087.000000</td>
      <td>146087.000000</td>
      <td>146087.000000</td>
      <td>146087.000000</td>
      <td>146087.000000</td>
      <td>146087.000000</td>
      <td>146087.000000</td>
      <td>146087.000000</td>
      <td>146087.000000</td>
      <td>146087.000000</td>
      <td>146087.000000</td>
      <td>146087.000000</td>
      <td>146087.000000</td>
      <td>146087.000000</td>
      <td>146087.000000</td>
      <td>146087.000000</td>
      <td>146087.000000</td>
      <td>146087.000000</td>
      <td>146087.000000</td>
      <td>146087.000000</td>
    </tr>
    <tr>
      <th>mean</th>
      <td>292172.000000</td>
      <td>144637.928166</td>
      <td>0.512929</td>
      <td>-0.013098</td>
      <td>-0.697478</td>
      <td>-0.273258</td>
      <td>0.321856</td>
      <td>-0.050204</td>
      <td>0.073419</td>
      <td>0.043803</td>
      <td>-0.071620</td>
      <td>0.013962</td>
      <td>-0.249980</td>
      <td>0.108453</td>
      <td>-0.127648</td>
      <td>-0.151857</td>
      <td>-0.199467</td>
      <td>0.027958</td>
      <td>-0.052971</td>
      <td>0.128470</td>
      <td>-0.008261</td>
      <td>-0.056678</td>
      <td>0.044729</td>
      <td>0.175461</td>
      <td>0.018471</td>
      <td>0.016029</td>
      <td>-0.118352</td>
      <td>-0.015199</td>
      <td>0.006236</td>
      <td>0.002035</td>
      <td>66.182463</td>
    </tr>
    <tr>
      <th>std</th>
      <td>42171.828725</td>
      <td>14258.025396</td>
      <td>1.628455</td>
      <td>1.247749</td>
      <td>1.292522</td>
      <td>1.365752</td>
      <td>1.146215</td>
      <td>1.332880</td>
      <td>0.946681</td>
      <td>0.749513</td>
      <td>0.924996</td>
      <td>0.932453</td>
      <td>0.881086</td>
      <td>0.686018</td>
      <td>0.916833</td>
      <td>0.832182</td>
      <td>0.774293</td>
      <td>0.811819</td>
      <td>0.713056</td>
      <td>0.798006</td>
      <td>0.722225</td>
      <td>0.458364</td>
      <td>0.449017</td>
      <td>0.710704</td>
      <td>0.359597</td>
      <td>0.633929</td>
      <td>0.479720</td>
      <td>0.446154</td>
      <td>0.255935</td>
      <td>0.174613</td>
      <td>153.151535</td>
    </tr>
    <tr>
      <th>min</th>
      <td>219129.000000</td>
      <td>120580.000000</td>
      <td>-34.755944</td>
      <td>-37.803827</td>
      <td>-18.934952</td>
      <td>-5.497560</td>
      <td>-25.639591</td>
      <td>-14.133040</td>
      <td>-18.715915</td>
      <td>-26.926164</td>
      <td>-4.823352</td>
      <td>-12.333747</td>
      <td>-4.333619</td>
      <td>-8.836286</td>
      <td>-4.131766</td>
      <td>-14.172557</td>
      <td>-4.072435</td>
      <td>-7.639810</td>
      <td>-11.868164</td>
      <td>-4.342548</td>
      <td>-4.823554</td>
      <td>-26.412867</td>
      <td>-13.087263</td>
      <td>-5.392649</td>
      <td>-12.814296</td>
      <td>-2.789084</td>
      <td>-3.361564</td>
      <td>-1.743223</td>
      <td>-9.412538</td>
      <td>-8.262339</td>
      <td>0.000000</td>
    </tr>
    <tr>
      <th>25%</th>
      <td>255650.500000</td>
      <td>132698.000000</td>
      <td>-0.679988</td>
      <td>-0.715885</td>
      <td>-1.619268</td>
      <td>-1.021205</td>
      <td>-0.418547</td>
      <td>-0.891441</td>
      <td>-0.570042</td>
      <td>-0.231824</td>
      <td>-0.634695</td>
      <td>-0.636147</td>
      <td>-0.957520</td>
      <td>-0.324639</td>
      <td>-0.717325</td>
      <td>-0.617641</td>
      <td>-0.737472</td>
      <td>-0.451743</td>
      <td>-0.572054</td>
      <td>-0.380886</td>
      <td>-0.383668</td>
      <td>-0.237529</td>
      <td>-0.166715</td>
      <td>-0.393667</td>
      <td>-0.135059</td>
      <td>-0.368957</td>
      <td>-0.409938</td>
      <td>-0.284914</td>
      <td>-0.066037</td>
      <td>-0.057447</td>
      <td>5.990000</td>
    </tr>
    <tr>
      <th>50%</th>
      <td>292172.000000</td>
      <td>144493.000000</td>
      <td>0.285798</td>
      <td>0.009058</td>
      <td>-0.719060</td>
      <td>-0.482945</td>
      <td>0.306851</td>
      <td>-0.372813</td>
      <td>0.118545</td>
      <td>0.014979</td>
      <td>-0.075909</td>
      <td>-0.065457</td>
      <td>-0.182940</td>
      <td>0.124780</td>
      <td>-0.098396</td>
      <td>-0.065481</td>
      <td>-0.167537</td>
      <td>0.076469</td>
      <td>-0.123968</td>
      <td>0.123625</td>
      <td>-0.002966</td>
      <td>-0.096729</td>
      <td>0.058393</td>
      <td>0.250169</td>
      <td>0.017835</td>
      <td>0.029727</td>
      <td>-0.142325</td>
      <td>-0.069342</td>
      <td>-0.003539</td>
      <td>-0.026955</td>
      <td>21.790000</td>
    </tr>
    <tr>
      <th>75%</th>
      <td>328693.500000</td>
      <td>156140.000000</td>
      <td>1.974015</td>
      <td>0.827420</td>
      <td>0.073874</td>
      <td>0.369725</td>
      <td>0.955997</td>
      <td>0.302724</td>
      <td>0.734503</td>
      <td>0.296969</td>
      <td>0.513770</td>
      <td>0.564146</td>
      <td>0.453913</td>
      <td>0.581384</td>
      <td>0.504763</td>
      <td>0.395024</td>
      <td>0.305768</td>
      <td>0.546893</td>
      <td>0.372321</td>
      <td>0.677771</td>
      <td>0.374562</td>
      <td>0.065753</td>
      <td>0.244817</td>
      <td>0.749555</td>
      <td>0.167514</td>
      <td>0.562138</td>
      <td>0.182937</td>
      <td>0.216632</td>
      <td>0.069334</td>
      <td>0.066954</td>
      <td>66.000000</td>
    </tr>
    <tr>
      <th>max</th>
      <td>365215.000000</td>
      <td>172790.000000</td>
      <td>2.452901</td>
      <td>12.390128</td>
      <td>4.492640</td>
      <td>11.232928</td>
      <td>24.352818</td>
      <td>16.596635</td>
      <td>27.023955</td>
      <td>12.098322</td>
      <td>7.888980</td>
      <td>14.735004</td>
      <td>6.204939</td>
      <td>5.107089</td>
      <td>3.928334</td>
      <td>7.869385</td>
      <td>5.374923</td>
      <td>5.570906</td>
      <td>7.136535</td>
      <td>3.758750</td>
      <td>4.929496</td>
      <td>15.829261</td>
      <td>15.333546</td>
      <td>5.771245</td>
      <td>17.481609</td>
      <td>4.541724</td>
      <td>4.555960</td>
      <td>3.374748</td>
      <td>12.673968</td>
      <td>13.093229</td>
      <td>4630.600000</td>
    </tr>
  </tbody>
</table>
</div>
</div>
</div>
<p>We find:</p>
<ul>
<li>The feature names don’t help us understand what the feature is about or how to interpret it.</li>
<li>For most of the features the minimum and maximum values are to different extremes whereas their 1st quatile, median, and 3rd quatile are close to each other.
<ul>
<li>For example, <code>V1</code> has minimum value as -34.755944 and maximum value as 2.452901.</li>
<li><code>25%</code>: -0.679988, <code>50%</code>: 0.285798, and <code>75%</code>: 1.974015</li>
</ul></li>
</ul>
</section>
<section id="missing-values" class="level3">
<h3 class="anchored" data-anchor-id="missing-values">2.2. Missing values</h3>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2023-01-31T00:07:31.790696Z&quot;,&quot;iopub.status.busy&quot;:&quot;2023-01-31T00:07:31.790298Z&quot;,&quot;iopub.status.idle&quot;:&quot;2023-01-31T00:07:31.820896Z&quot;,&quot;shell.execute_reply&quot;:&quot;2023-01-31T00:07:31.819443Z&quot;}" data-papermill="{&quot;duration&quot;:0.044223,&quot;end_time&quot;:&quot;2023-01-31T00:07:31.823924&quot;,&quot;exception&quot;:false,&quot;start_time&quot;:&quot;2023-01-31T00:07:31.779701&quot;,&quot;status&quot;:&quot;completed&quot;}" data-tags="[]" data-execution_count="9">
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb12-1"><span class="co" style="color: #5E5E5E;"># Check for missing values in train set</span></span>
<span id="cb12-2"><span class="bu" style="color: null;">print</span>(<span class="ss" style="color: #20794D;">f"Number of missing values in training set: </span><span class="sc" style="color: #5E5E5E;">{</span><span class="bu" style="color: null;">sum</span>(train.isna().<span class="bu" style="color: null;">sum</span>())<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">"</span>)</span>
<span id="cb12-3"><span class="bu" style="color: null;">print</span>(<span class="ss" style="color: #20794D;">f"Number of missing values in testing set: </span><span class="sc" style="color: #5E5E5E;">{</span><span class="bu" style="color: null;">sum</span>(test.isna().<span class="bu" style="color: null;">sum</span>())<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Number of missing values in training set: 0
Number of missing values in testing set: 0</code></pre>
</div>
</div>
<p>We find:</p>
<ul>
<li>As seen in the <code>info()</code> results we confirm we don’t have any missing values in the both datasets.</li>
</ul>
</section>
</section>
<section id="visualizations" class="level2">
<h2 class="anchored" data-anchor-id="visualizations">3. Visualizations</h2>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2023-01-31T00:07:31.883219Z&quot;,&quot;iopub.status.busy&quot;:&quot;2023-01-31T00:07:31.881863Z&quot;,&quot;iopub.status.idle&quot;:&quot;2023-01-31T00:07:31.888861Z&quot;,&quot;shell.execute_reply&quot;:&quot;2023-01-31T00:07:31.887521Z&quot;}" data-papermill="{&quot;duration&quot;:0.021539,&quot;end_time&quot;:&quot;2023-01-31T00:07:31.891911&quot;,&quot;exception&quot;:false,&quot;start_time&quot;:&quot;2023-01-31T00:07:31.870372&quot;,&quot;status&quot;:&quot;completed&quot;}" data-tags="[]" data-execution_count="10">
<div class="sourceCode cell-code" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb14-1"><span class="co" style="color: #5E5E5E;"># Extract the columns which contains 'V'</span></span>
<span id="cb14-2">v_columns <span class="op" style="color: #5E5E5E;">=</span> [col <span class="cf" style="color: #003B4F;">for</span> col <span class="kw" style="color: #003B4F;">in</span> train.columns <span class="cf" style="color: #003B4F;">if</span> col[<span class="dv" style="color: #AD0000;">0</span>] <span class="op" style="color: #5E5E5E;">==</span> <span class="st" style="color: #20794D;">'V'</span>]</span>
<span id="cb14-3">useful_columns <span class="op" style="color: #5E5E5E;">=</span> [col <span class="cf" style="color: #003B4F;">for</span> col <span class="kw" style="color: #003B4F;">in</span> train.columns <span class="cf" style="color: #003B4F;">if</span> col <span class="kw" style="color: #003B4F;">not</span> <span class="kw" style="color: #003B4F;">in</span> [<span class="st" style="color: #20794D;">'id'</span>, <span class="st" style="color: #20794D;">'Time'</span>]]</span></code></pre></div>
</div>
<section id="univariate-analysis" class="level3">
<h3 class="anchored" data-anchor-id="univariate-analysis">3.1. Univariate Analysis</h3>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2023-01-31T00:07:31.935193Z&quot;,&quot;iopub.status.busy&quot;:&quot;2023-01-31T00:07:31.934769Z&quot;,&quot;iopub.status.idle&quot;:&quot;2023-01-31T00:07:32.144868Z&quot;,&quot;shell.execute_reply&quot;:&quot;2023-01-31T00:07:32.143881Z&quot;}" data-papermill="{&quot;duration&quot;:0.223836,&quot;end_time&quot;:&quot;2023-01-31T00:07:32.147266&quot;,&quot;exception&quot;:false,&quot;start_time&quot;:&quot;2023-01-31T00:07:31.923430&quot;,&quot;status&quot;:&quot;completed&quot;}" data-tags="[]" data-execution_count="11">
<div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb15-1">sns.countplot(x<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'Class'</span>, data<span class="op" style="color: #5E5E5E;">=</span>train)</span>
<span id="cb15-2">plt.title(<span class="st" style="color: #20794D;">'Distribution of Class'</span>, fontsize<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">14</span>)</span>
<span id="cb15-3">plt.show()</span></code></pre></div>
<div class="cell-output cell-output-display">
<p><img src="https://sagarthacker.com/posts/kaggle/pss3e3-eda_files/figure-html/cell-12-output-1.png" class="img-fluid"></p>
</div>
</div>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2023-01-31T00:07:32.170589Z&quot;,&quot;iopub.status.busy&quot;:&quot;2023-01-31T00:07:32.169831Z&quot;,&quot;iopub.status.idle&quot;:&quot;2023-01-31T00:07:32.181732Z&quot;,&quot;shell.execute_reply&quot;:&quot;2023-01-31T00:07:32.180595Z&quot;}" data-papermill="{&quot;duration&quot;:0.026622,&quot;end_time&quot;:&quot;2023-01-31T00:07:32.184172&quot;,&quot;exception&quot;:false,&quot;start_time&quot;:&quot;2023-01-31T00:07:32.157550&quot;,&quot;status&quot;:&quot;completed&quot;}" data-tags="[]" data-execution_count="12">
<div class="sourceCode cell-code" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb16-1">train.Class.value_counts() <span class="op" style="color: #5E5E5E;">/</span> train.shape[<span class="dv" style="color: #AD0000;">0</span>] <span class="op" style="color: #5E5E5E;">*</span> <span class="dv" style="color: #AD0000;">100</span></span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="12">
<pre><code>0    99.785971
1     0.214029
Name: Class, dtype: float64</code></pre>
</div>
</div>
<p>We find:</p>
<ul>
<li>The two classes are highly imbalanced.</li>
<li>~99.78% of the data is labelled as Class 0</li>
<li>~0.21% of the data is labelled as Class 1.</li>
</ul>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2023-01-31T00:07:32.225252Z&quot;,&quot;iopub.status.busy&quot;:&quot;2023-01-31T00:07:32.223943Z&quot;,&quot;iopub.status.idle&quot;:&quot;2023-01-31T00:07:33.379159Z&quot;,&quot;shell.execute_reply&quot;:&quot;2023-01-31T00:07:33.377670Z&quot;}" data-papermill="{&quot;duration&quot;:1.168925,&quot;end_time&quot;:&quot;2023-01-31T00:07:33.381861&quot;,&quot;exception&quot;:false,&quot;start_time&quot;:&quot;2023-01-31T00:07:32.212936&quot;,&quot;status&quot;:&quot;completed&quot;}" data-tags="[]" data-execution_count="13">
<div class="sourceCode cell-code" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb18-1">ax <span class="op" style="color: #5E5E5E;">=</span> train[v_columns].plot(kind<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'box'</span>, figsize<span class="op" style="color: #5E5E5E;">=</span>(<span class="dv" style="color: #AD0000;">20</span>, <span class="dv" style="color: #AD0000;">8</span>))</span>
<span id="cb18-2">plt.title(<span class="st" style="color: #20794D;">'Box plots of features start</span><span class="ch" style="color: #20794D;">\'</span><span class="st" style="color: #20794D;">s with V'</span>, fontsize<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">14</span>)</span>
<span id="cb18-3">plt.show()</span></code></pre></div>
<div class="cell-output cell-output-display">
<p><img src="https://sagarthacker.com/posts/kaggle/pss3e3-eda_files/figure-html/cell-14-output-1.png" class="img-fluid"></p>
</div>
</div>
<p>We find:</p>
<ul>
<li>Similar, to what we saw in the result from the <code>describe()</code> method, most of the data is centered around <code>0</code>.</li>
<li>Also, there are a lot of data points that appear to be outliers.</li>
<li>Few of the columns, for example, <code>V1</code> appear to be skewed.</li>
</ul>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2023-01-31T00:07:33.426671Z&quot;,&quot;iopub.status.busy&quot;:&quot;2023-01-31T00:07:33.426244Z&quot;,&quot;iopub.status.idle&quot;:&quot;2023-01-31T00:08:30.355562Z&quot;,&quot;shell.execute_reply&quot;:&quot;2023-01-31T00:08:30.354620Z&quot;}" data-papermill="{&quot;duration&quot;:56.982512,&quot;end_time&quot;:&quot;2023-01-31T00:08:30.396830&quot;,&quot;exception&quot;:false,&quot;start_time&quot;:&quot;2023-01-31T00:07:33.414318&quot;,&quot;status&quot;:&quot;completed&quot;}" data-tags="[]" data-execution_count="14">
<div class="sourceCode cell-code" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb19-1"><span class="co" style="color: #5E5E5E;"># Explore distribution of each feature for train and test sets.</span></span>
<span id="cb19-2"></span>
<span id="cb19-3">fig, axes <span class="op" style="color: #5E5E5E;">=</span> plt.subplots(nrows<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">29</span>, ncols<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">3</span>, figsize<span class="op" style="color: #5E5E5E;">=</span>(<span class="dv" style="color: #AD0000;">20</span>, <span class="dv" style="color: #AD0000;">5</span><span class="op" style="color: #5E5E5E;">*</span><span class="dv" style="color: #AD0000;">29</span>))</span>
<span id="cb19-4"></span>
<span id="cb19-5"><span class="cf" style="color: #003B4F;">for</span> row, col <span class="kw" style="color: #003B4F;">in</span> <span class="bu" style="color: null;">enumerate</span>(v_columns <span class="op" style="color: #5E5E5E;">+</span> [<span class="st" style="color: #20794D;">'Amount'</span>]):</span>
<span id="cb19-6">    sns.kdeplot(data<span class="op" style="color: #5E5E5E;">=</span>train, x<span class="op" style="color: #5E5E5E;">=</span>col, ax<span class="op" style="color: #5E5E5E;">=</span>axes[row, <span class="dv" style="color: #AD0000;">0</span>], fill<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>)</span>
<span id="cb19-7">    sns.kdeplot(data<span class="op" style="color: #5E5E5E;">=</span>test, x<span class="op" style="color: #5E5E5E;">=</span>col, ax<span class="op" style="color: #5E5E5E;">=</span>axes[row, <span class="dv" style="color: #AD0000;">0</span>], fill<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>)</span>
<span id="cb19-8">    axes[row, <span class="dv" style="color: #AD0000;">0</span>].set_title(<span class="st" style="color: #20794D;">'Density plot: '</span> <span class="op" style="color: #5E5E5E;">+</span> col, fontsize<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">14</span>)</span>
<span id="cb19-9">    axes[row, <span class="dv" style="color: #AD0000;">0</span>].legend()</span>
<span id="cb19-10">    axes[row, <span class="dv" style="color: #AD0000;">0</span>].set_xlabel(<span class="st" style="color: #20794D;">''</span>)</span>
<span id="cb19-11"></span>
<span id="cb19-12">    sns.boxplot(data<span class="op" style="color: #5E5E5E;">=</span>train, x<span class="op" style="color: #5E5E5E;">=</span>col, ax<span class="op" style="color: #5E5E5E;">=</span>axes[row, <span class="dv" style="color: #AD0000;">1</span>], orient<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'h'</span>)</span>
<span id="cb19-13">    axes[row, <span class="dv" style="color: #AD0000;">1</span>].set_title(<span class="st" style="color: #20794D;">'Box plot (Train): '</span> <span class="op" style="color: #5E5E5E;">+</span> col, fontsize<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">14</span>)</span>
<span id="cb19-14">    axes[row, <span class="dv" style="color: #AD0000;">1</span>].set_xlabel(<span class="st" style="color: #20794D;">''</span>)</span>
<span id="cb19-15"></span>
<span id="cb19-16">    sns.boxplot(data<span class="op" style="color: #5E5E5E;">=</span>test, x<span class="op" style="color: #5E5E5E;">=</span>col, ax<span class="op" style="color: #5E5E5E;">=</span>axes[row, <span class="dv" style="color: #AD0000;">2</span>], orient<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'h'</span>)</span>
<span id="cb19-17">    axes[row, <span class="dv" style="color: #AD0000;">2</span>].set_title(<span class="st" style="color: #20794D;">'Box plot (Test): '</span> <span class="op" style="color: #5E5E5E;">+</span> col, fontsize<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">14</span>)</span>
<span id="cb19-18">    axes[row, <span class="dv" style="color: #AD0000;">2</span>].set_xlabel(<span class="st" style="color: #20794D;">''</span>)</span>
<span id="cb19-19"></span>
<span id="cb19-20">fig.tight_layout()</span>
<span id="cb19-21">plt.show()</span></code></pre></div>
<div class="cell-output cell-output-display">
<p><img src="https://sagarthacker.com/posts/kaggle/pss3e3-eda_files/figure-html/cell-15-output-1.png" class="img-fluid"></p>
</div>
</div>
<p>We find:</p>
<ul>
<li>The distribution of train and test data are quite similar.</li>
<li>This helps to the model to better perform on the unseen data.</li>
</ul>
</section>
<section id="bivariate-analysis" class="level3">
<h3 class="anchored" data-anchor-id="bivariate-analysis">3.2. Bivariate Analysis</h3>
<ul>
<li>Creating a scatter plot for all combinations of features would be explode and be overwhelming.</li>
<li>I would encourage you to play with different combinations and look at the data distribution.</li>
<li>Using <code>pairplot</code> is also an good option but the graphs are too tiny to observe. You can definititely try using it and then explore any plot you find interesting.</li>
</ul>
<p>Below are some plot I found interesting.</p>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2023-01-31T00:08:30.539629Z&quot;,&quot;iopub.status.busy&quot;:&quot;2023-01-31T00:08:30.539232Z&quot;,&quot;iopub.status.idle&quot;:&quot;2023-01-31T00:09:28.489011Z&quot;,&quot;shell.execute_reply&quot;:&quot;2023-01-31T00:09:28.487627Z&quot;}" data-papermill="{&quot;duration&quot;:58.013888,&quot;end_time&quot;:&quot;2023-01-31T00:09:28.528536&quot;,&quot;exception&quot;:false,&quot;start_time&quot;:&quot;2023-01-31T00:08:30.514648&quot;,&quot;status&quot;:&quot;completed&quot;}" data-tags="[]" data-execution_count="15">
<div class="sourceCode cell-code" id="cb20" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb20-1">fig, axes <span class="op" style="color: #5E5E5E;">=</span> plt.subplots(nrows<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">3</span>, ncols<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">3</span>, figsize<span class="op" style="color: #5E5E5E;">=</span>(<span class="dv" style="color: #AD0000;">18</span>, <span class="dv" style="color: #AD0000;">12</span>))</span>
<span id="cb20-2"></span>
<span id="cb20-3">sns.scatterplot(data<span class="op" style="color: #5E5E5E;">=</span>train, x<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'V24'</span>, y<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'V2'</span>, hue<span class="op" style="color: #5E5E5E;">=</span>train.Class, ax<span class="op" style="color: #5E5E5E;">=</span>axes[<span class="dv" style="color: #AD0000;">0</span>, <span class="dv" style="color: #AD0000;">0</span>])</span>
<span id="cb20-4">axes[<span class="dv" style="color: #AD0000;">0</span>, <span class="dv" style="color: #AD0000;">0</span>].set_title(<span class="st" style="color: #20794D;">'V24 vs V2'</span>, fontsize<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">14</span>)</span>
<span id="cb20-5"></span>
<span id="cb20-6">sns.scatterplot(data<span class="op" style="color: #5E5E5E;">=</span>train, x<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'V10'</span>, y<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'V9'</span>, hue<span class="op" style="color: #5E5E5E;">=</span>train.Class, ax<span class="op" style="color: #5E5E5E;">=</span>axes[<span class="dv" style="color: #AD0000;">0</span>, <span class="dv" style="color: #AD0000;">1</span>])</span>
<span id="cb20-7">axes[<span class="dv" style="color: #AD0000;">0</span>, <span class="dv" style="color: #AD0000;">1</span>].set_title(<span class="st" style="color: #20794D;">'V10 vs V9'</span>, fontsize<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">14</span>)</span>
<span id="cb20-8"></span>
<span id="cb20-9">sns.scatterplot(data<span class="op" style="color: #5E5E5E;">=</span>train, x<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'V17'</span>, y<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'V2'</span>, hue<span class="op" style="color: #5E5E5E;">=</span>train.Class, ax<span class="op" style="color: #5E5E5E;">=</span>axes[<span class="dv" style="color: #AD0000;">0</span>, <span class="dv" style="color: #AD0000;">2</span>])</span>
<span id="cb20-10">axes[<span class="dv" style="color: #AD0000;">0</span>, <span class="dv" style="color: #AD0000;">2</span>].set_title(<span class="st" style="color: #20794D;">'V17 vs V2'</span>, fontsize<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">14</span>)</span>
<span id="cb20-11"></span>
<span id="cb20-12">sns.scatterplot(data<span class="op" style="color: #5E5E5E;">=</span>train, x<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'V20'</span>, y<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'V21'</span>, hue<span class="op" style="color: #5E5E5E;">=</span>train.Class, ax<span class="op" style="color: #5E5E5E;">=</span>axes[<span class="dv" style="color: #AD0000;">1</span>, <span class="dv" style="color: #AD0000;">0</span>])</span>
<span id="cb20-13">axes[<span class="dv" style="color: #AD0000;">1</span>, <span class="dv" style="color: #AD0000;">0</span>].set_title(<span class="st" style="color: #20794D;">'V20 vs V21'</span>, fontsize<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">14</span>)</span>
<span id="cb20-14"></span>
<span id="cb20-15">sns.scatterplot(data<span class="op" style="color: #5E5E5E;">=</span>train, x<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'V21'</span>, y<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'V22'</span>, hue<span class="op" style="color: #5E5E5E;">=</span>train.Class, ax<span class="op" style="color: #5E5E5E;">=</span>axes[<span class="dv" style="color: #AD0000;">1</span>, <span class="dv" style="color: #AD0000;">1</span>])</span>
<span id="cb20-16">axes[<span class="dv" style="color: #AD0000;">1</span>, <span class="dv" style="color: #AD0000;">1</span>].set_title(<span class="st" style="color: #20794D;">'V21 vs V22'</span>, fontsize<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">14</span>)</span>
<span id="cb20-17"></span>
<span id="cb20-18">sns.scatterplot(data<span class="op" style="color: #5E5E5E;">=</span>train, x<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'V21'</span>, y<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'V2'</span>, hue<span class="op" style="color: #5E5E5E;">=</span>train.Class, ax<span class="op" style="color: #5E5E5E;">=</span>axes[<span class="dv" style="color: #AD0000;">1</span>, <span class="dv" style="color: #AD0000;">2</span>])</span>
<span id="cb20-19">axes[<span class="dv" style="color: #AD0000;">1</span>, <span class="dv" style="color: #AD0000;">2</span>].set_title(<span class="st" style="color: #20794D;">'V21 vs V2'</span>, fontsize<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">14</span>)</span>
<span id="cb20-20"></span>
<span id="cb20-21">sns.scatterplot(data<span class="op" style="color: #5E5E5E;">=</span>train, x<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'V24'</span>, y<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'V1'</span>, hue<span class="op" style="color: #5E5E5E;">=</span>train.Class, ax<span class="op" style="color: #5E5E5E;">=</span>axes[<span class="dv" style="color: #AD0000;">2</span>, <span class="dv" style="color: #AD0000;">0</span>])</span>
<span id="cb20-22">axes[<span class="dv" style="color: #AD0000;">2</span>, <span class="dv" style="color: #AD0000;">0</span>].set_title(<span class="st" style="color: #20794D;">'V24 vs V1'</span>, fontsize<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">14</span>)</span>
<span id="cb20-23"></span>
<span id="cb20-24">sns.scatterplot(data<span class="op" style="color: #5E5E5E;">=</span>train, x<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'V15'</span>, y<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'V19'</span>, hue<span class="op" style="color: #5E5E5E;">=</span>train.Class, ax<span class="op" style="color: #5E5E5E;">=</span>axes[<span class="dv" style="color: #AD0000;">2</span>, <span class="dv" style="color: #AD0000;">1</span>])</span>
<span id="cb20-25">axes[<span class="dv" style="color: #AD0000;">2</span>, <span class="dv" style="color: #AD0000;">1</span>].set_title(<span class="st" style="color: #20794D;">'V15 vs V19'</span>, fontsize<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">14</span>)</span>
<span id="cb20-26"></span>
<span id="cb20-27">sns.scatterplot(data<span class="op" style="color: #5E5E5E;">=</span>train, x<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'V20'</span>, y<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'Amount'</span>,</span>
<span id="cb20-28">                hue<span class="op" style="color: #5E5E5E;">=</span>train.Class, ax<span class="op" style="color: #5E5E5E;">=</span>axes[<span class="dv" style="color: #AD0000;">2</span>, <span class="dv" style="color: #AD0000;">2</span>])</span>
<span id="cb20-29">axes[<span class="dv" style="color: #AD0000;">2</span>, <span class="dv" style="color: #AD0000;">2</span>].set_title(<span class="st" style="color: #20794D;">'V20 vs Amount'</span>, fontsize<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">14</span>)</span>
<span id="cb20-30"></span>
<span id="cb20-31">fig.tight_layout()</span>
<span id="cb20-32">plt.show()</span></code></pre></div>
<div class="cell-output cell-output-display">
<p><img src="https://sagarthacker.com/posts/kaggle/pss3e3-eda_files/figure-html/cell-16-output-1.png" class="img-fluid"></p>
</div>
</div>
<p>We find:</p>
<ul>
<li>Features such as <code>V9</code> and <code>V10</code>, <code>V21</code> and <code>V22</code> show some degree of correlation.</li>
<li>Whereas others are distributed in ramdom fashion.</li>
<li><code>V15</code> and <code>V19</code> are totall random and doesn’t show any patterns that can be useful for us.</li>
<li>There are small clusters, example in figure <code>V24 vs V1</code> where we don’t find any samples of data with <code>Class 1</code>.</li>
</ul>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2023-01-31T00:09:28.646429Z&quot;,&quot;iopub.status.busy&quot;:&quot;2023-01-31T00:09:28.646043Z&quot;,&quot;iopub.status.idle&quot;:&quot;2023-01-31T00:09:28.656975Z&quot;,&quot;shell.execute_reply&quot;:&quot;2023-01-31T00:09:28.655884Z&quot;}" data-papermill="{&quot;duration&quot;:0.044233,&quot;end_time&quot;:&quot;2023-01-31T00:09:28.659701&quot;,&quot;exception&quot;:false,&quot;start_time&quot;:&quot;2023-01-31T00:09:28.615468&quot;,&quot;status&quot;:&quot;completed&quot;}" data-tags="[]" data-execution_count="16">
<div class="sourceCode cell-code" id="cb21" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb21-1">train.V20<span class="op" style="color: #5E5E5E;">/</span>(train.Amount <span class="op" style="color: #5E5E5E;">+</span> <span class="fl" style="color: #AD0000;">1e-6</span>)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="16">
<pre><code>0        -0.147964
1         0.000782
2        -0.007946
3        -0.340089
4        -0.203627
            ...   
219124   -0.000985
219125   -0.004856
219126   -0.214989
219127   -0.002170
219128    0.015379
Length: 219129, dtype: float64</code></pre>
</div>
</div>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2023-01-31T00:09:28.721075Z&quot;,&quot;iopub.status.busy&quot;:&quot;2023-01-31T00:09:28.720227Z&quot;,&quot;iopub.status.idle&quot;:&quot;2023-01-31T00:09:33.246634Z&quot;,&quot;shell.execute_reply&quot;:&quot;2023-01-31T00:09:33.245421Z&quot;}" data-papermill="{&quot;duration&quot;:4.561717,&quot;end_time&quot;:&quot;2023-01-31T00:09:33.250806&quot;,&quot;exception&quot;:false,&quot;start_time&quot;:&quot;2023-01-31T00:09:28.689089&quot;,&quot;status&quot;:&quot;completed&quot;}" data-tags="[]" data-execution_count="17">
<div class="sourceCode cell-code" id="cb23" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb23-1"><span class="co" style="color: #5E5E5E;"># Look at heatmap for correlation between different numeric features</span></span>
<span id="cb23-2"></span>
<span id="cb23-3">corr <span class="op" style="color: #5E5E5E;">=</span> train[v_columns <span class="op" style="color: #5E5E5E;">+</span> [<span class="st" style="color: #20794D;">'Amount'</span>]].corr()</span>
<span id="cb23-4">fig <span class="op" style="color: #5E5E5E;">=</span> plt.figure(figsize<span class="op" style="color: #5E5E5E;">=</span>(<span class="dv" style="color: #AD0000;">25</span>, <span class="dv" style="color: #AD0000;">12</span>))</span>
<span id="cb23-5">sns.heatmap(corr, annot<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>, fmt<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">".2f"</span>)</span>
<span id="cb23-6">plt.show()</span></code></pre></div>
<div class="cell-output cell-output-display">
<p><img src="https://sagarthacker.com/posts/kaggle/pss3e3-eda_files/figure-html/cell-18-output-1.png" class="img-fluid"></p>
</div>
</div>
<p>We find:</p>
<ul>
<li><code>V20</code> and <code>Amount</code> has the highest value of positive correlation, followed by <code>V5</code> and <code>V6</code>, followed by <code>V21</code> and <code>V22</code></li>
<li><code>V2</code> and <code>Amount</code> has the highest value of negative correlation, followed by <code>V5</code> and <code>Amount</code>, followed by <code>V12</code> and <code>V14</code></li>
</ul>
</section>
</section>
<section id="conclusion" class="level2">
<h2 class="anchored" data-anchor-id="conclusion">4. Conclusion</h2>
<p>Thank you for reading and I hope you found this notebook helpful. You can find my modeling notebook <a href="https://www.kaggle.com/sagar118/pss3e4-ensemble-model">here</a></p>
<p>Any feedback is welcomed, I aim to learn and improve my skillset in my kaggle journey.</p>
<p>Upvote if you liked it, comment if you loved it. Hope to see you guys in the next one. Peace!</p>


</section>

 ]]></description>
  <category>Kaggle</category>
  <guid>https://sagarthacker.com/posts/kaggle/pss3e3-eda.html</guid>
  <pubDate>Mon, 30 Jan 2023 05:00:00 GMT</pubDate>
  <media:content url="https://sagarthacker.com/posts/kaggle/money.jpeg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Modeling - Playground Series Season 3, Episode 4</title>
  <dc:creator>Sagar Thacker</dc:creator>
  <link>https://sagarthacker.com/posts/kaggle/pss3e4-ensemble-model.html</link>
  <description><![CDATA[ 




<p>To read more about Exploratory Data Analysis for this problem statement, you can read my notebook <a href="./pss3e4-eda.html">here</a></p>
<p>It was my first try at a kaggle comptetion and I got a lot to learn. This notebook helped me get a score of:</p>
<ul>
<li>Public Score: 0.85646</li>
<li>Private score: 0.81208</li>
</ul>
<p>Position: 138/641</p>
<div class="cell" data-tags="[]" data-execution_count="1">
<details>
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="co" style="color: #5E5E5E;"># Import libraries</span></span>
<span id="cb1-2"></span>
<span id="cb1-3"><span class="im" style="color: #00769E;">import</span> numpy <span class="im" style="color: #00769E;">as</span> np</span>
<span id="cb1-4"><span class="im" style="color: #00769E;">import</span> pandas <span class="im" style="color: #00769E;">as</span> pd</span>
<span id="cb1-5"><span class="im" style="color: #00769E;">import</span> catboost</span>
<span id="cb1-6"><span class="im" style="color: #00769E;">import</span> seaborn <span class="im" style="color: #00769E;">as</span> sns</span>
<span id="cb1-7"><span class="im" style="color: #00769E;">import</span> matplotlib.pyplot <span class="im" style="color: #00769E;">as</span> plt</span>
<span id="cb1-8"></span>
<span id="cb1-9"><span class="im" style="color: #00769E;">from</span> sklearn.preprocessing <span class="im" style="color: #00769E;">import</span> RobustScaler</span>
<span id="cb1-10"><span class="im" style="color: #00769E;">from</span> sklearn.linear_model <span class="im" style="color: #00769E;">import</span> LogisticRegression</span>
<span id="cb1-11"><span class="im" style="color: #00769E;">from</span> sklearn.model_selection <span class="im" style="color: #00769E;">import</span> StratifiedKFold</span>
<span id="cb1-12"><span class="im" style="color: #00769E;">from</span> sklearn.metrics <span class="im" style="color: #00769E;">import</span> roc_auc_score</span>
<span id="cb1-13"><span class="im" style="color: #00769E;">from</span> collections <span class="im" style="color: #00769E;">import</span> defaultdict</span>
<span id="cb1-14"><span class="im" style="color: #00769E;">from</span> xgboost <span class="im" style="color: #00769E;">import</span> XGBClassifier</span>
<span id="cb1-15"><span class="im" style="color: #00769E;">from</span> lightgbm <span class="im" style="color: #00769E;">import</span> LGBMClassifier</span>
<span id="cb1-16"><span class="im" style="color: #00769E;">from</span> catboost <span class="im" style="color: #00769E;">import</span> CatBoostClassifier</span>
<span id="cb1-17"><span class="im" style="color: #00769E;">from</span> boruta <span class="im" style="color: #00769E;">import</span> BorutaPy</span>
<span id="cb1-18"></span>
<span id="cb1-19">pd.options.display.max_columns <span class="op" style="color: #5E5E5E;">=</span> <span class="va" style="color: #111111;">None</span></span>
<span id="cb1-20"><span class="op" style="color: #5E5E5E;">%</span>matplotlib inline</span></code></pre></div>
</details>
<div class="cell-output cell-output-display">

<style type="text/css">
.datatable table.frame { margin-bottom: 0; }
.datatable table.frame thead { border-bottom: none; }
.datatable table.frame tr.coltypes td {  color: #FFFFFF;  line-height: 6px;  padding: 0 0.5em;}
.datatable .bool    { background: #DDDD99; }
.datatable .object  { background: #565656; }
.datatable .int     { background: #5D9E5D; }
.datatable .float   { background: #4040CC; }
.datatable .str     { background: #CC4040; }
.datatable .time    { background: #40CC40; }
.datatable .row_index {  background: var(--jp-border-color3);  border-right: 1px solid var(--jp-border-color0);  color: var(--jp-ui-font-color3);  font-size: 9px;}
.datatable .frame tbody td { text-align: left; }
.datatable .frame tr.coltypes .row_index {  background: var(--jp-border-color0);}
.datatable th:nth-child(2) { padding-left: 12px; }
.datatable .hellipsis {  color: var(--jp-cell-editor-border-color);}
.datatable .vellipsis {  background: var(--jp-layout-color0);  color: var(--jp-cell-editor-border-color);}
.datatable .na {  color: var(--jp-cell-editor-border-color);  font-size: 80%;}
.datatable .sp {  opacity: 0.25;}
.datatable .footer { font-size: 9px; }
.datatable .frame_dimensions {  background: var(--jp-border-color3);  border-top: 1px solid var(--jp-border-color0);  color: var(--jp-ui-font-color3);  display: inline-block;  opacity: 0.6;  padding: 1px 10px 1px 5px;}
</style>
</div>
</div>
<section id="data-description" class="level2">
<h2 class="anchored" data-anchor-id="data-description">1. Data Description</h2>
<p>The dataset for this competition (both train and test) was generated from a deep learning model trained on the <a href="https://www.kaggle.com/datasets/mlg-ulb/creditcardfraud">Credit Card Fraud Detection</a>. Feature distributions are close to, but not exactly the same, as the original.</p>
<p>We are given three files:</p>
<ul>
<li>train.csv - the training dataset; Class is the target</li>
<li>test.csv - the test dataset; our objective is to predict Class</li>
<li>sample_submission.csv - a sample submission file in the correct format</li>
</ul>
<p>Description of each column:</p>
<table class="table">
<caption>Feature Description</caption>
<colgroup>
<col style="width: 10%">
<col style="width: 75%">
</colgroup>
<thead>
<tr class="header">
<th style="text-align: left;">Feature</th>
<th style="text-align: left;">Description</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: left;">id</td>
<td style="text-align: left;">Indentifier for unique rows</td>
</tr>
<tr class="even">
<td style="text-align: left;">Time</td>
<td style="text-align: left;">Number of seconds elapsed between this transaction and the first transaction in the dataset</td>
</tr>
<tr class="odd">
<td style="text-align: left;">V1-V28</td>
<td style="text-align: left;">Features generated from the original dataset</td>
</tr>
<tr class="even">
<td style="text-align: left;">Amount</td>
<td style="text-align: left;">Transaction amount</td>
</tr>
<tr class="odd">
<td style="text-align: left;">Class</td>
<td style="text-align: left;">Target Feature: 1 for fraudulent transactions, 0 otherwise</td>
</tr>
</tbody>
</table>
</section>
<section id="data-preparation" class="level2">
<h2 class="anchored" data-anchor-id="data-preparation">2. Data Preparation</h2>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2023-01-31T00:07:18.687884Z&quot;,&quot;iopub.status.busy&quot;:&quot;2023-01-31T00:07:18.687020Z&quot;,&quot;iopub.status.idle&quot;:&quot;2023-01-31T00:07:29.801630Z&quot;,&quot;shell.execute_reply&quot;:&quot;2023-01-31T00:07:29.800486Z&quot;}" data-papermill="{&quot;duration&quot;:11.129774,&quot;end_time&quot;:&quot;2023-01-31T00:07:29.804840&quot;,&quot;exception&quot;:false,&quot;start_time&quot;:&quot;2023-01-31T00:07:18.675066&quot;,&quot;status&quot;:&quot;completed&quot;}" data-tags="[]" data-execution_count="2">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb2-1">__dirname <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">'../input/playground-series-s3e4/'</span></span>
<span id="cb2-2">og_data <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">'/kaggle/input/creditcardfraud/creditcard.csv'</span></span>
<span id="cb2-3"></span>
<span id="cb2-4">train <span class="op" style="color: #5E5E5E;">=</span> pd.read_csv(__dirname <span class="op" style="color: #5E5E5E;">+</span> <span class="st" style="color: #20794D;">'train.csv'</span>)</span>
<span id="cb2-5">test <span class="op" style="color: #5E5E5E;">=</span> pd.read_csv(__dirname <span class="op" style="color: #5E5E5E;">+</span> <span class="st" style="color: #20794D;">'test.csv'</span>)</span>
<span id="cb2-6">original <span class="op" style="color: #5E5E5E;">=</span> pd.read_csv(og_data)</span>
<span id="cb2-7">submissions <span class="op" style="color: #5E5E5E;">=</span> pd.read_csv(__dirname <span class="op" style="color: #5E5E5E;">+</span> <span class="st" style="color: #20794D;">'sample_submission.csv'</span>)</span></code></pre></div>
</div>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2023-01-31T00:07:29.826937Z&quot;,&quot;iopub.status.busy&quot;:&quot;2023-01-31T00:07:29.826526Z&quot;,&quot;iopub.status.idle&quot;:&quot;2023-01-31T00:07:29.833271Z&quot;,&quot;shell.execute_reply&quot;:&quot;2023-01-31T00:07:29.831975Z&quot;}" data-papermill="{&quot;duration&quot;:0.022193,&quot;end_time&quot;:&quot;2023-01-31T00:07:29.837011&quot;,&quot;exception&quot;:false,&quot;start_time&quot;:&quot;2023-01-31T00:07:29.814818&quot;,&quot;status&quot;:&quot;completed&quot;}" data-tags="[]" data-execution_count="3">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb3-1"><span class="bu" style="color: null;">print</span>(<span class="ss" style="color: #20794D;">f"Training set has </span><span class="sc" style="color: #5E5E5E;">{</span>train<span class="sc" style="color: #5E5E5E;">.</span>shape[<span class="dv" style="color: #AD0000;">0</span>]<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;"> rows and </span><span class="sc" style="color: #5E5E5E;">{</span>train<span class="sc" style="color: #5E5E5E;">.</span>shape[<span class="dv" style="color: #AD0000;">1</span>]<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;"> columns"</span>)</span>
<span id="cb3-2"><span class="bu" style="color: null;">print</span>(<span class="ss" style="color: #20794D;">f"Testing set has </span><span class="sc" style="color: #5E5E5E;">{</span>test<span class="sc" style="color: #5E5E5E;">.</span>shape[<span class="dv" style="color: #AD0000;">0</span>]<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;"> rows and </span><span class="sc" style="color: #5E5E5E;">{</span>test<span class="sc" style="color: #5E5E5E;">.</span>shape[<span class="dv" style="color: #AD0000;">1</span>]<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;"> columns"</span>)</span>
<span id="cb3-3"><span class="bu" style="color: null;">print</span>(</span>
<span id="cb3-4">    <span class="ss" style="color: #20794D;">f"Original set has </span><span class="sc" style="color: #5E5E5E;">{</span>original<span class="sc" style="color: #5E5E5E;">.</span>shape[<span class="dv" style="color: #AD0000;">0</span>]<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;"> rows and </span><span class="sc" style="color: #5E5E5E;">{</span>original<span class="sc" style="color: #5E5E5E;">.</span>shape[<span class="dv" style="color: #AD0000;">1</span>]<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;"> columns"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Training set has 219129 rows and 32 columns
Testing set has 146087 rows and 31 columns
Original set has 284807 rows and 31 columns</code></pre>
</div>
</div>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2023-01-31T00:07:29.862204Z&quot;,&quot;iopub.status.busy&quot;:&quot;2023-01-31T00:07:29.861792Z&quot;,&quot;iopub.status.idle&quot;:&quot;2023-01-31T00:07:29.913095Z&quot;,&quot;shell.execute_reply&quot;:&quot;2023-01-31T00:07:29.911915Z&quot;}" data-papermill="{&quot;duration&quot;:0.066788,&quot;end_time&quot;:&quot;2023-01-31T00:07:29.916764&quot;,&quot;exception&quot;:false,&quot;start_time&quot;:&quot;2023-01-31T00:07:29.849976&quot;,&quot;status&quot;:&quot;completed&quot;}" data-tags="[]" data-execution_count="4">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb5-1"><span class="co" style="color: #5E5E5E;"># Check for missing values</span></span>
<span id="cb5-2"><span class="bu" style="color: null;">print</span>(<span class="ss" style="color: #20794D;">f"Number of missing values in training set: </span><span class="sc" style="color: #5E5E5E;">{</span><span class="bu" style="color: null;">sum</span>(train.isna().<span class="bu" style="color: null;">sum</span>())<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">"</span>)</span>
<span id="cb5-3"><span class="bu" style="color: null;">print</span>(<span class="ss" style="color: #20794D;">f"Number of missing values in testing set: </span><span class="sc" style="color: #5E5E5E;">{</span><span class="bu" style="color: null;">sum</span>(test.isna().<span class="bu" style="color: null;">sum</span>())<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">"</span>)</span>
<span id="cb5-4"><span class="bu" style="color: null;">print</span>(</span>
<span id="cb5-5">    <span class="ss" style="color: #20794D;">f"Number of missing values in original set: </span><span class="sc" style="color: #5E5E5E;">{</span><span class="bu" style="color: null;">sum</span>(original.isna().<span class="bu" style="color: null;">sum</span>())<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Number of missing values in training set: 0
Number of missing values in testing set: 0
Number of missing values in original set: 0</code></pre>
</div>
</div>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2023-01-31T00:07:29.940794Z&quot;,&quot;iopub.status.busy&quot;:&quot;2023-01-31T00:07:29.939477Z&quot;,&quot;iopub.status.idle&quot;:&quot;2023-01-31T00:07:30.020137Z&quot;,&quot;shell.execute_reply&quot;:&quot;2023-01-31T00:07:30.018845Z&quot;}" data-papermill="{&quot;duration&quot;:0.095047,&quot;end_time&quot;:&quot;2023-01-31T00:07:30.023021&quot;,&quot;exception&quot;:false,&quot;start_time&quot;:&quot;2023-01-31T00:07:29.927974&quot;,&quot;status&quot;:&quot;completed&quot;}" data-tags="[]" data-execution_count="5">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb7-1"><span class="co" style="color: #5E5E5E;"># Merge train and original</span></span>
<span id="cb7-2">train <span class="op" style="color: #5E5E5E;">=</span> pd.concat([train, original], axis<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">0</span>, ignore_index<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>)</span></code></pre></div>
</div>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2023-01-31T00:07:30.046076Z&quot;,&quot;iopub.status.busy&quot;:&quot;2023-01-31T00:07:30.045128Z&quot;,&quot;iopub.status.idle&quot;:&quot;2023-01-31T00:07:32.268150Z&quot;,&quot;shell.execute_reply&quot;:&quot;2023-01-31T00:07:32.266857Z&quot;}" data-papermill="{&quot;duration&quot;:2.237685,&quot;end_time&quot;:&quot;2023-01-31T00:07:32.270876&quot;,&quot;exception&quot;:false,&quot;start_time&quot;:&quot;2023-01-31T00:07:30.033191&quot;,&quot;status&quot;:&quot;completed&quot;}" data-tags="[]" data-execution_count="6">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb8-1">cols <span class="op" style="color: #5E5E5E;">=</span> [col <span class="cf" style="color: #003B4F;">for</span> col <span class="kw" style="color: #003B4F;">in</span> train.columns <span class="cf" style="color: #003B4F;">if</span> col <span class="kw" style="color: #003B4F;">not</span> <span class="kw" style="color: #003B4F;">in</span> [<span class="st" style="color: #20794D;">'id'</span>, <span class="st" style="color: #20794D;">'Time'</span>]]</span>
<span id="cb8-2"><span class="bu" style="color: null;">print</span>(<span class="st" style="color: #20794D;">' Number of duplicates with new criteria:'</span>,</span>
<span id="cb8-3">      train[cols].duplicated().<span class="bu" style="color: null;">sum</span>())</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code> Number of duplicates with new criteria: 9254</code></pre>
</div>
</div>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2023-01-31T00:07:32.292858Z&quot;,&quot;iopub.status.busy&quot;:&quot;2023-01-31T00:07:32.292466Z&quot;,&quot;iopub.status.idle&quot;:&quot;2023-01-31T00:07:34.472567Z&quot;,&quot;shell.execute_reply&quot;:&quot;2023-01-31T00:07:34.471288Z&quot;}" data-papermill="{&quot;duration&quot;:2.19435,&quot;end_time&quot;:&quot;2023-01-31T00:07:34.475174&quot;,&quot;exception&quot;:false,&quot;start_time&quot;:&quot;2023-01-31T00:07:32.280824&quot;,&quot;status&quot;:&quot;completed&quot;}" data-tags="[]" data-execution_count="7">
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb10-1"><span class="co" style="color: #5E5E5E;"># Drop Duplicates</span></span>
<span id="cb10-2">train.drop_duplicates(subset<span class="op" style="color: #5E5E5E;">=</span>cols, inplace<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>, keep<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'first'</span>)</span></code></pre></div>
</div>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2023-01-31T00:07:34.497565Z&quot;,&quot;iopub.status.busy&quot;:&quot;2023-01-31T00:07:34.497164Z&quot;,&quot;iopub.status.idle&quot;:&quot;2023-01-31T00:07:34.552240Z&quot;,&quot;shell.execute_reply&quot;:&quot;2023-01-31T00:07:34.550931Z&quot;}" data-papermill="{&quot;duration&quot;:0.069605,&quot;end_time&quot;:&quot;2023-01-31T00:07:34.554977&quot;,&quot;exception&quot;:false,&quot;start_time&quot;:&quot;2023-01-31T00:07:34.485372&quot;,&quot;status&quot;:&quot;completed&quot;}" data-tags="[]" data-execution_count="8">
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb11-1"><span class="co" style="color: #5E5E5E;"># Drop columns</span></span>
<span id="cb11-2">train.drop([<span class="st" style="color: #20794D;">'id'</span>, <span class="st" style="color: #20794D;">'Time'</span>], axis<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">1</span>, inplace<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>)</span>
<span id="cb11-3">test.drop([<span class="st" style="color: #20794D;">'id'</span>, <span class="st" style="color: #20794D;">'Time'</span>], axis<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">1</span>, inplace<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>)</span></code></pre></div>
</div>
</section>
<section id="modeling" class="level2">
<h2 class="anchored" data-anchor-id="modeling">3. Modeling</h2>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2023-01-31T00:07:34.597577Z&quot;,&quot;iopub.status.busy&quot;:&quot;2023-01-31T00:07:34.597122Z&quot;,&quot;iopub.status.idle&quot;:&quot;2023-01-31T00:07:35.349068Z&quot;,&quot;shell.execute_reply&quot;:&quot;2023-01-31T00:07:35.347863Z&quot;}" data-papermill="{&quot;duration&quot;:0.766532,&quot;end_time&quot;:&quot;2023-01-31T00:07:35.351824&quot;,&quot;exception&quot;:false,&quot;start_time&quot;:&quot;2023-01-31T00:07:34.585292&quot;,&quot;status&quot;:&quot;completed&quot;}" data-tags="[]" data-execution_count="9">
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb12-1"><span class="co" style="color: #5E5E5E;"># Perform feature scaling</span></span>
<span id="cb12-2">scaler <span class="op" style="color: #5E5E5E;">=</span> RobustScaler()</span>
<span id="cb12-3"></span>
<span id="cb12-4">cols <span class="op" style="color: #5E5E5E;">=</span> test.columns</span>
<span id="cb12-5">train[cols] <span class="op" style="color: #5E5E5E;">=</span> scaler.fit_transform(train[cols])</span>
<span id="cb12-6">test[cols] <span class="op" style="color: #5E5E5E;">=</span> scaler.transform(test[cols])</span></code></pre></div>
</div>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2023-01-31T00:07:35.374949Z&quot;,&quot;iopub.status.busy&quot;:&quot;2023-01-31T00:07:35.374488Z&quot;,&quot;iopub.status.idle&quot;:&quot;2023-01-31T00:07:35.419127Z&quot;,&quot;shell.execute_reply&quot;:&quot;2023-01-31T00:07:35.417953Z&quot;}" data-papermill="{&quot;duration&quot;:0.058662,&quot;end_time&quot;:&quot;2023-01-31T00:07:35.421529&quot;,&quot;exception&quot;:false,&quot;start_time&quot;:&quot;2023-01-31T00:07:35.362867&quot;,&quot;status&quot;:&quot;completed&quot;}" data-tags="[]" data-execution_count="10">
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb13-1">X_train, y_train <span class="op" style="color: #5E5E5E;">=</span> train.drop(<span class="st" style="color: #20794D;">'Class'</span>, axis<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">1</span>), train.Class</span></code></pre></div>
</div>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2023-01-31T00:07:35.443615Z&quot;,&quot;iopub.status.busy&quot;:&quot;2023-01-31T00:07:35.443171Z&quot;,&quot;iopub.status.idle&quot;:&quot;2023-01-31T00:07:35.447827Z&quot;,&quot;shell.execute_reply&quot;:&quot;2023-01-31T00:07:35.447047Z&quot;}" data-papermill="{&quot;duration&quot;:0.018245,&quot;end_time&quot;:&quot;2023-01-31T00:07:35.450019&quot;,&quot;exception&quot;:false,&quot;start_time&quot;:&quot;2023-01-31T00:07:35.431774&quot;,&quot;status&quot;:&quot;completed&quot;}" data-tags="[]" data-execution_count="11">
<div class="sourceCode cell-code" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb14-1"><span class="co" style="color: #5E5E5E;"># Dictionary to save model results</span></span>
<span id="cb14-2">results <span class="op" style="color: #5E5E5E;">=</span> defaultdict(<span class="kw" style="color: #003B4F;">lambda</span>: defaultdict(<span class="bu" style="color: null;">list</span>))</span></code></pre></div>
</div>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2023-01-31T00:07:35.471819Z&quot;,&quot;iopub.status.busy&quot;:&quot;2023-01-31T00:07:35.471381Z&quot;,&quot;iopub.status.idle&quot;:&quot;2023-01-31T00:07:35.476958Z&quot;,&quot;shell.execute_reply&quot;:&quot;2023-01-31T00:07:35.476045Z&quot;}" data-papermill="{&quot;duration&quot;:0.019227,&quot;end_time&quot;:&quot;2023-01-31T00:07:35.479249&quot;,&quot;exception&quot;:false,&quot;start_time&quot;:&quot;2023-01-31T00:07:35.460022&quot;,&quot;status&quot;:&quot;completed&quot;}" data-tags="[]" data-execution_count="12">
<div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb15-1"><span class="co" style="color: #5E5E5E;"># Function to plot feature importance</span></span>
<span id="cb15-2"><span class="kw" style="color: #003B4F;">def</span> plot_feature_imp(df, col):</span>
<span id="cb15-3">    df <span class="op" style="color: #5E5E5E;">=</span> pd.concat(df, axis<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">1</span>).head(<span class="dv" style="color: #AD0000;">15</span>)</span>
<span id="cb15-4">    df.sort_values(col).plot(kind<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'barh'</span>, figsize<span class="op" style="color: #5E5E5E;">=</span>(</span>
<span id="cb15-5">        <span class="dv" style="color: #AD0000;">15</span>, <span class="dv" style="color: #AD0000;">10</span>), title<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"Feature Imp Across Folds"</span>)</span>
<span id="cb15-6">    plt.show()</span></code></pre></div>
</div>
<section id="baseline-model" class="level3">
<h3 class="anchored" data-anchor-id="baseline-model">3.1. Baseline Model</h3>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2023-01-31T00:07:35.521139Z&quot;,&quot;iopub.status.busy&quot;:&quot;2023-01-31T00:07:35.520725Z&quot;,&quot;iopub.status.idle&quot;:&quot;2023-01-31T00:08:05.245112Z&quot;,&quot;shell.execute_reply&quot;:&quot;2023-01-31T00:08:05.243011Z&quot;}" data-papermill="{&quot;duration&quot;:29.741409,&quot;end_time&quot;:&quot;2023-01-31T00:08:05.250775&quot;,&quot;exception&quot;:false,&quot;start_time&quot;:&quot;2023-01-31T00:07:35.509366&quot;,&quot;status&quot;:&quot;completed&quot;}" data-tags="[]" data-execution_count="13">
<div class="sourceCode cell-code" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb16-1">n_folds <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">5</span></span>
<span id="cb16-2">seed <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">42</span></span>
<span id="cb16-3">model <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">'Logistic Regression'</span></span>
<span id="cb16-4"></span>
<span id="cb16-5">skf <span class="op" style="color: #5E5E5E;">=</span> StratifiedKFold(n_splits<span class="op" style="color: #5E5E5E;">=</span>n_folds, shuffle<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>, random_state<span class="op" style="color: #5E5E5E;">=</span>seed)</span>
<span id="cb16-6">test_pred <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">0</span></span>
<span id="cb16-7"></span>
<span id="cb16-8">results[model] <span class="op" style="color: #5E5E5E;">=</span> defaultdict(<span class="bu" style="color: null;">list</span>)</span>
<span id="cb16-9"></span>
<span id="cb16-10"><span class="cf" style="color: #003B4F;">for</span> idx, (train_idx, test_idx) <span class="kw" style="color: #003B4F;">in</span> <span class="bu" style="color: null;">enumerate</span>(skf.split(X_train, y_train)):</span>
<span id="cb16-11">    X, y <span class="op" style="color: #5E5E5E;">=</span> X_train.iloc[train_idx], y_train.iloc[train_idx]</span>
<span id="cb16-12">    X_valid, y_valid <span class="op" style="color: #5E5E5E;">=</span> X_train.iloc[test_idx], y_train.iloc[test_idx]</span>
<span id="cb16-13"></span>
<span id="cb16-14">    lr <span class="op" style="color: #5E5E5E;">=</span> LogisticRegression()</span>
<span id="cb16-15"></span>
<span id="cb16-16">    <span class="co" style="color: #5E5E5E;"># Fit the model</span></span>
<span id="cb16-17">    lr.fit(X, y)</span>
<span id="cb16-18">    <span class="co" style="color: #5E5E5E;"># Predict on validation set</span></span>
<span id="cb16-19">    pred_proba <span class="op" style="color: #5E5E5E;">=</span> lr.predict_proba(X_valid)[:, <span class="dv" style="color: #AD0000;">1</span>]</span>
<span id="cb16-20"></span>
<span id="cb16-21">    <span class="co" style="color: #5E5E5E;"># Predict on test set</span></span>
<span id="cb16-22">    test_pred_proba <span class="op" style="color: #5E5E5E;">=</span> lr.predict_proba(test)[:, <span class="dv" style="color: #AD0000;">1</span>]</span>
<span id="cb16-23">    test_pred <span class="op" style="color: #5E5E5E;">+=</span> test_pred_proba<span class="op" style="color: #5E5E5E;">/</span>n_folds</span>
<span id="cb16-24"></span>
<span id="cb16-25">    <span class="co" style="color: #5E5E5E;"># Calcualte AUC score</span></span>
<span id="cb16-26">    auc <span class="op" style="color: #5E5E5E;">=</span> roc_auc_score(y_valid, pred_proba)</span>
<span id="cb16-27"></span>
<span id="cb16-28">    <span class="co" style="color: #5E5E5E;"># Feature Importance</span></span>
<span id="cb16-29">    feature_imp <span class="op" style="color: #5E5E5E;">=</span> pd.DataFrame(index<span class="op" style="color: #5E5E5E;">=</span>X_train.columns,</span>
<span id="cb16-30">                               data<span class="op" style="color: #5E5E5E;">=</span>lr.coef_[<span class="dv" style="color: #AD0000;">0</span>],</span>
<span id="cb16-31">                               columns<span class="op" style="color: #5E5E5E;">=</span>[<span class="ss" style="color: #20794D;">f"</span><span class="sc" style="color: #5E5E5E;">{</span>idx <span class="op" style="color: #5E5E5E;">+</span> <span class="dv" style="color: #AD0000;">1</span><span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">_importance"</span>])</span>
<span id="cb16-32"></span>
<span id="cb16-33">    <span class="bu" style="color: null;">print</span>(<span class="ss" style="color: #20794D;">f"Fold=</span><span class="sc" style="color: #5E5E5E;">{</span>idx<span class="op" style="color: #5E5E5E;">+</span><span class="dv" style="color: #AD0000;">1</span><span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">, AUC score: </span><span class="sc" style="color: #5E5E5E;">{</span>auc<span class="sc" style="color: #5E5E5E;">:.2f}</span><span class="ss" style="color: #20794D;">"</span>)</span>
<span id="cb16-34"></span>
<span id="cb16-35">    <span class="co" style="color: #5E5E5E;"># Save Results</span></span>
<span id="cb16-36">    results[model][<span class="st" style="color: #20794D;">'auc'</span>].append(auc)</span>
<span id="cb16-37">    results[model][<span class="st" style="color: #20794D;">'model'</span>].append(lr)</span>
<span id="cb16-38">    results[model][<span class="st" style="color: #20794D;">'feature_imp'</span>].append(feature_imp)</span>
<span id="cb16-39"></span>
<span id="cb16-40">results[model][<span class="st" style="color: #20794D;">'test_pred'</span>] <span class="op" style="color: #5E5E5E;">=</span> test_pred</span>
<span id="cb16-41"><span class="bu" style="color: null;">print</span>(<span class="ss" style="color: #20794D;">f"Mean AUC: </span><span class="sc" style="color: #5E5E5E;">{</span>np<span class="sc" style="color: #5E5E5E;">.</span>mean(results[model][<span class="st" style="color: #20794D;">'auc'</span>])<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Fold=1, AUC score: 0.85
Fold=2, AUC score: 0.88
Fold=3, AUC score: 0.88
Fold=4, AUC score: 0.87
Fold=5, AUC score: 0.86
Mean AUC: 0.8679439362536849</code></pre>
</div>
</div>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2023-01-31T00:08:05.300095Z&quot;,&quot;iopub.status.busy&quot;:&quot;2023-01-31T00:08:05.299634Z&quot;,&quot;iopub.status.idle&quot;:&quot;2023-01-31T00:08:05.783083Z&quot;,&quot;shell.execute_reply&quot;:&quot;2023-01-31T00:08:05.781916Z&quot;}" data-papermill="{&quot;duration&quot;:0.505661,&quot;end_time&quot;:&quot;2023-01-31T00:08:05.785545&quot;,&quot;exception&quot;:false,&quot;start_time&quot;:&quot;2023-01-31T00:08:05.279884&quot;,&quot;status&quot;:&quot;completed&quot;}" data-tags="[]" data-execution_count="14">
<div class="sourceCode cell-code" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb18-1"><span class="co" style="color: #5E5E5E;"># Plot feature importance for logistic regression model</span></span>
<span id="cb18-2">plot_feature_imp(results[model][<span class="st" style="color: #20794D;">'feature_imp'</span>], <span class="st" style="color: #20794D;">"2_importance"</span>)</span></code></pre></div>
<div class="cell-output cell-output-display">
<p><img src="https://sagarthacker.com/posts/kaggle/pss3e4-ensemble-model_files/figure-html/cell-15-output-1.png" class="img-fluid"></p>
</div>
</div>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2023-01-31T00:08:05.810825Z&quot;,&quot;iopub.status.busy&quot;:&quot;2023-01-31T00:08:05.808567Z&quot;,&quot;iopub.status.idle&quot;:&quot;2023-01-31T00:08:06.183074Z&quot;,&quot;shell.execute_reply&quot;:&quot;2023-01-31T00:08:06.181848Z&quot;}" data-papermill="{&quot;duration&quot;:0.389397,&quot;end_time&quot;:&quot;2023-01-31T00:08:06.185869&quot;,&quot;exception&quot;:false,&quot;start_time&quot;:&quot;2023-01-31T00:08:05.796472&quot;,&quot;status&quot;:&quot;completed&quot;}" data-tags="[]" data-execution_count="15">
<div class="sourceCode cell-code" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb19-1"><span class="co" style="color: #5E5E5E;"># Made a baseline submission to see how the model performs</span></span>
<span id="cb19-2">lr_submission <span class="op" style="color: #5E5E5E;">=</span> submissions.copy()</span>
<span id="cb19-3">lr_submission[<span class="st" style="color: #20794D;">'Class'</span>] <span class="op" style="color: #5E5E5E;">=</span> results[model][<span class="st" style="color: #20794D;">'test_pred'</span>]</span>
<span id="cb19-4">lr_submission.to_csv(<span class="st" style="color: #20794D;">'lr_submission.csv'</span>, index<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">False</span>)</span></code></pre></div>
</div>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2023-01-31T00:08:06.209699Z&quot;,&quot;iopub.status.busy&quot;:&quot;2023-01-31T00:08:06.208759Z&quot;,&quot;iopub.status.idle&quot;:&quot;2023-01-31T00:08:06.222790Z&quot;,&quot;shell.execute_reply&quot;:&quot;2023-01-31T00:08:06.221811Z&quot;}" data-papermill="{&quot;duration&quot;:0.028525,&quot;end_time&quot;:&quot;2023-01-31T00:08:06.225284&quot;,&quot;exception&quot;:false,&quot;start_time&quot;:&quot;2023-01-31T00:08:06.196759&quot;,&quot;status&quot;:&quot;completed&quot;}" data-tags="[]" data-execution_count="16">
<div class="sourceCode cell-code" id="cb20" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb20-1">lr_submission.head()</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="16">

<div>

<table class="dataframe table table-sm table-striped">
  <thead>
    <tr>
      <th></th>
      <th>id</th>
      <th>Class</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td>219129</td>
      <td>0.001192</td>
    </tr>
    <tr>
      <th>1</th>
      <td>219130</td>
      <td>0.000621</td>
    </tr>
    <tr>
      <th>2</th>
      <td>219131</td>
      <td>0.000201</td>
    </tr>
    <tr>
      <th>3</th>
      <td>219132</td>
      <td>0.000699</td>
    </tr>
    <tr>
      <th>4</th>
      <td>219133</td>
      <td>0.000361</td>
    </tr>
  </tbody>
</table>
</div>
</div>
</div>
</section>
<section id="xgboost-classifier" class="level3">
<h3 class="anchored" data-anchor-id="xgboost-classifier">3.2. XGBoost Classifier</h3>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2023-01-31T00:08:06.271233Z&quot;,&quot;iopub.status.busy&quot;:&quot;2023-01-31T00:08:06.270163Z&quot;,&quot;iopub.status.idle&quot;:&quot;2023-01-31T00:08:06.275754Z&quot;,&quot;shell.execute_reply&quot;:&quot;2023-01-31T00:08:06.275020Z&quot;}" data-papermill="{&quot;duration&quot;:0.019659,&quot;end_time&quot;:&quot;2023-01-31T00:08:06.277810&quot;,&quot;exception&quot;:false,&quot;start_time&quot;:&quot;2023-01-31T00:08:06.258151&quot;,&quot;status&quot;:&quot;completed&quot;}" data-tags="[]" data-execution_count="17">
<div class="sourceCode cell-code" id="cb21" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb21-1">xgb_params <span class="op" style="color: #5E5E5E;">=</span> {</span>
<span id="cb21-2">    <span class="st" style="color: #20794D;">'n_estimators'</span>: <span class="dv" style="color: #AD0000;">2000</span>,</span>
<span id="cb21-3">    <span class="st" style="color: #20794D;">'min_child_weight'</span>: <span class="dv" style="color: #AD0000;">96</span>,</span>
<span id="cb21-4">    <span class="st" style="color: #20794D;">'max_depth'</span>: <span class="dv" style="color: #AD0000;">7</span>,</span>
<span id="cb21-5">    <span class="st" style="color: #20794D;">'learning_rate'</span>: <span class="fl" style="color: #AD0000;">0.18</span>,</span>
<span id="cb21-6">    <span class="st" style="color: #20794D;">'subsample'</span>: <span class="fl" style="color: #AD0000;">0.95</span>,</span>
<span id="cb21-7">    <span class="st" style="color: #20794D;">'colsample_bytree'</span>: <span class="fl" style="color: #AD0000;">0.95</span>,</span>
<span id="cb21-8">    <span class="st" style="color: #20794D;">'reg_lambda'</span>: <span class="fl" style="color: #AD0000;">1.50</span>,</span>
<span id="cb21-9">    <span class="st" style="color: #20794D;">'reg_alpha'</span>: <span class="fl" style="color: #AD0000;">1.50</span>,</span>
<span id="cb21-10">    <span class="st" style="color: #20794D;">'gamma'</span>: <span class="fl" style="color: #AD0000;">1.50</span>,</span>
<span id="cb21-11">    <span class="st" style="color: #20794D;">'max_bin'</span>: <span class="dv" style="color: #AD0000;">512</span>,</span>
<span id="cb21-12">    <span class="st" style="color: #20794D;">'random_state'</span>: seed,</span>
<span id="cb21-13">    <span class="st" style="color: #20794D;">'objective'</span>: <span class="st" style="color: #20794D;">'binary:logistic'</span>,</span>
<span id="cb21-14">    <span class="st" style="color: #20794D;">'tree_method'</span>: <span class="st" style="color: #20794D;">'hist'</span>,</span>
<span id="cb21-15">    <span class="st" style="color: #20794D;">'eval_metric'</span>: <span class="st" style="color: #20794D;">'auc'</span></span>
<span id="cb21-16">}</span></code></pre></div>
</div>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2023-01-31T00:08:06.301554Z&quot;,&quot;iopub.status.busy&quot;:&quot;2023-01-31T00:08:06.301087Z&quot;,&quot;iopub.status.idle&quot;:&quot;2023-01-31T00:11:57.598949Z&quot;,&quot;shell.execute_reply&quot;:&quot;2023-01-31T00:11:57.597585Z&quot;}" data-papermill="{&quot;duration&quot;:231.32394,&quot;end_time&quot;:&quot;2023-01-31T00:11:57.612685&quot;,&quot;exception&quot;:false,&quot;start_time&quot;:&quot;2023-01-31T00:08:06.288745&quot;,&quot;status&quot;:&quot;completed&quot;}" data-tags="[]" data-execution_count="18">
<div class="sourceCode cell-code" id="cb22" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb22-1">n_folds <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">5</span></span>
<span id="cb22-2">seed <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">42</span></span>
<span id="cb22-3">model <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">'XGBoostClassifier'</span></span>
<span id="cb22-4"></span>
<span id="cb22-5">skf <span class="op" style="color: #5E5E5E;">=</span> StratifiedKFold(n_splits<span class="op" style="color: #5E5E5E;">=</span>n_folds, shuffle<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>, random_state<span class="op" style="color: #5E5E5E;">=</span>seed)</span>
<span id="cb22-6">test_pred <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">0</span></span>
<span id="cb22-7"></span>
<span id="cb22-8">results[model] <span class="op" style="color: #5E5E5E;">=</span> defaultdict(<span class="bu" style="color: null;">list</span>)</span>
<span id="cb22-9"></span>
<span id="cb22-10"><span class="cf" style="color: #003B4F;">for</span> idx, (train_idx, test_idx) <span class="kw" style="color: #003B4F;">in</span> <span class="bu" style="color: null;">enumerate</span>(skf.split(X_train, y_train)):</span>
<span id="cb22-11">    X, y <span class="op" style="color: #5E5E5E;">=</span> X_train.iloc[train_idx], y_train.iloc[train_idx]</span>
<span id="cb22-12">    X_valid, y_valid <span class="op" style="color: #5E5E5E;">=</span> X_train.iloc[test_idx], y_train.iloc[test_idx]</span>
<span id="cb22-13"></span>
<span id="cb22-14">    xgb <span class="op" style="color: #5E5E5E;">=</span> XGBClassifier(<span class="op" style="color: #5E5E5E;">**</span>xgb_params)</span>
<span id="cb22-15"></span>
<span id="cb22-16">    <span class="co" style="color: #5E5E5E;"># Fit the model</span></span>
<span id="cb22-17">    xgb.fit(X, y)</span>
<span id="cb22-18">    <span class="co" style="color: #5E5E5E;"># Predict on validation set</span></span>
<span id="cb22-19">    pred_proba <span class="op" style="color: #5E5E5E;">=</span> xgb.predict_proba(X_valid)[:, <span class="dv" style="color: #AD0000;">1</span>]</span>
<span id="cb22-20"></span>
<span id="cb22-21">    <span class="co" style="color: #5E5E5E;"># Predict on test set</span></span>
<span id="cb22-22">    test_pred_proba <span class="op" style="color: #5E5E5E;">=</span> xgb.predict_proba(test)[:, <span class="dv" style="color: #AD0000;">1</span>]</span>
<span id="cb22-23">    test_pred <span class="op" style="color: #5E5E5E;">+=</span> test_pred_proba<span class="op" style="color: #5E5E5E;">/</span>n_folds</span>
<span id="cb22-24"></span>
<span id="cb22-25">    <span class="co" style="color: #5E5E5E;"># Calcualte AUC score</span></span>
<span id="cb22-26">    auc <span class="op" style="color: #5E5E5E;">=</span> roc_auc_score(y_valid, pred_proba)</span>
<span id="cb22-27"></span>
<span id="cb22-28">    <span class="co" style="color: #5E5E5E;"># Feature Importance</span></span>
<span id="cb22-29">    feature_imp <span class="op" style="color: #5E5E5E;">=</span> pd.DataFrame(index<span class="op" style="color: #5E5E5E;">=</span>X_train.columns,</span>
<span id="cb22-30">                               data<span class="op" style="color: #5E5E5E;">=</span>xgb.feature_importances_,</span>
<span id="cb22-31">                               columns<span class="op" style="color: #5E5E5E;">=</span>[<span class="ss" style="color: #20794D;">f"</span><span class="sc" style="color: #5E5E5E;">{</span>idx <span class="op" style="color: #5E5E5E;">+</span> <span class="dv" style="color: #AD0000;">1</span><span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">_importance"</span>])</span>
<span id="cb22-32"></span>
<span id="cb22-33">    <span class="bu" style="color: null;">print</span>(<span class="ss" style="color: #20794D;">f"Fold=</span><span class="sc" style="color: #5E5E5E;">{</span>idx<span class="op" style="color: #5E5E5E;">+</span><span class="dv" style="color: #AD0000;">1</span><span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">, AUC score: </span><span class="sc" style="color: #5E5E5E;">{</span>auc<span class="sc" style="color: #5E5E5E;">:.2f}</span><span class="ss" style="color: #20794D;">"</span>)</span>
<span id="cb22-34"></span>
<span id="cb22-35">    <span class="co" style="color: #5E5E5E;"># Save Results</span></span>
<span id="cb22-36">    results[model][<span class="st" style="color: #20794D;">'auc'</span>].append(auc)</span>
<span id="cb22-37">    results[model][<span class="st" style="color: #20794D;">'model'</span>].append(lr)</span>
<span id="cb22-38">    results[model][<span class="st" style="color: #20794D;">'feature_imp'</span>].append(feature_imp)</span>
<span id="cb22-39"></span>
<span id="cb22-40">results[model][<span class="st" style="color: #20794D;">'test_pred'</span>] <span class="op" style="color: #5E5E5E;">=</span> test_pred</span>
<span id="cb22-41"><span class="bu" style="color: null;">print</span>(<span class="ss" style="color: #20794D;">f"Mean AUC: </span><span class="sc" style="color: #5E5E5E;">{</span>np<span class="sc" style="color: #5E5E5E;">.</span>mean(results[model][<span class="st" style="color: #20794D;">'auc'</span>])<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Fold=1, AUC score: 0.88
Fold=2, AUC score: 0.90
Fold=3, AUC score: 0.91
Fold=4, AUC score: 0.89
Fold=5, AUC score: 0.90
Mean AUC: 0.8951748159271997</code></pre>
</div>
</div>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2023-01-31T00:11:57.637082Z&quot;,&quot;iopub.status.busy&quot;:&quot;2023-01-31T00:11:57.636668Z&quot;,&quot;iopub.status.idle&quot;:&quot;2023-01-31T00:11:58.083708Z&quot;,&quot;shell.execute_reply&quot;:&quot;2023-01-31T00:11:58.082573Z&quot;}" data-papermill="{&quot;duration&quot;:0.462515,&quot;end_time&quot;:&quot;2023-01-31T00:11:58.086459&quot;,&quot;exception&quot;:false,&quot;start_time&quot;:&quot;2023-01-31T00:11:57.623944&quot;,&quot;status&quot;:&quot;completed&quot;}" data-tags="[]" data-execution_count="19">
<div class="sourceCode cell-code" id="cb24" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb24-1"><span class="co" style="color: #5E5E5E;"># Plot feature importance for XGBoost model</span></span>
<span id="cb24-2">plot_feature_imp(results[model][<span class="st" style="color: #20794D;">'feature_imp'</span>], <span class="st" style="color: #20794D;">"2_importance"</span>)</span></code></pre></div>
<div class="cell-output cell-output-display">
<p><img src="https://sagarthacker.com/posts/kaggle/pss3e4-ensemble-model_files/figure-html/cell-20-output-1.png" class="img-fluid"></p>
</div>
</div>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2023-01-31T00:11:58.112768Z&quot;,&quot;iopub.status.busy&quot;:&quot;2023-01-31T00:11:58.111483Z&quot;,&quot;iopub.status.idle&quot;:&quot;2023-01-31T00:11:58.414163Z&quot;,&quot;shell.execute_reply&quot;:&quot;2023-01-31T00:11:58.412950Z&quot;}" data-papermill="{&quot;duration&quot;:0.3187,&quot;end_time&quot;:&quot;2023-01-31T00:11:58.417145&quot;,&quot;exception&quot;:false,&quot;start_time&quot;:&quot;2023-01-31T00:11:58.098445&quot;,&quot;status&quot;:&quot;completed&quot;}" data-tags="[]" data-execution_count="20">
<div class="sourceCode cell-code" id="cb25" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb25-1"><span class="co" style="color: #5E5E5E;"># Made a submission to see how the model performs</span></span>
<span id="cb25-2">xgb_submission <span class="op" style="color: #5E5E5E;">=</span> submissions.copy()</span>
<span id="cb25-3">xgb_submission[<span class="st" style="color: #20794D;">'Class'</span>] <span class="op" style="color: #5E5E5E;">=</span> results[model][<span class="st" style="color: #20794D;">'test_pred'</span>]</span>
<span id="cb25-4">xgb_submission.to_csv(<span class="st" style="color: #20794D;">'xgb_submission.csv'</span>, index<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">False</span>)</span></code></pre></div>
</div>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2023-01-31T00:11:58.443171Z&quot;,&quot;iopub.status.busy&quot;:&quot;2023-01-31T00:11:58.442682Z&quot;,&quot;iopub.status.idle&quot;:&quot;2023-01-31T00:11:58.453599Z&quot;,&quot;shell.execute_reply&quot;:&quot;2023-01-31T00:11:58.452333Z&quot;}" data-papermill="{&quot;duration&quot;:0.027654,&quot;end_time&quot;:&quot;2023-01-31T00:11:58.456542&quot;,&quot;exception&quot;:false,&quot;start_time&quot;:&quot;2023-01-31T00:11:58.428888&quot;,&quot;status&quot;:&quot;completed&quot;}" data-tags="[]" data-execution_count="21">
<div class="sourceCode cell-code" id="cb26" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb26-1">xgb_submission.head()</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="21">

<div>

<table class="dataframe table table-sm table-striped">
  <thead>
    <tr>
      <th></th>
      <th>id</th>
      <th>Class</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td>219129</td>
      <td>0.001166</td>
    </tr>
    <tr>
      <th>1</th>
      <td>219130</td>
      <td>0.000573</td>
    </tr>
    <tr>
      <th>2</th>
      <td>219131</td>
      <td>0.000367</td>
    </tr>
    <tr>
      <th>3</th>
      <td>219132</td>
      <td>0.001084</td>
    </tr>
    <tr>
      <th>4</th>
      <td>219133</td>
      <td>0.000131</td>
    </tr>
  </tbody>
</table>
</div>
</div>
</div>
</section>
<section id="lightgbm-classifier" class="level3">
<h3 class="anchored" data-anchor-id="lightgbm-classifier">3.3. LightGBM Classifier</h3>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2023-01-31T00:11:58.506474Z&quot;,&quot;iopub.status.busy&quot;:&quot;2023-01-31T00:11:58.505351Z&quot;,&quot;iopub.status.idle&quot;:&quot;2023-01-31T00:11:58.512047Z&quot;,&quot;shell.execute_reply&quot;:&quot;2023-01-31T00:11:58.511208Z&quot;}" data-papermill="{&quot;duration&quot;:0.02248,&quot;end_time&quot;:&quot;2023-01-31T00:11:58.514356&quot;,&quot;exception&quot;:false,&quot;start_time&quot;:&quot;2023-01-31T00:11:58.491876&quot;,&quot;status&quot;:&quot;completed&quot;}" data-tags="[]" data-execution_count="22">
<div class="sourceCode cell-code" id="cb27" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb27-1">lgbm_params <span class="op" style="color: #5E5E5E;">=</span> {</span>
<span id="cb27-2">    <span class="st" style="color: #20794D;">'n_estimators'</span>: <span class="dv" style="color: #AD0000;">500</span>,</span>
<span id="cb27-3">    <span class="st" style="color: #20794D;">'learning_rate'</span>: <span class="fl" style="color: #AD0000;">0.1</span>,</span>
<span id="cb27-4">    <span class="st" style="color: #20794D;">'num_leaves'</span>: <span class="dv" style="color: #AD0000;">195</span>,</span>
<span id="cb27-5">    <span class="st" style="color: #20794D;">'max_depth'</span>: <span class="dv" style="color: #AD0000;">9</span>,</span>
<span id="cb27-6">    <span class="st" style="color: #20794D;">'min_data_in_leaf'</span>: <span class="dv" style="color: #AD0000;">46</span>,</span>
<span id="cb27-7">    <span class="st" style="color: #20794D;">'lambda_l1'</span>: <span class="fl" style="color: #AD0000;">0.01</span>,</span>
<span id="cb27-8">    <span class="st" style="color: #20794D;">'lambda_l2'</span>: <span class="fl" style="color: #AD0000;">0.6</span>,</span>
<span id="cb27-9">    <span class="st" style="color: #20794D;">'min_gain_to_split'</span>: <span class="fl" style="color: #AD0000;">1.42</span>,</span>
<span id="cb27-10">    <span class="st" style="color: #20794D;">'bagging_fraction'</span>: <span class="fl" style="color: #AD0000;">0.45</span>,</span>
<span id="cb27-11">    <span class="st" style="color: #20794D;">'feature_fraction'</span>: <span class="fl" style="color: #AD0000;">0.3</span>,</span>
<span id="cb27-12">    <span class="st" style="color: #20794D;">'verbosity'</span>: <span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">1</span>,</span>
<span id="cb27-13">    <span class="st" style="color: #20794D;">'boosting_type'</span>: <span class="st" style="color: #20794D;">'dart'</span>,</span>
<span id="cb27-14">    <span class="st" style="color: #20794D;">'random_state'</span>: seed,</span>
<span id="cb27-15">    <span class="st" style="color: #20794D;">'objective'</span>: <span class="st" style="color: #20794D;">'binary'</span></span>
<span id="cb27-16">}</span></code></pre></div>
</div>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2023-01-31T00:11:58.540127Z&quot;,&quot;iopub.status.busy&quot;:&quot;2023-01-31T00:11:58.539465Z&quot;,&quot;iopub.status.idle&quot;:&quot;2023-01-31T00:24:42.601665Z&quot;,&quot;shell.execute_reply&quot;:&quot;2023-01-31T00:24:42.600211Z&quot;}" data-papermill="{&quot;duration&quot;:764.089406,&quot;end_time&quot;:&quot;2023-01-31T00:24:42.615490&quot;,&quot;exception&quot;:false,&quot;start_time&quot;:&quot;2023-01-31T00:11:58.526084&quot;,&quot;status&quot;:&quot;completed&quot;}" data-tags="[]" data-execution_count="23">
<div class="sourceCode cell-code" id="cb28" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb28-1">n_folds <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">5</span></span>
<span id="cb28-2">seed <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">42</span></span>
<span id="cb28-3">model <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">'LGBMClassifier'</span></span>
<span id="cb28-4"></span>
<span id="cb28-5">skf <span class="op" style="color: #5E5E5E;">=</span> StratifiedKFold(n_splits<span class="op" style="color: #5E5E5E;">=</span>n_folds, shuffle<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>, random_state<span class="op" style="color: #5E5E5E;">=</span>seed)</span>
<span id="cb28-6">test_pred <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">0</span></span>
<span id="cb28-7"></span>
<span id="cb28-8">results[model] <span class="op" style="color: #5E5E5E;">=</span> defaultdict(<span class="bu" style="color: null;">list</span>)</span>
<span id="cb28-9"></span>
<span id="cb28-10"><span class="cf" style="color: #003B4F;">for</span> idx, (train_idx, test_idx) <span class="kw" style="color: #003B4F;">in</span> <span class="bu" style="color: null;">enumerate</span>(skf.split(X_train, y_train)):</span>
<span id="cb28-11">    X, y <span class="op" style="color: #5E5E5E;">=</span> X_train.iloc[train_idx], y_train.iloc[train_idx]</span>
<span id="cb28-12">    X_valid, y_valid <span class="op" style="color: #5E5E5E;">=</span> X_train.iloc[test_idx], y_train.iloc[test_idx]</span>
<span id="cb28-13"></span>
<span id="cb28-14">    lgbm <span class="op" style="color: #5E5E5E;">=</span> LGBMClassifier(<span class="op" style="color: #5E5E5E;">**</span>lgbm_params)</span>
<span id="cb28-15"></span>
<span id="cb28-16">    <span class="co" style="color: #5E5E5E;"># Fit the model</span></span>
<span id="cb28-17">    lgbm.fit(X, y)</span>
<span id="cb28-18">    <span class="co" style="color: #5E5E5E;"># Predict on validation set</span></span>
<span id="cb28-19">    pred_proba <span class="op" style="color: #5E5E5E;">=</span> lgbm.predict_proba(X_valid)[:, <span class="dv" style="color: #AD0000;">1</span>]</span>
<span id="cb28-20"></span>
<span id="cb28-21">    <span class="co" style="color: #5E5E5E;"># Predict on test set</span></span>
<span id="cb28-22">    test_pred_proba <span class="op" style="color: #5E5E5E;">=</span> lgbm.predict_proba(test)[:, <span class="dv" style="color: #AD0000;">1</span>]</span>
<span id="cb28-23">    test_pred <span class="op" style="color: #5E5E5E;">+=</span> test_pred_proba<span class="op" style="color: #5E5E5E;">/</span>n_folds</span>
<span id="cb28-24"></span>
<span id="cb28-25">    <span class="co" style="color: #5E5E5E;"># Calcualte AUC score</span></span>
<span id="cb28-26">    auc <span class="op" style="color: #5E5E5E;">=</span> roc_auc_score(y_valid, pred_proba)</span>
<span id="cb28-27"></span>
<span id="cb28-28">    <span class="co" style="color: #5E5E5E;"># Feature Importance</span></span>
<span id="cb28-29">    feature_imp <span class="op" style="color: #5E5E5E;">=</span> pd.DataFrame(index<span class="op" style="color: #5E5E5E;">=</span>X_train.columns,</span>
<span id="cb28-30">                               data<span class="op" style="color: #5E5E5E;">=</span>lgbm.feature_importances_,</span>
<span id="cb28-31">                               columns<span class="op" style="color: #5E5E5E;">=</span>[<span class="ss" style="color: #20794D;">f"</span><span class="sc" style="color: #5E5E5E;">{</span>idx <span class="op" style="color: #5E5E5E;">+</span> <span class="dv" style="color: #AD0000;">1</span><span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">_importance"</span>])</span>
<span id="cb28-32"></span>
<span id="cb28-33">    <span class="bu" style="color: null;">print</span>(<span class="ss" style="color: #20794D;">f"Fold=</span><span class="sc" style="color: #5E5E5E;">{</span>idx<span class="op" style="color: #5E5E5E;">+</span><span class="dv" style="color: #AD0000;">1</span><span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">, AUC score: </span><span class="sc" style="color: #5E5E5E;">{</span>auc<span class="sc" style="color: #5E5E5E;">:.2f}</span><span class="ss" style="color: #20794D;">"</span>)</span>
<span id="cb28-34"></span>
<span id="cb28-35">    <span class="co" style="color: #5E5E5E;"># Save Results</span></span>
<span id="cb28-36">    results[model][<span class="st" style="color: #20794D;">'auc'</span>].append(auc)</span>
<span id="cb28-37">    results[model][<span class="st" style="color: #20794D;">'model'</span>].append(lr)</span>
<span id="cb28-38">    results[model][<span class="st" style="color: #20794D;">'feature_imp'</span>].append(feature_imp)</span>
<span id="cb28-39"></span>
<span id="cb28-40">results[model][<span class="st" style="color: #20794D;">'test_pred'</span>] <span class="op" style="color: #5E5E5E;">=</span> test_pred</span>
<span id="cb28-41"><span class="bu" style="color: null;">print</span>(<span class="ss" style="color: #20794D;">f"Mean AUC: </span><span class="sc" style="color: #5E5E5E;">{</span>np<span class="sc" style="color: #5E5E5E;">.</span>mean(results[model][<span class="st" style="color: #20794D;">'auc'</span>])<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[LightGBM] [Warning] lambda_l1 is set=0.01, reg_alpha=0.0 will be ignored. Current value: lambda_l1=0.01
[LightGBM] [Warning] bagging_fraction is set=0.45, subsample=1.0 will be ignored. Current value: bagging_fraction=0.45
[LightGBM] [Warning] min_data_in_leaf is set=46, min_child_samples=20 will be ignored. Current value: min_data_in_leaf=46
[LightGBM] [Warning] feature_fraction is set=0.3, colsample_bytree=1.0 will be ignored. Current value: feature_fraction=0.3
[LightGBM] [Warning] min_gain_to_split is set=1.42, min_split_gain=0.0 will be ignored. Current value: min_gain_to_split=1.42
[LightGBM] [Warning] lambda_l2 is set=0.6, reg_lambda=0.0 will be ignored. Current value: lambda_l2=0.6
Fold=1, AUC score: 0.89
[LightGBM] [Warning] lambda_l1 is set=0.01, reg_alpha=0.0 will be ignored. Current value: lambda_l1=0.01
[LightGBM] [Warning] bagging_fraction is set=0.45, subsample=1.0 will be ignored. Current value: bagging_fraction=0.45
[LightGBM] [Warning] min_data_in_leaf is set=46, min_child_samples=20 will be ignored. Current value: min_data_in_leaf=46
[LightGBM] [Warning] feature_fraction is set=0.3, colsample_bytree=1.0 will be ignored. Current value: feature_fraction=0.3
[LightGBM] [Warning] min_gain_to_split is set=1.42, min_split_gain=0.0 will be ignored. Current value: min_gain_to_split=1.42
[LightGBM] [Warning] lambda_l2 is set=0.6, reg_lambda=0.0 will be ignored. Current value: lambda_l2=0.6
Fold=2, AUC score: 0.90
[LightGBM] [Warning] lambda_l1 is set=0.01, reg_alpha=0.0 will be ignored. Current value: lambda_l1=0.01
[LightGBM] [Warning] bagging_fraction is set=0.45, subsample=1.0 will be ignored. Current value: bagging_fraction=0.45
[LightGBM] [Warning] min_data_in_leaf is set=46, min_child_samples=20 will be ignored. Current value: min_data_in_leaf=46
[LightGBM] [Warning] feature_fraction is set=0.3, colsample_bytree=1.0 will be ignored. Current value: feature_fraction=0.3
[LightGBM] [Warning] min_gain_to_split is set=1.42, min_split_gain=0.0 will be ignored. Current value: min_gain_to_split=1.42
[LightGBM] [Warning] lambda_l2 is set=0.6, reg_lambda=0.0 will be ignored. Current value: lambda_l2=0.6
Fold=3, AUC score: 0.91
[LightGBM] [Warning] lambda_l1 is set=0.01, reg_alpha=0.0 will be ignored. Current value: lambda_l1=0.01
[LightGBM] [Warning] bagging_fraction is set=0.45, subsample=1.0 will be ignored. Current value: bagging_fraction=0.45
[LightGBM] [Warning] min_data_in_leaf is set=46, min_child_samples=20 will be ignored. Current value: min_data_in_leaf=46
[LightGBM] [Warning] feature_fraction is set=0.3, colsample_bytree=1.0 will be ignored. Current value: feature_fraction=0.3
[LightGBM] [Warning] min_gain_to_split is set=1.42, min_split_gain=0.0 will be ignored. Current value: min_gain_to_split=1.42
[LightGBM] [Warning] lambda_l2 is set=0.6, reg_lambda=0.0 will be ignored. Current value: lambda_l2=0.6
Fold=4, AUC score: 0.89
[LightGBM] [Warning] lambda_l1 is set=0.01, reg_alpha=0.0 will be ignored. Current value: lambda_l1=0.01
[LightGBM] [Warning] bagging_fraction is set=0.45, subsample=1.0 will be ignored. Current value: bagging_fraction=0.45
[LightGBM] [Warning] min_data_in_leaf is set=46, min_child_samples=20 will be ignored. Current value: min_data_in_leaf=46
[LightGBM] [Warning] feature_fraction is set=0.3, colsample_bytree=1.0 will be ignored. Current value: feature_fraction=0.3
[LightGBM] [Warning] min_gain_to_split is set=1.42, min_split_gain=0.0 will be ignored. Current value: min_gain_to_split=1.42
[LightGBM] [Warning] lambda_l2 is set=0.6, reg_lambda=0.0 will be ignored. Current value: lambda_l2=0.6
Fold=5, AUC score: 0.90
Mean AUC: 0.8997556737837178</code></pre>
</div>
</div>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2023-01-31T00:24:42.642411Z&quot;,&quot;iopub.status.busy&quot;:&quot;2023-01-31T00:24:42.641994Z&quot;,&quot;iopub.status.idle&quot;:&quot;2023-01-31T00:24:43.233394Z&quot;,&quot;shell.execute_reply&quot;:&quot;2023-01-31T00:24:43.232217Z&quot;}" data-papermill="{&quot;duration&quot;:0.608029,&quot;end_time&quot;:&quot;2023-01-31T00:24:43.235839&quot;,&quot;exception&quot;:false,&quot;start_time&quot;:&quot;2023-01-31T00:24:42.627810&quot;,&quot;status&quot;:&quot;completed&quot;}" data-tags="[]" data-execution_count="24">
<div class="sourceCode cell-code" id="cb30" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb30-1"><span class="co" style="color: #5E5E5E;"># Plot feature importance for LightGBM model</span></span>
<span id="cb30-2">plot_feature_imp(results[model][<span class="st" style="color: #20794D;">'feature_imp'</span>], <span class="st" style="color: #20794D;">"4_importance"</span>)</span></code></pre></div>
<div class="cell-output cell-output-display">
<p><img src="https://sagarthacker.com/posts/kaggle/pss3e4-ensemble-model_files/figure-html/cell-25-output-1.png" class="img-fluid"></p>
</div>
</div>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2023-01-31T00:24:43.263490Z&quot;,&quot;iopub.status.busy&quot;:&quot;2023-01-31T00:24:43.263040Z&quot;,&quot;iopub.status.idle&quot;:&quot;2023-01-31T00:24:43.632980Z&quot;,&quot;shell.execute_reply&quot;:&quot;2023-01-31T00:24:43.631852Z&quot;}" data-papermill="{&quot;duration&quot;:0.386842,&quot;end_time&quot;:&quot;2023-01-31T00:24:43.635687&quot;,&quot;exception&quot;:false,&quot;start_time&quot;:&quot;2023-01-31T00:24:43.248845&quot;,&quot;status&quot;:&quot;completed&quot;}" data-tags="[]" data-execution_count="25">
<div class="sourceCode cell-code" id="cb31" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb31-1"><span class="co" style="color: #5E5E5E;"># Made a submission to see how the model performs</span></span>
<span id="cb31-2">lgbm_submission <span class="op" style="color: #5E5E5E;">=</span> submissions.copy()</span>
<span id="cb31-3">lgbm_submission[<span class="st" style="color: #20794D;">'Class'</span>] <span class="op" style="color: #5E5E5E;">=</span> results[model][<span class="st" style="color: #20794D;">'test_pred'</span>]</span>
<span id="cb31-4">lgbm_submission.to_csv(<span class="st" style="color: #20794D;">'lgbm_submission.csv'</span>, index<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">False</span>)</span></code></pre></div>
</div>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2023-01-31T00:24:43.664292Z&quot;,&quot;iopub.status.busy&quot;:&quot;2023-01-31T00:24:43.663862Z&quot;,&quot;iopub.status.idle&quot;:&quot;2023-01-31T00:24:43.674603Z&quot;,&quot;shell.execute_reply&quot;:&quot;2023-01-31T00:24:43.673435Z&quot;}" data-papermill="{&quot;duration&quot;:0.027934,&quot;end_time&quot;:&quot;2023-01-31T00:24:43.676711&quot;,&quot;exception&quot;:false,&quot;start_time&quot;:&quot;2023-01-31T00:24:43.648777&quot;,&quot;status&quot;:&quot;completed&quot;}" data-tags="[]" data-execution_count="26">
<div class="sourceCode cell-code" id="cb32" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb32-1">lgbm_submission.head()</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="26">

<div>

<table class="dataframe table table-sm table-striped">
  <thead>
    <tr>
      <th></th>
      <th>id</th>
      <th>Class</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td>219129</td>
      <td>0.001045</td>
    </tr>
    <tr>
      <th>1</th>
      <td>219130</td>
      <td>0.000622</td>
    </tr>
    <tr>
      <th>2</th>
      <td>219131</td>
      <td>0.000337</td>
    </tr>
    <tr>
      <th>3</th>
      <td>219132</td>
      <td>0.000817</td>
    </tr>
    <tr>
      <th>4</th>
      <td>219133</td>
      <td>0.000307</td>
    </tr>
  </tbody>
</table>
</div>
</div>
</div>
</section>
<section id="catboot-classifier" class="level3">
<h3 class="anchored" data-anchor-id="catboot-classifier">3.4. CatBoot Classifier</h3>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2023-01-31T00:24:43.730300Z&quot;,&quot;iopub.status.busy&quot;:&quot;2023-01-31T00:24:43.729891Z&quot;,&quot;iopub.status.idle&quot;:&quot;2023-01-31T00:24:43.735957Z&quot;,&quot;shell.execute_reply&quot;:&quot;2023-01-31T00:24:43.734894Z&quot;}" data-papermill="{&quot;duration&quot;:0.022421,&quot;end_time&quot;:&quot;2023-01-31T00:24:43.738242&quot;,&quot;exception&quot;:false,&quot;start_time&quot;:&quot;2023-01-31T00:24:43.715821&quot;,&quot;status&quot;:&quot;completed&quot;}" data-tags="[]" data-execution_count="27">
<div class="sourceCode cell-code" id="cb33" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb33-1">catboost_params <span class="op" style="color: #5E5E5E;">=</span> {</span>
<span id="cb33-2">    <span class="st" style="color: #20794D;">'n_estimators'</span>: <span class="dv" style="color: #AD0000;">500</span>,</span>
<span id="cb33-3">    <span class="st" style="color: #20794D;">'learning_rate'</span>: <span class="fl" style="color: #AD0000;">0.1</span>,</span>
<span id="cb33-4">    <span class="st" style="color: #20794D;">'one_hot_max_size'</span>: <span class="dv" style="color: #AD0000;">12</span>,</span>
<span id="cb33-5">    <span class="st" style="color: #20794D;">'depth'</span>: <span class="dv" style="color: #AD0000;">9</span>,</span>
<span id="cb33-6">    <span class="st" style="color: #20794D;">'l2_leaf_reg'</span>: <span class="fl" style="color: #AD0000;">0.6</span>,</span>
<span id="cb33-7">    <span class="st" style="color: #20794D;">'colsample_bylevel'</span>: <span class="fl" style="color: #AD0000;">0.06</span>,</span>
<span id="cb33-8">    <span class="st" style="color: #20794D;">'min_data_in_leaf'</span>: <span class="dv" style="color: #AD0000;">12</span>,</span>
<span id="cb33-9">    <span class="st" style="color: #20794D;">'bootstrap_type'</span>: <span class="st" style="color: #20794D;">'Bernoulli'</span>,</span>
<span id="cb33-10">    <span class="st" style="color: #20794D;">'verbose'</span>: <span class="va" style="color: #111111;">False</span>,</span>
<span id="cb33-11">    <span class="st" style="color: #20794D;">'random_state'</span>: seed,</span>
<span id="cb33-12">    <span class="st" style="color: #20794D;">'objective'</span>: <span class="st" style="color: #20794D;">'Logloss'</span>,</span>
<span id="cb33-13">    <span class="st" style="color: #20794D;">'eval_metric'</span>: <span class="st" style="color: #20794D;">'AUC'</span></span>
<span id="cb33-14">}</span></code></pre></div>
</div>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2023-01-31T00:24:43.766431Z&quot;,&quot;iopub.status.busy&quot;:&quot;2023-01-31T00:24:43.765794Z&quot;,&quot;iopub.status.idle&quot;:&quot;2023-01-31T00:26:27.341855Z&quot;,&quot;shell.execute_reply&quot;:&quot;2023-01-31T00:26:27.340194Z&quot;}" data-papermill="{&quot;duration&quot;:103.594006,&quot;end_time&quot;:&quot;2023-01-31T00:26:27.345141&quot;,&quot;exception&quot;:false,&quot;start_time&quot;:&quot;2023-01-31T00:24:43.751135&quot;,&quot;status&quot;:&quot;completed&quot;}" data-tags="[]" data-execution_count="28">
<div class="sourceCode cell-code" id="cb34" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb34-1">n_folds <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">5</span></span>
<span id="cb34-2">seed <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">42</span></span>
<span id="cb34-3">model <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">'CatBoostClassifier'</span></span>
<span id="cb34-4"></span>
<span id="cb34-5">skf <span class="op" style="color: #5E5E5E;">=</span> StratifiedKFold(n_splits<span class="op" style="color: #5E5E5E;">=</span>n_folds, shuffle<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>, random_state<span class="op" style="color: #5E5E5E;">=</span>seed)</span>
<span id="cb34-6">test_pred <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">0</span></span>
<span id="cb34-7"></span>
<span id="cb34-8">results[model] <span class="op" style="color: #5E5E5E;">=</span> defaultdict(<span class="bu" style="color: null;">list</span>)</span>
<span id="cb34-9"></span>
<span id="cb34-10"><span class="cf" style="color: #003B4F;">for</span> idx, (train_idx, test_idx) <span class="kw" style="color: #003B4F;">in</span> <span class="bu" style="color: null;">enumerate</span>(skf.split(X_train, y_train)):</span>
<span id="cb34-11">    X, y <span class="op" style="color: #5E5E5E;">=</span> X_train.iloc[train_idx], y_train.iloc[train_idx]</span>
<span id="cb34-12">    X_valid, y_valid <span class="op" style="color: #5E5E5E;">=</span> X_train.iloc[test_idx], y_train.iloc[test_idx]</span>
<span id="cb34-13"></span>
<span id="cb34-14">    catb <span class="op" style="color: #5E5E5E;">=</span> CatBoostClassifier(<span class="op" style="color: #5E5E5E;">**</span>catboost_params)</span>
<span id="cb34-15"></span>
<span id="cb34-16">    <span class="co" style="color: #5E5E5E;"># Fit the model</span></span>
<span id="cb34-17">    catb.fit(X, y)</span>
<span id="cb34-18">    <span class="co" style="color: #5E5E5E;"># Predict on validation set</span></span>
<span id="cb34-19">    pred_proba <span class="op" style="color: #5E5E5E;">=</span> catb.predict_proba(X_valid)[:, <span class="dv" style="color: #AD0000;">1</span>]</span>
<span id="cb34-20"></span>
<span id="cb34-21">    <span class="co" style="color: #5E5E5E;"># Predict on test set</span></span>
<span id="cb34-22">    test_pred_proba <span class="op" style="color: #5E5E5E;">=</span> catb.predict_proba(test)[:, <span class="dv" style="color: #AD0000;">1</span>]</span>
<span id="cb34-23">    test_pred <span class="op" style="color: #5E5E5E;">+=</span> test_pred_proba<span class="op" style="color: #5E5E5E;">/</span>n_folds</span>
<span id="cb34-24"></span>
<span id="cb34-25">    <span class="co" style="color: #5E5E5E;"># Calcualte AUC score</span></span>
<span id="cb34-26">    auc <span class="op" style="color: #5E5E5E;">=</span> roc_auc_score(y_valid, pred_proba)</span>
<span id="cb34-27"></span>
<span id="cb34-28">    <span class="co" style="color: #5E5E5E;"># Feature Importance</span></span>
<span id="cb34-29">    feature_imp <span class="op" style="color: #5E5E5E;">=</span> pd.DataFrame(index<span class="op" style="color: #5E5E5E;">=</span>X_train.columns,</span>
<span id="cb34-30">                               data<span class="op" style="color: #5E5E5E;">=</span>catb.feature_importances_,</span>
<span id="cb34-31">                               columns<span class="op" style="color: #5E5E5E;">=</span>[<span class="ss" style="color: #20794D;">f"</span><span class="sc" style="color: #5E5E5E;">{</span>idx <span class="op" style="color: #5E5E5E;">+</span> <span class="dv" style="color: #AD0000;">1</span><span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">_importance"</span>])</span>
<span id="cb34-32"></span>
<span id="cb34-33">    <span class="bu" style="color: null;">print</span>(<span class="ss" style="color: #20794D;">f"Fold=</span><span class="sc" style="color: #5E5E5E;">{</span>idx<span class="op" style="color: #5E5E5E;">+</span><span class="dv" style="color: #AD0000;">1</span><span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">, AUC score: </span><span class="sc" style="color: #5E5E5E;">{</span>auc<span class="sc" style="color: #5E5E5E;">:.2f}</span><span class="ss" style="color: #20794D;">"</span>)</span>
<span id="cb34-34"></span>
<span id="cb34-35">    <span class="co" style="color: #5E5E5E;"># Save Results</span></span>
<span id="cb34-36">    results[model][<span class="st" style="color: #20794D;">'auc'</span>].append(auc)</span>
<span id="cb34-37">    results[model][<span class="st" style="color: #20794D;">'model'</span>].append(lr)</span>
<span id="cb34-38">    results[model][<span class="st" style="color: #20794D;">'feature_imp'</span>].append(feature_imp)</span>
<span id="cb34-39"></span>
<span id="cb34-40">results[model][<span class="st" style="color: #20794D;">'test_pred'</span>] <span class="op" style="color: #5E5E5E;">=</span> test_pred</span>
<span id="cb34-41"><span class="bu" style="color: null;">print</span>(<span class="ss" style="color: #20794D;">f"Mean AUC: </span><span class="sc" style="color: #5E5E5E;">{</span>np<span class="sc" style="color: #5E5E5E;">.</span>mean(results[model][<span class="st" style="color: #20794D;">'auc'</span>])<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Fold=1, AUC score: 0.87
Fold=2, AUC score: 0.88
Fold=3, AUC score: 0.88
Fold=4, AUC score: 0.89
Fold=5, AUC score: 0.89
Mean AUC: 0.877921430469104</code></pre>
</div>
</div>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2023-01-31T00:26:27.373823Z&quot;,&quot;iopub.status.busy&quot;:&quot;2023-01-31T00:26:27.373409Z&quot;,&quot;iopub.status.idle&quot;:&quot;2023-01-31T00:26:27.815100Z&quot;,&quot;shell.execute_reply&quot;:&quot;2023-01-31T00:26:27.813966Z&quot;}" data-papermill="{&quot;duration&quot;:0.458628,&quot;end_time&quot;:&quot;2023-01-31T00:26:27.817640&quot;,&quot;exception&quot;:false,&quot;start_time&quot;:&quot;2023-01-31T00:26:27.359012&quot;,&quot;status&quot;:&quot;completed&quot;}" data-tags="[]" data-execution_count="29">
<div class="sourceCode cell-code" id="cb36" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb36-1"><span class="co" style="color: #5E5E5E;"># Plot feature importance for CatBoost model</span></span>
<span id="cb36-2">plot_feature_imp(results[model][<span class="st" style="color: #20794D;">'feature_imp'</span>], <span class="st" style="color: #20794D;">"2_importance"</span>)</span></code></pre></div>
<div class="cell-output cell-output-display">
<p><img src="https://sagarthacker.com/posts/kaggle/pss3e4-ensemble-model_files/figure-html/cell-30-output-1.png" class="img-fluid"></p>
</div>
</div>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2023-01-31T00:26:27.848463Z&quot;,&quot;iopub.status.busy&quot;:&quot;2023-01-31T00:26:27.847180Z&quot;,&quot;iopub.status.idle&quot;:&quot;2023-01-31T00:26:28.224119Z&quot;,&quot;shell.execute_reply&quot;:&quot;2023-01-31T00:26:28.222671Z&quot;}" data-papermill="{&quot;duration&quot;:0.395296,&quot;end_time&quot;:&quot;2023-01-31T00:26:28.227192&quot;,&quot;exception&quot;:false,&quot;start_time&quot;:&quot;2023-01-31T00:26:27.831896&quot;,&quot;status&quot;:&quot;completed&quot;}" data-tags="[]" data-execution_count="30">
<div class="sourceCode cell-code" id="cb37" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb37-1"><span class="co" style="color: #5E5E5E;"># Made a submission to see how the model performs</span></span>
<span id="cb37-2">catb_submission <span class="op" style="color: #5E5E5E;">=</span> submissions.copy()</span>
<span id="cb37-3">catb_submission[<span class="st" style="color: #20794D;">'Class'</span>] <span class="op" style="color: #5E5E5E;">=</span> results[model][<span class="st" style="color: #20794D;">'test_pred'</span>]</span>
<span id="cb37-4">catb_submission.to_csv(<span class="st" style="color: #20794D;">'catb_submission.csv'</span>, index<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">False</span>)</span></code></pre></div>
</div>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2023-01-31T00:26:28.258931Z&quot;,&quot;iopub.status.busy&quot;:&quot;2023-01-31T00:26:28.257671Z&quot;,&quot;iopub.status.idle&quot;:&quot;2023-01-31T00:26:28.271043Z&quot;,&quot;shell.execute_reply&quot;:&quot;2023-01-31T00:26:28.269924Z&quot;}" data-papermill="{&quot;duration&quot;:0.031789,&quot;end_time&quot;:&quot;2023-01-31T00:26:28.273614&quot;,&quot;exception&quot;:false,&quot;start_time&quot;:&quot;2023-01-31T00:26:28.241825&quot;,&quot;status&quot;:&quot;completed&quot;}" data-tags="[]" data-execution_count="31">
<div class="sourceCode cell-code" id="cb38" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb38-1">catb_submission.head()</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="31">

<div>

<table class="dataframe table table-sm table-striped">
  <thead>
    <tr>
      <th></th>
      <th>id</th>
      <th>Class</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td>219129</td>
      <td>0.000671</td>
    </tr>
    <tr>
      <th>1</th>
      <td>219130</td>
      <td>0.000433</td>
    </tr>
    <tr>
      <th>2</th>
      <td>219131</td>
      <td>0.000124</td>
    </tr>
    <tr>
      <th>3</th>
      <td>219132</td>
      <td>0.000599</td>
    </tr>
    <tr>
      <th>4</th>
      <td>219133</td>
      <td>0.000103</td>
    </tr>
  </tbody>
</table>
</div>
</div>
</div>
</section>
<section id="ensemble-results" class="level3">
<h3 class="anchored" data-anchor-id="ensemble-results">3.5. Ensemble Results</h3>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2023-01-31T00:26:28.331925Z&quot;,&quot;iopub.status.busy&quot;:&quot;2023-01-31T00:26:28.330662Z&quot;,&quot;iopub.status.idle&quot;:&quot;2023-01-31T00:26:28.701156Z&quot;,&quot;shell.execute_reply&quot;:&quot;2023-01-31T00:26:28.699931Z&quot;}" data-papermill="{&quot;duration&quot;:0.388445,&quot;end_time&quot;:&quot;2023-01-31T00:26:28.703974&quot;,&quot;exception&quot;:false,&quot;start_time&quot;:&quot;2023-01-31T00:26:28.315529&quot;,&quot;status&quot;:&quot;completed&quot;}" data-tags="[]" data-execution_count="32">
<div class="sourceCode cell-code" id="cb39" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb39-1">a <span class="op" style="color: #5E5E5E;">=</span> <span class="fl" style="color: #AD0000;">0.1</span></span>
<span id="cb39-2">b <span class="op" style="color: #5E5E5E;">=</span> <span class="fl" style="color: #AD0000;">0.4</span></span>
<span id="cb39-3">c <span class="op" style="color: #5E5E5E;">=</span> <span class="fl" style="color: #AD0000;">0.3</span></span>
<span id="cb39-4">d <span class="op" style="color: #5E5E5E;">=</span> <span class="fl" style="color: #AD0000;">0.2</span></span>
<span id="cb39-5"></span>
<span id="cb39-6">pred <span class="op" style="color: #5E5E5E;">=</span> a <span class="op" style="color: #5E5E5E;">*</span> lr_submission[<span class="st" style="color: #20794D;">'Class'</span>] <span class="op" style="color: #5E5E5E;">+</span> b <span class="op" style="color: #5E5E5E;">*</span> xgb_submission[<span class="st" style="color: #20794D;">'Class'</span>] <span class="op" style="color: #5E5E5E;">+</span> <span class="op" style="color: #5E5E5E;">\</span></span>
<span id="cb39-7">    c <span class="op" style="color: #5E5E5E;">*</span> lgbm_submission[<span class="st" style="color: #20794D;">'Class'</span>] <span class="op" style="color: #5E5E5E;">+</span> d <span class="op" style="color: #5E5E5E;">*</span> catb_submission[<span class="st" style="color: #20794D;">'Class'</span>]</span>
<span id="cb39-8"></span>
<span id="cb39-9"><span class="co" style="color: #5E5E5E;"># Made a submission to see how the model performs</span></span>
<span id="cb39-10">submission <span class="op" style="color: #5E5E5E;">=</span> submissions.copy()</span>
<span id="cb39-11">submission[<span class="st" style="color: #20794D;">'Class'</span>] <span class="op" style="color: #5E5E5E;">=</span> pred</span>
<span id="cb39-12">submission.to_csv(<span class="st" style="color: #20794D;">'submission_CatB.csv'</span>, index<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">False</span>)</span></code></pre></div>
</div>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2023-01-31T00:26:28.734495Z&quot;,&quot;iopub.status.busy&quot;:&quot;2023-01-31T00:26:28.733362Z&quot;,&quot;iopub.status.idle&quot;:&quot;2023-01-31T00:26:29.103914Z&quot;,&quot;shell.execute_reply&quot;:&quot;2023-01-31T00:26:29.103058Z&quot;}" data-papermill="{&quot;duration&quot;:0.388773,&quot;end_time&quot;:&quot;2023-01-31T00:26:29.106921&quot;,&quot;exception&quot;:false,&quot;start_time&quot;:&quot;2023-01-31T00:26:28.718148&quot;,&quot;status&quot;:&quot;completed&quot;}" data-tags="[]" data-execution_count="33">
<div class="sourceCode cell-code" id="cb40" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb40-1">a <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">0</span></span>
<span id="cb40-2">b <span class="op" style="color: #5E5E5E;">=</span> <span class="fl" style="color: #AD0000;">0.4</span></span>
<span id="cb40-3">c <span class="op" style="color: #5E5E5E;">=</span> <span class="fl" style="color: #AD0000;">0.4</span></span>
<span id="cb40-4">d <span class="op" style="color: #5E5E5E;">=</span> <span class="fl" style="color: #AD0000;">0.2</span></span>
<span id="cb40-5"></span>
<span id="cb40-6">pred <span class="op" style="color: #5E5E5E;">=</span> a <span class="op" style="color: #5E5E5E;">*</span> lr_submission[<span class="st" style="color: #20794D;">'Class'</span>] <span class="op" style="color: #5E5E5E;">+</span> b <span class="op" style="color: #5E5E5E;">*</span> xgb_submission[<span class="st" style="color: #20794D;">'Class'</span>] <span class="op" style="color: #5E5E5E;">+</span> <span class="op" style="color: #5E5E5E;">\</span></span>
<span id="cb40-7">    c <span class="op" style="color: #5E5E5E;">*</span> lgbm_submission[<span class="st" style="color: #20794D;">'Class'</span>] <span class="op" style="color: #5E5E5E;">+</span> d <span class="op" style="color: #5E5E5E;">*</span> catb_submission[<span class="st" style="color: #20794D;">'Class'</span>]</span>
<span id="cb40-8"></span>
<span id="cb40-9"><span class="co" style="color: #5E5E5E;"># Made a submission to see how the model performs</span></span>
<span id="cb40-10">submission <span class="op" style="color: #5E5E5E;">=</span> submissions.copy()</span>
<span id="cb40-11">submission[<span class="st" style="color: #20794D;">'Class'</span>] <span class="op" style="color: #5E5E5E;">=</span> pred</span>
<span id="cb40-12">submission.to_csv(<span class="st" style="color: #20794D;">'submission_noLR.csv'</span>, index<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">False</span>)</span></code></pre></div>
</div>
</section>
</section>
<section id="conclusion" class="level2">
<h2 class="anchored" data-anchor-id="conclusion">4. Conclusion</h2>
<p>Thank you for reading so far and I hope you found this notebook helpful.</p>
<p>Upvote if you liked it, comment if you loved it. Hope to see you guys in the next one. Peace!</p>


</section>

 ]]></description>
  <category>Kaggle</category>
  <guid>https://sagarthacker.com/posts/kaggle/pss3e4-ensemble-model.html</guid>
  <pubDate>Mon, 30 Jan 2023 05:00:00 GMT</pubDate>
  <media:content url="https://sagarthacker.com/posts/kaggle/money.jpeg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Movie Lens - Collaborative Filtering based Recommendation System</title>
  <dc:creator>Sagar Thacker</dc:creator>
  <link>https://sagarthacker.com/posts/spark/movielens.html</link>
  <description><![CDATA[ 




<p>Recommendation System are build by analyzing the user and product interation data. It can be used to give item suggestion to a user or predict how a user would rate the an item.</p>
<p>Recommendation System have mainly have three approaches:</p>
<ol type="1">
<li>Content Based Filtering</li>
<li>Collaborative Filtering</li>
<li>Hybrid Approach</li>
</ol>
<p>In this notebook, Alternating Least Squares (ALS) matrix factorization algorithm with the use of Apache Spark APIs to predict the ratings of movies in the MovieLens Dataset.</p>
<p>ALS attempts to estimate the ratings matrix R as the product of two lower-rank matrices, <code>X</code> and <code>Y</code>, i.e.&nbsp;<code>X * Yt = R</code>. Typically these approximations are called ‘<strong>factor</strong>’ matrices. The general approach is iterative. During each iteration, one of the factor matrices is held constant, while the other is solved for using least squares. The newly-solved factor matrix is then held constant while solving for the other factor matrix (<a href="https://spark.apache.org/docs/latest/api/python/reference/api/pyspark.ml.recommendation.ALS.html">source</a>).</p>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2023-01-21T02:59:12.356914Z&quot;,&quot;iopub.status.busy&quot;:&quot;2023-01-21T02:59:12.356349Z&quot;,&quot;iopub.status.idle&quot;:&quot;2023-01-21T02:59:12.369608Z&quot;,&quot;shell.execute_reply&quot;:&quot;2023-01-21T02:59:12.368399Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2023-01-21T02:59:12.356870Z&quot;}" data-execution_count="55">
<details>
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="co" style="color: #5E5E5E;"># Import necessary libraries</span></span>
<span id="cb1-2"><span class="im" style="color: #00769E;">import</span> numpy <span class="im" style="color: #00769E;">as</span> np</span>
<span id="cb1-3"><span class="im" style="color: #00769E;">import</span> pandas <span class="im" style="color: #00769E;">as</span> pd</span>
<span id="cb1-4"><span class="im" style="color: #00769E;">import</span> matplotlib.pyplot <span class="im" style="color: #00769E;">as</span> plt</span>
<span id="cb1-5"><span class="im" style="color: #00769E;">import</span> seaborn <span class="im" style="color: #00769E;">as</span> sns</span>
<span id="cb1-6"><span class="im" style="color: #00769E;">import</span> os</span>
<span id="cb1-7"><span class="im" style="color: #00769E;">import</span> warnings</span>
<span id="cb1-8"></span>
<span id="cb1-9"><span class="im" style="color: #00769E;">from</span> pyspark.sql <span class="im" style="color: #00769E;">import</span> SparkSession</span>
<span id="cb1-10"><span class="im" style="color: #00769E;">from</span> pyspark.sql <span class="im" style="color: #00769E;">import</span> functions <span class="im" style="color: #00769E;">as</span> F</span>
<span id="cb1-11"><span class="im" style="color: #00769E;">from</span> pyspark.ml.recommendation <span class="im" style="color: #00769E;">import</span> ALS</span>
<span id="cb1-12"><span class="im" style="color: #00769E;">from</span> pyspark.ml.evaluation <span class="im" style="color: #00769E;">import</span> RegressionEvaluator</span>
<span id="cb1-13"><span class="im" style="color: #00769E;">from</span> pyspark.ml.tuning <span class="im" style="color: #00769E;">import</span> CrossValidator, ParamGridBuilder</span>
<span id="cb1-14"></span>
<span id="cb1-15"><span class="op" style="color: #5E5E5E;">%</span>matplotlib inline</span>
<span id="cb1-16">os.environ[<span class="st" style="color: #20794D;">"PYSPARK_PYTHON"</span>] <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">"python3"</span></span>
<span id="cb1-17">warnings.filterwarnings(<span class="st" style="color: #20794D;">'ignore'</span>)</span></code></pre></div>
</details>
</div>
<section id="data-description" class="level2">
<h2 class="anchored" data-anchor-id="data-description">1. Data Description</h2>
<p>MovieLens 25M movie ratings. Stable benchmark dataset. 25 million ratings and one million tag applications applied to 62,000 movies by 162,000 users.</p>
<ol type="a">
<li><code>movies.csv</code>: Movie information is contained in the file <code>movies.csv</code>. Each line of this file after the header row represents one movie, and has the following format: <code>movieId,title,genres</code></li>
</ol>
<p>Genres are a pipe-separated list, and are selected from the following:</p>
<ul>
<li>Action</li>
<li>Adventure</li>
<li>Animation</li>
<li>Children’s</li>
<li>Comedy</li>
<li>Crime</li>
<li>Documentary</li>
<li>Drama</li>
<li>Fantasy</li>
<li>Film-Noir</li>
<li>Horror</li>
<li>Musical</li>
<li>Mystery</li>
<li>Romance</li>
<li>Sci-Fi</li>
<li>Thriller</li>
<li>War</li>
<li>Western</li>
<li>(no genres listed)</li>
</ul>
<ol start="2" type="a">
<li><code>rating.csv</code>: All ratings are contained in the file <code>rating.csv</code>. Each line of this file after the header row represents one rating of one movie by one user, and has the following format: <code>userId,movieId,rating,timestamp</code></li>
</ol>
<p>The lines within this file are ordered first by userId, then, within user, by movieId.</p>
<p>Ratings are made on a 5-star scale, with half-star increments (0.5 stars - 5.0 stars).</p>
<p>Timestamps represent seconds since midnight Coordinated Universal Time (UTC) of January 1, 1970.</p>
</section>
<section id="overview-structure-and-data-content" class="level2">
<h2 class="anchored" data-anchor-id="overview-structure-and-data-content">2. Overview Structure and Data Content</h2>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2023-01-21T01:45:10.074073Z&quot;,&quot;iopub.status.busy&quot;:&quot;2023-01-21T01:45:10.073458Z&quot;,&quot;iopub.status.idle&quot;:&quot;2023-01-21T01:45:16.286220Z&quot;,&quot;shell.execute_reply&quot;:&quot;2023-01-21T01:45:16.284801Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2023-01-21T01:45:10.074012Z&quot;}" data-execution_count="3">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb2-1"><span class="co" style="color: #5E5E5E;"># Create a spark session</span></span>
<span id="cb2-2">spark <span class="op" style="color: #5E5E5E;">=</span> SparkSession.builder.appName(</span>
<span id="cb2-3">    <span class="st" style="color: #20794D;">"movie-lens-recommendation"</span>).config(<span class="st" style="color: #20794D;">"spark.driver.memory"</span>, <span class="st" style="color: #20794D;">"16g"</span>).getOrCreate()</span>
<span id="cb2-4">spark.sparkContext.setLogLevel(<span class="st" style="color: #20794D;">"ERROR"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>Setting default log level to "WARN".
To adjust logging level use sc.setLogLevel(newLevel). For SparkR, use setLogLevel(newLevel).</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>23/01/21 01:45:14 WARN NativeCodeLoader: Unable to load native-hadoop library for your platform... using builtin-java classes where applicable</code></pre>
</div>
</div>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2023-01-21T01:45:17.689643Z&quot;,&quot;iopub.status.busy&quot;:&quot;2023-01-21T01:45:17.688564Z&quot;,&quot;iopub.status.idle&quot;:&quot;2023-01-21T01:45:48.938137Z&quot;,&quot;shell.execute_reply&quot;:&quot;2023-01-21T01:45:48.937248Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2023-01-21T01:45:17.689596Z&quot;}" data-execution_count="4">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb5-1"><span class="co" style="color: #5E5E5E;"># Read dataset</span></span>
<span id="cb5-2">__dirname <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">'../input/movielens-20m-dataset/'</span></span>
<span id="cb5-3">movies <span class="op" style="color: #5E5E5E;">=</span> spark.read.csv(__dirname <span class="op" style="color: #5E5E5E;">+</span> <span class="st" style="color: #20794D;">'movie.csv'</span>, header<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>, inferSchema<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>)</span>
<span id="cb5-4">ratings <span class="op" style="color: #5E5E5E;">=</span> spark.read.csv(__dirname <span class="op" style="color: #5E5E5E;">+</span> <span class="st" style="color: #20794D;">'rating.csv'</span>,</span>
<span id="cb5-5">                         header<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>, inferSchema<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>)</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>                                                                                </code></pre>
</div>
</div>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2023-01-21T01:45:48.940792Z&quot;,&quot;iopub.status.busy&quot;:&quot;2023-01-21T01:45:48.939598Z&quot;,&quot;iopub.status.idle&quot;:&quot;2023-01-21T01:45:55.106976Z&quot;,&quot;shell.execute_reply&quot;:&quot;2023-01-21T01:45:55.105749Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2023-01-21T01:45:48.940756Z&quot;}" data-execution_count="5">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb7-1"><span class="co" style="color: #5E5E5E;"># Shape of the datasets</span></span>
<span id="cb7-2"><span class="bu" style="color: null;">print</span>(<span class="ss" style="color: #20794D;">f'Movies has </span><span class="sc" style="color: #5E5E5E;">{</span>movies<span class="sc" style="color: #5E5E5E;">.</span>count()<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;"> rows and </span><span class="sc" style="color: #5E5E5E;">{</span><span class="bu" style="color: null;">len</span>(movies.columns)<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;"> columns'</span>)</span>
<span id="cb7-3"><span class="bu" style="color: null;">print</span>(<span class="ss" style="color: #20794D;">f'Ratings has </span><span class="sc" style="color: #5E5E5E;">{</span>ratings<span class="sc" style="color: #5E5E5E;">.</span>count()<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;"> rows and </span><span class="sc" style="color: #5E5E5E;">{</span><span class="bu" style="color: null;">len</span>(ratings.columns)<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;"> colunms'</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Movies has 27278 rows and 3 columns</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>[Stage 7:=================================================&gt;         (5 + 1) / 6]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Ratings has 20000263 rows and 4 colunms</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>                                                                                </code></pre>
</div>
</div>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2023-01-21T01:47:39.220923Z&quot;,&quot;iopub.status.busy&quot;:&quot;2023-01-21T01:47:39.220526Z&quot;,&quot;iopub.status.idle&quot;:&quot;2023-01-21T01:47:39.416148Z&quot;,&quot;shell.execute_reply&quot;:&quot;2023-01-21T01:47:39.415111Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2023-01-21T01:47:39.220892Z&quot;}" data-execution_count="7">
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb12-1"><span class="co" style="color: #5E5E5E;"># Display top five rows of each dataframe</span></span>
<span id="cb12-2">movies.show(n<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">5</span>, truncate<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">False</span>)</span>
<span id="cb12-3">ratings.show(n<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">5</span>, truncate<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">False</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>+-------+----------------------------------+-------------------------------------------+
|movieId|title                             |genres                                     |
+-------+----------------------------------+-------------------------------------------+
|1      |Toy Story (1995)                  |Adventure|Animation|Children|Comedy|Fantasy|
|2      |Jumanji (1995)                    |Adventure|Children|Fantasy                 |
|3      |Grumpier Old Men (1995)           |Comedy|Romance                             |
|4      |Waiting to Exhale (1995)          |Comedy|Drama|Romance                       |
|5      |Father of the Bride Part II (1995)|Comedy                                     |
+-------+----------------------------------+-------------------------------------------+
only showing top 5 rows

+------+-------+------+-------------------+
|userId|movieId|rating|timestamp          |
+------+-------+------+-------------------+
|1     |2      |3.5   |2005-04-02 23:53:47|
|1     |29     |3.5   |2005-04-02 23:31:16|
|1     |32     |3.5   |2005-04-02 23:33:39|
|1     |47     |3.5   |2005-04-02 23:32:07|
|1     |50     |3.5   |2005-04-02 23:29:40|
+------+-------+------+-------------------+
only showing top 5 rows
</code></pre>
</div>
</div>
<section id="data-structure-and-statistics" class="level3">
<h3 class="anchored" data-anchor-id="data-structure-and-statistics">2.1. Data Structure and Statistics</h3>
<p>Let’s go over each dataframe and check it’s schema.</p>
<p>Run the <code>describe()</code> method to see the count, mean, standard deviation, minimum, and maximum values for the data in each column:</p>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2023-01-21T01:47:48.991382Z&quot;,&quot;iopub.status.busy&quot;:&quot;2023-01-21T01:47:48.991028Z&quot;,&quot;iopub.status.idle&quot;:&quot;2023-01-21T01:47:51.350226Z&quot;,&quot;shell.execute_reply&quot;:&quot;2023-01-21T01:47:51.348909Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2023-01-21T01:47:48.991355Z&quot;}" data-execution_count="8">
<div class="sourceCode cell-code" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb14-1"><span class="co" style="color: #5E5E5E;"># Movies DataFrame</span></span>
<span id="cb14-2">movies.printSchema()</span>
<span id="cb14-3">movies.describe().show()</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>root
 |-- movieId: integer (nullable = true)
 |-- title: string (nullable = true)
 |-- genres: string (nullable = true)
</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>[Stage 14:&gt;                                                         (0 + 1) / 1]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>+-------+-----------------+--------------------+------------------+
|summary|          movieId|               title|            genres|
+-------+-----------------+--------------------+------------------+
|  count|            27278|               27278|             27278|
|   mean|59855.48057042305|                null|              null|
| stddev|44429.31469707313|                null|              null|
|    min|                1|""Great Performan...|(no genres listed)|
|    max|           131262|       貞子3D (2012)|           Western|
+-------+-----------------+--------------------+------------------+
</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>                                                                                </code></pre>
</div>
</div>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2023-01-21T01:47:51.446664Z&quot;,&quot;iopub.status.busy&quot;:&quot;2023-01-21T01:47:51.446305Z&quot;,&quot;iopub.status.idle&quot;:&quot;2023-01-21T01:48:30.664140Z&quot;,&quot;shell.execute_reply&quot;:&quot;2023-01-21T01:48:30.662895Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2023-01-21T01:47:51.446635Z&quot;}" data-execution_count="9">
<div class="sourceCode cell-code" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb19-1"><span class="co" style="color: #5E5E5E;"># Ratings DataFrame</span></span>
<span id="cb19-2">ratings.printSchema()</span>
<span id="cb19-3">ratings.summary().show()</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>root
 |-- userId: integer (nullable = true)
 |-- movieId: integer (nullable = true)
 |-- rating: double (nullable = true)
 |-- timestamp: timestamp (nullable = true)
</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>[Stage 17:================================================&gt;         (5 + 1) / 6]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>+-------+-----------------+------------------+------------------+
|summary|           userId|           movieId|            rating|
+-------+-----------------+------------------+------------------+
|  count|         20000263|          20000263|          20000263|
|   mean|69045.87258292554| 9041.567330339605|3.5255285642993797|
| stddev|40038.62665316267|19789.477445413264| 1.051988919294229|
|    min|                1|                 1|               0.5|
|    25%|            34395|               903|               3.0|
|    50%|            69133|              2167|               3.5|
|    75%|           103637|              4771|               4.0|
|    max|           138493|            131262|               5.0|
+-------+-----------------+------------------+------------------+
</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>                                                                                </code></pre>
</div>
</div>
<p>Not all of these statistics are actually meaningful!<br> You can use specific methods from the DataFrame API to compute any statistic:</p>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2023-01-21T01:49:06.646193Z&quot;,&quot;iopub.status.busy&quot;:&quot;2023-01-21T01:49:06.645801Z&quot;,&quot;iopub.status.idle&quot;:&quot;2023-01-21T01:49:36.754586Z&quot;,&quot;shell.execute_reply&quot;:&quot;2023-01-21T01:49:36.753322Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2023-01-21T01:49:06.646163Z&quot;}" data-execution_count="10">
<div class="sourceCode cell-code" id="cb24" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb24-1"><span class="bu" style="color: null;">print</span>(</span>
<span id="cb24-2">    <span class="ss" style="color: #20794D;">f"Number of distinct users: </span><span class="sc" style="color: #5E5E5E;">{</span>ratings<span class="sc" style="color: #5E5E5E;">.</span>select(<span class="st" style="color: #20794D;">'userId'</span>)<span class="sc" style="color: #5E5E5E;">.</span>distinct()<span class="sc" style="color: #5E5E5E;">.</span>count()<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">"</span>)</span>
<span id="cb24-3"><span class="bu" style="color: null;">print</span>(</span>
<span id="cb24-4">    <span class="ss" style="color: #20794D;">f"Number of distinct movies: </span><span class="sc" style="color: #5E5E5E;">{</span>ratings<span class="sc" style="color: #5E5E5E;">.</span>select(<span class="st" style="color: #20794D;">'movieId'</span>)<span class="sc" style="color: #5E5E5E;">.</span>distinct()<span class="sc" style="color: #5E5E5E;">.</span>count()<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>                                                                                </code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Number of distinct users: 138493</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>[Stage 26:================================================&gt;         (5 + 1) / 6]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Number of distinct movies: 26744</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>                                                                                </code></pre>
</div>
</div>
<p>You can also leverage your SQL knowledge to query the data.</p>
<p>Example, Find the number of movies with ratings higher than 4 with and without SQL:</p>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2023-01-21T01:50:44.495177Z&quot;,&quot;iopub.status.busy&quot;:&quot;2023-01-21T01:50:44.493996Z&quot;,&quot;iopub.status.idle&quot;:&quot;2023-01-21T01:51:14.028787Z&quot;,&quot;shell.execute_reply&quot;:&quot;2023-01-21T01:51:14.027609Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2023-01-21T01:50:44.495139Z&quot;}" data-execution_count="12">
<div class="sourceCode cell-code" id="cb30" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb30-1"><span class="co" style="color: #5E5E5E;"># Without SQL</span></span>
<span id="cb30-2"><span class="bu" style="color: null;">print</span>(</span>
<span id="cb30-3">    <span class="ss" style="color: #20794D;">f"Number of distinct movies with rating greater than 4: </span><span class="sc" style="color: #5E5E5E;">{</span>ratings<span class="sc" style="color: #5E5E5E;">.</span><span class="bu" style="color: null;">filter</span>(<span class="st" style="color: #20794D;">'rating &gt; 4'</span>)<span class="sc" style="color: #5E5E5E;">.</span>select(<span class="st" style="color: #20794D;">'movieId'</span>)<span class="sc" style="color: #5E5E5E;">.</span>distinct()<span class="sc" style="color: #5E5E5E;">.</span>count()<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">"</span>)</span>
<span id="cb30-4"></span>
<span id="cb30-5"><span class="co" style="color: #5E5E5E;"># With SQL</span></span>
<span id="cb30-6">ratings.createOrReplaceTempView(<span class="st" style="color: #20794D;">'ratings'</span>)</span>
<span id="cb30-7">spark.sql(<span class="st" style="color: #20794D;">'SELECT COUNT(DISTINCT(movieId)) AS movie_count FROM ratings WHERE rating &gt; 4'</span>).show()</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>                                                                                </code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Number of distinct movies with rating greater than 4: 17218</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>[Stage 44:================================================&gt;         (5 + 1) / 6]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>+-----------+
|movie_count|
+-----------+
|      17218|
+-----------+
</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>                                                                                </code></pre>
</div>
</div>
</section>
<section id="missing-values" class="level3">
<h3 class="anchored" data-anchor-id="missing-values">2.2. Missing Values</h3>
<p>Check if any column contains missing values.</p>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2023-01-21T01:52:49.491396Z&quot;,&quot;iopub.status.busy&quot;:&quot;2023-01-21T01:52:49.490684Z&quot;,&quot;iopub.status.idle&quot;:&quot;2023-01-21T01:53:23.829194Z&quot;,&quot;shell.execute_reply&quot;:&quot;2023-01-21T01:53:23.827890Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2023-01-21T01:52:49.491350Z&quot;}" data-execution_count="13">
<div class="sourceCode cell-code" id="cb36" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb36-1"><span class="co" style="color: #5E5E5E;"># Check for missing values</span></span>
<span id="cb36-2"><span class="co" style="color: #5E5E5E;"># 1. Movies Dataframe</span></span>
<span id="cb36-3">movies.select([F.count(F.when(F.col(c).contains(<span class="st" style="color: #20794D;">'NULL'</span>) <span class="op" style="color: #5E5E5E;">|</span></span>
<span id="cb36-4">                              F.col(c).isNull() <span class="op" style="color: #5E5E5E;">|</span></span>
<span id="cb36-5">                              F.isnan(c), c)).alias(c) <span class="cf" style="color: #003B4F;">for</span> c <span class="kw" style="color: #003B4F;">in</span> movies.columns]).show()</span>
<span id="cb36-6"></span>
<span id="cb36-7"><span class="co" style="color: #5E5E5E;"># 2. Ratings Dataframe</span></span>
<span id="cb36-8">ratings.select(<span class="op" style="color: #5E5E5E;">*</span>[(</span>
<span id="cb36-9">    F.count(</span>
<span id="cb36-10">        F.when(</span>
<span id="cb36-11">            (F.col(c).contains(<span class="st" style="color: #20794D;">'NULL'</span>) <span class="op" style="color: #5E5E5E;">|</span> F.col(c).isNull() <span class="op" style="color: #5E5E5E;">|</span> F.isnan(c)), c)) <span class="cf" style="color: #003B4F;">if</span> t <span class="kw" style="color: #003B4F;">not</span> <span class="kw" style="color: #003B4F;">in</span> (<span class="st" style="color: #20794D;">'timestamp'</span>, <span class="st" style="color: #20794D;">'data'</span>)</span>
<span id="cb36-12">    <span class="cf" style="color: #003B4F;">else</span> F.count(F.when(F.col(c).contains(<span class="st" style="color: #20794D;">'NULL'</span>) <span class="op" style="color: #5E5E5E;">|</span> F.col(c).isNull(), c))).alias(c)</span>
<span id="cb36-13">    <span class="cf" style="color: #003B4F;">for</span> c, t <span class="kw" style="color: #003B4F;">in</span> ratings.dtypes]).show()</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>+-------+-----+------+
|movieId|title|genres|
+-------+-----+------+
|      0|    0|     0|
+-------+-----+------+
</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>[Stage 53:================================================&gt;         (5 + 1) / 6]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>+------+-------+------+---------+
|userId|movieId|rating|timestamp|
+------+-------+------+---------+
|     0|      0|     0|        0|
+------+-------+------+---------+
</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>                                                                                </code></pre>
</div>
</div>
</section>
<section id="merge-dataframe" class="level3">
<h3 class="anchored" data-anchor-id="merge-dataframe">2.3. Merge DataFrame</h3>
<p>We’ll merge the <code>movies</code> and <code>ratings</code> dataframe for further analysis and model building process.</p>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2023-01-21T01:53:55.079193Z&quot;,&quot;iopub.status.busy&quot;:&quot;2023-01-21T01:53:55.078362Z&quot;,&quot;iopub.status.idle&quot;:&quot;2023-01-21T01:53:55.112078Z&quot;,&quot;shell.execute_reply&quot;:&quot;2023-01-21T01:53:55.110706Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2023-01-21T01:53:55.079145Z&quot;}" data-execution_count="14">
<div class="sourceCode cell-code" id="cb41" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb41-1"><span class="co" style="color: #5E5E5E;"># Merge the movies and ratings dataframes</span></span>
<span id="cb41-2">df <span class="op" style="color: #5E5E5E;">=</span> ratings.join(movies, on<span class="op" style="color: #5E5E5E;">=</span>[<span class="st" style="color: #20794D;">"movieId"</span>], how<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"left"</span>)</span></code></pre></div>
</div>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2023-01-21T01:53:57.954270Z&quot;,&quot;iopub.status.busy&quot;:&quot;2023-01-21T01:53:57.953886Z&quot;,&quot;iopub.status.idle&quot;:&quot;2023-01-21T01:54:13.120366Z&quot;,&quot;shell.execute_reply&quot;:&quot;2023-01-21T01:54:13.119029Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2023-01-21T01:53:57.954238Z&quot;}" data-execution_count="15">
<div class="sourceCode cell-code" id="cb42" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb42-1"><span class="co" style="color: #5E5E5E;"># Look at df structure</span></span>
<span id="cb42-2">df.printSchema()</span>
<span id="cb42-3"><span class="bu" style="color: null;">print</span>(<span class="ss" style="color: #20794D;">f'Merged DataFrame has </span><span class="sc" style="color: #5E5E5E;">{</span>df<span class="sc" style="color: #5E5E5E;">.</span>count()<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;"> rows and </span><span class="sc" style="color: #5E5E5E;">{</span><span class="bu" style="color: null;">len</span>(df.columns)<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;"> colunms'</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>root
 |-- movieId: integer (nullable = true)
 |-- userId: integer (nullable = true)
 |-- rating: double (nullable = true)
 |-- timestamp: timestamp (nullable = true)
 |-- title: string (nullable = true)
 |-- genres: string (nullable = true)
</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>[Stage 57:================================================&gt;         (5 + 1) / 6]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Merged DataFrame has 20000263 rows and 6 colunms</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>                                                                                </code></pre>
</div>
</div>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2023-01-21T01:54:13.122474Z&quot;,&quot;iopub.status.busy&quot;:&quot;2023-01-21T01:54:13.122114Z&quot;,&quot;iopub.status.idle&quot;:&quot;2023-01-21T01:54:13.726981Z&quot;,&quot;shell.execute_reply&quot;:&quot;2023-01-21T01:54:13.725568Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2023-01-21T01:54:13.122443Z&quot;}" data-execution_count="16">
<div class="sourceCode cell-code" id="cb47" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb47-1"><span class="co" style="color: #5E5E5E;"># Display top five rows of merged dataframe</span></span>
<span id="cb47-2">df.show(n<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">5</span>, truncate<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">False</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>+-------+------+------+-------------------+---------------------------------------------------------------+--------------------------------------+
|movieId|userId|rating|timestamp          |title                                                          |genres                                |
+-------+------+------+-------------------+---------------------------------------------------------------+--------------------------------------+
|2      |1     |3.5   |2005-04-02 23:53:47|Jumanji (1995)                                                 |Adventure|Children|Fantasy            |
|29     |1     |3.5   |2005-04-02 23:31:16|City of Lost Children, The (Cité des enfants perdus, La) (1995)|Adventure|Drama|Fantasy|Mystery|Sci-Fi|
|32     |1     |3.5   |2005-04-02 23:33:39|Twelve Monkeys (a.k.a. 12 Monkeys) (1995)                      |Mystery|Sci-Fi|Thriller               |
|47     |1     |3.5   |2005-04-02 23:32:07|Seven (a.k.a. Se7en) (1995)                                    |Mystery|Thriller                      |
|50     |1     |3.5   |2005-04-02 23:29:40|Usual Suspects, The (1995)                                     |Crime|Mystery|Thriller                |
+-------+------+------+-------------------+---------------------------------------------------------------+--------------------------------------+
only showing top 5 rows
</code></pre>
</div>
</div>
</section>
</section>
<section id="visualizations" class="level2">
<h2 class="anchored" data-anchor-id="visualizations">3. Visualizations</h2>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2023-01-21T01:54:19.491532Z&quot;,&quot;iopub.status.busy&quot;:&quot;2023-01-21T01:54:19.491098Z&quot;,&quot;iopub.status.idle&quot;:&quot;2023-01-21T01:54:37.998340Z&quot;,&quot;shell.execute_reply&quot;:&quot;2023-01-21T01:54:37.997133Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2023-01-21T01:54:19.491497Z&quot;}" data-execution_count="17">
<div class="sourceCode cell-code" id="cb49" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb49-1"><span class="co" style="color: #5E5E5E;"># Distribution of User Ratings</span></span>
<span id="cb49-2">rating_count_df <span class="op" style="color: #5E5E5E;">=</span> (df.groupBy([<span class="st" style="color: #20794D;">'rating'</span>]).count()).toPandas()</span>
<span id="cb49-3"></span>
<span id="cb49-4">fig <span class="op" style="color: #5E5E5E;">=</span> plt.figure(figsize<span class="op" style="color: #5E5E5E;">=</span>(<span class="dv" style="color: #AD0000;">8</span>, <span class="dv" style="color: #AD0000;">5</span>))</span>
<span id="cb49-5">sns.barplot(x<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'rating'</span>, y<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'count'</span>, data<span class="op" style="color: #5E5E5E;">=</span>rating_count_df)</span>
<span id="cb49-6">plt.title(<span class="st" style="color: #20794D;">"Count of each rating"</span>, fontsize<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">14</span>)</span>
<span id="cb49-7">plt.show()</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>                                                                                </code></pre>
</div>
<div class="cell-output cell-output-display">
<p><img src="https://sagarthacker.com/posts/spark/movielens_files/figure-html/cell-15-output-2.png" class="img-fluid"></p>
</div>
</div>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2023-01-21T02:00:49.019675Z&quot;,&quot;iopub.status.busy&quot;:&quot;2023-01-21T02:00:49.019276Z&quot;,&quot;iopub.status.idle&quot;:&quot;2023-01-21T02:01:29.486343Z&quot;,&quot;shell.execute_reply&quot;:&quot;2023-01-21T02:01:29.485068Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2023-01-21T02:00:49.019644Z&quot;}" data-execution_count="24">
<div class="sourceCode cell-code" id="cb51" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb51-1">rating_values <span class="op" style="color: #5E5E5E;">=</span> df.select([<span class="st" style="color: #20794D;">'rating'</span>]).toPandas()</span>
<span id="cb51-2"></span>
<span id="cb51-3">fig <span class="op" style="color: #5E5E5E;">=</span> plt.figure(figsize<span class="op" style="color: #5E5E5E;">=</span>(<span class="dv" style="color: #AD0000;">8</span>, <span class="dv" style="color: #AD0000;">5</span>))</span>
<span id="cb51-4">sns.violinplot(rating_values[<span class="st" style="color: #20794D;">'rating'</span>])</span>
<span id="cb51-5">plt.title(<span class="st" style="color: #20794D;">"Distribution of rating"</span>, fontsize<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">14</span>)</span>
<span id="cb51-6">plt.show()</span></code></pre></div>
<div class="cell-output cell-output-display">
<p><img src="https://sagarthacker.com/posts/spark/movielens_files/figure-html/cell-16-output-1.png" class="img-fluid"></p>
</div>
</div>
<p>We find:</p>
<ul>
<li>Most of the users have rated <code>4.0</code> followed by <code>3.0</code>.</li>
</ul>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2023-01-21T02:04:09.142539Z&quot;,&quot;iopub.status.busy&quot;:&quot;2023-01-21T02:04:09.142088Z&quot;,&quot;iopub.status.idle&quot;:&quot;2023-01-21T02:05:54.735937Z&quot;,&quot;shell.execute_reply&quot;:&quot;2023-01-21T02:05:54.734707Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2023-01-21T02:04:09.142501Z&quot;}" data-execution_count="25">
<div class="sourceCode cell-code" id="cb52" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb52-1">genre_rating <span class="op" style="color: #5E5E5E;">=</span> (df</span>
<span id="cb52-2">                .select(<span class="st" style="color: #20794D;">"movieId"</span>, <span class="st" style="color: #20794D;">"userId"</span>, <span class="st" style="color: #20794D;">"genres"</span>, <span class="st" style="color: #20794D;">"rating"</span>)</span>
<span id="cb52-3">                .withColumn(<span class="st" style="color: #20794D;">"genres_array"</span>, F.split(<span class="st" style="color: #20794D;">"genres"</span>, <span class="st" style="color: #20794D;">"\|"</span>))</span>
<span id="cb52-4">                .withColumn(<span class="st" style="color: #20794D;">"genre"</span>, F.explode(<span class="st" style="color: #20794D;">"genres_array"</span>))</span>
<span id="cb52-5">                .groupBy(<span class="st" style="color: #20794D;">"genre"</span>).agg(F.mean(F.col(<span class="st" style="color: #20794D;">"rating"</span>)).alias(<span class="st" style="color: #20794D;">"genre_rating"</span>),</span>
<span id="cb52-6">                                      F.countDistinct(<span class="st" style="color: #20794D;">"movieId"</span>).alias(</span>
<span id="cb52-7">                                          <span class="st" style="color: #20794D;">"num_movies"</span>),</span>
<span id="cb52-8">                                      F.countDistinct(<span class="st" style="color: #20794D;">"movieId"</span>, <span class="st" style="color: #20794D;">"userId"</span>).alias(<span class="st" style="color: #20794D;">"num_ratings"</span>))</span>
<span id="cb52-9">                ).toPandas()</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>                                                                                </code></pre>
</div>
</div>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2023-01-21T02:14:24.378264Z&quot;,&quot;iopub.status.busy&quot;:&quot;2023-01-21T02:14:24.376787Z&quot;,&quot;iopub.status.idle&quot;:&quot;2023-01-21T02:14:25.386651Z&quot;,&quot;shell.execute_reply&quot;:&quot;2023-01-21T02:14:25.385444Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2023-01-21T02:14:24.378203Z&quot;}" data-execution_count="34">
<div class="sourceCode cell-code" id="cb54" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb54-1">fig, axes <span class="op" style="color: #5E5E5E;">=</span> plt.subplots(nrows<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">2</span>, ncols<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">2</span>, figsize<span class="op" style="color: #5E5E5E;">=</span>(<span class="dv" style="color: #AD0000;">20</span>, <span class="dv" style="color: #AD0000;">15</span>))</span>
<span id="cb54-2"></span>
<span id="cb54-3">genre_rating.plot.barh(<span class="st" style="color: #20794D;">"genre"</span>, <span class="st" style="color: #20794D;">"genre_rating"</span>, ax<span class="op" style="color: #5E5E5E;">=</span>axes[<span class="dv" style="color: #AD0000;">0</span>, <span class="dv" style="color: #AD0000;">0</span>])</span>
<span id="cb54-4">axes[<span class="dv" style="color: #AD0000;">0</span>, <span class="dv" style="color: #AD0000;">0</span>].set_title(<span class="st" style="color: #20794D;">"Visualizing average rating for each genre"</span>)</span>
<span id="cb54-5"></span>
<span id="cb54-6">genre_rating.plot.barh(<span class="st" style="color: #20794D;">"genre"</span>, <span class="st" style="color: #20794D;">"num_ratings"</span>, ax<span class="op" style="color: #5E5E5E;">=</span>axes[<span class="dv" style="color: #AD0000;">0</span>, <span class="dv" style="color: #AD0000;">1</span>])</span>
<span id="cb54-7">axes[<span class="dv" style="color: #AD0000;">0</span>, <span class="dv" style="color: #AD0000;">1</span>].set_title(<span class="st" style="color: #20794D;">"Visualizing number of ratings for each genre"</span>)</span>
<span id="cb54-8"></span>
<span id="cb54-9">genre_rating.plot.barh(<span class="st" style="color: #20794D;">"genre"</span>, <span class="st" style="color: #20794D;">"num_movies"</span>, ax<span class="op" style="color: #5E5E5E;">=</span>axes[<span class="dv" style="color: #AD0000;">1</span>, <span class="dv" style="color: #AD0000;">0</span>])</span>
<span id="cb54-10">axes[<span class="dv" style="color: #AD0000;">1</span>, <span class="dv" style="color: #AD0000;">0</span>].set_title(<span class="st" style="color: #20794D;">"Visualizing number of movies in each genre"</span>)</span>
<span id="cb54-11"></span>
<span id="cb54-12">fig.delaxes(axes[<span class="dv" style="color: #AD0000;">1</span>, <span class="dv" style="color: #AD0000;">1</span>])</span>
<span id="cb54-13">fig.tight_layout()</span>
<span id="cb54-14"></span>
<span id="cb54-15">plt.show()</span></code></pre></div>
<div class="cell-output cell-output-display">
<p><img src="https://sagarthacker.com/posts/spark/movielens_files/figure-html/cell-18-output-1.png" class="img-fluid"></p>
</div>
</div>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2023-01-21T02:14:53.216439Z&quot;,&quot;iopub.status.busy&quot;:&quot;2023-01-21T02:14:53.215996Z&quot;,&quot;iopub.status.idle&quot;:&quot;2023-01-21T02:15:41.785804Z&quot;,&quot;shell.execute_reply&quot;:&quot;2023-01-21T02:15:41.784883Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2023-01-21T02:14:53.216406Z&quot;}" data-execution_count="35">
<div class="sourceCode cell-code" id="cb55" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb55-1"><span class="co" style="color: #5E5E5E;"># Analyzing day of the month - Timestamp of rating</span></span>
<span id="cb55-2">day_month_rating <span class="op" style="color: #5E5E5E;">=</span> (df</span>
<span id="cb55-3">                    .withColumnRenamed(<span class="st" style="color: #20794D;">"timestamp"</span>, <span class="st" style="color: #20794D;">"date"</span>)</span>
<span id="cb55-4">                    .withColumn(<span class="st" style="color: #20794D;">"day"</span>, F.dayofmonth(F.col(<span class="st" style="color: #20794D;">"date"</span>)))</span>
<span id="cb55-5">                    .groupBy(<span class="st" style="color: #20794D;">"day"</span>).agg(F.mean(F.col(<span class="st" style="color: #20794D;">"rating"</span>)).alias(<span class="st" style="color: #20794D;">"avg_rating"</span>),</span>
<span id="cb55-6">                                        F.countDistinct(<span class="st" style="color: #20794D;">"movieId"</span>).alias(</span>
<span id="cb55-7">                                            <span class="st" style="color: #20794D;">"num_movies"</span>),</span>
<span id="cb55-8">                                        F.countDistinct(<span class="st" style="color: #20794D;">"movieId"</span>, <span class="st" style="color: #20794D;">"userId"</span>).alias(<span class="st" style="color: #20794D;">"num_ratings"</span>))</span>
<span id="cb55-9">                    ).toPandas()</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>                                                                                </code></pre>
</div>
</div>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2023-01-21T02:16:29.043589Z&quot;,&quot;iopub.status.busy&quot;:&quot;2023-01-21T02:16:29.043162Z&quot;,&quot;iopub.status.idle&quot;:&quot;2023-01-21T02:16:29.748099Z&quot;,&quot;shell.execute_reply&quot;:&quot;2023-01-21T02:16:29.747021Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2023-01-21T02:16:29.043554Z&quot;}" data-execution_count="37">
<div class="sourceCode cell-code" id="cb57" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb57-1">fig, axes <span class="op" style="color: #5E5E5E;">=</span> plt.subplots(nrows<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">2</span>, ncols<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">2</span>, figsize<span class="op" style="color: #5E5E5E;">=</span>(<span class="dv" style="color: #AD0000;">20</span>, <span class="dv" style="color: #AD0000;">12</span>))</span>
<span id="cb57-2"></span>
<span id="cb57-3">day_month_rating.plot.scatter(<span class="st" style="color: #20794D;">"day"</span>, <span class="st" style="color: #20794D;">"avg_rating"</span>, ax<span class="op" style="color: #5E5E5E;">=</span>axes[<span class="dv" style="color: #AD0000;">0</span>, <span class="dv" style="color: #AD0000;">0</span>])</span>
<span id="cb57-4">axes[<span class="dv" style="color: #AD0000;">0</span>, <span class="dv" style="color: #AD0000;">0</span>].set_title(<span class="st" style="color: #20794D;">"Visualizing average rating rated each day"</span>)</span>
<span id="cb57-5"></span>
<span id="cb57-6">day_month_rating.plot.scatter(<span class="st" style="color: #20794D;">"day"</span>, <span class="st" style="color: #20794D;">"num_ratings"</span>, ax<span class="op" style="color: #5E5E5E;">=</span>axes[<span class="dv" style="color: #AD0000;">0</span>, <span class="dv" style="color: #AD0000;">1</span>])</span>
<span id="cb57-7">axes[<span class="dv" style="color: #AD0000;">0</span>, <span class="dv" style="color: #AD0000;">1</span>].set_title(<span class="st" style="color: #20794D;">"Visualizing number of ratings rated each day"</span>)</span>
<span id="cb57-8"></span>
<span id="cb57-9">day_month_rating.plot.scatter(<span class="st" style="color: #20794D;">"day"</span>, <span class="st" style="color: #20794D;">"num_movies"</span>, ax<span class="op" style="color: #5E5E5E;">=</span>axes[<span class="dv" style="color: #AD0000;">1</span>, <span class="dv" style="color: #AD0000;">0</span>])</span>
<span id="cb57-10">axes[<span class="dv" style="color: #AD0000;">1</span>, <span class="dv" style="color: #AD0000;">0</span>].set_title(<span class="st" style="color: #20794D;">"Visualizing number of movies rated each day"</span>)</span>
<span id="cb57-11"></span>
<span id="cb57-12">fig.delaxes(axes[<span class="dv" style="color: #AD0000;">1</span>, <span class="dv" style="color: #AD0000;">1</span>])</span>
<span id="cb57-13">fig.tight_layout()</span>
<span id="cb57-14"></span>
<span id="cb57-15">plt.show()</span></code></pre></div>
<div class="cell-output cell-output-display">
<p><img src="https://sagarthacker.com/posts/spark/movielens_files/figure-html/cell-20-output-1.png" class="img-fluid"></p>
</div>
</div>
<p>We find:</p>
<ul>
<li>There is no clear pattern or relation between the <code>day of the month</code> with other features.</li>
</ul>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2023-01-21T02:16:48.632064Z&quot;,&quot;iopub.status.busy&quot;:&quot;2023-01-21T02:16:48.631032Z&quot;,&quot;iopub.status.idle&quot;:&quot;2023-01-21T02:17:35.560502Z&quot;,&quot;shell.execute_reply&quot;:&quot;2023-01-21T02:17:35.559042Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2023-01-21T02:16:48.632026Z&quot;}" data-execution_count="38">
<div class="sourceCode cell-code" id="cb58" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb58-1"><span class="co" style="color: #5E5E5E;"># Analyzing day of the week - Timestamp of rating</span></span>
<span id="cb58-2">day_week_rating <span class="op" style="color: #5E5E5E;">=</span> (df</span>
<span id="cb58-3">                   .withColumnRenamed(<span class="st" style="color: #20794D;">"timestamp"</span>, <span class="st" style="color: #20794D;">"date"</span>)</span>
<span id="cb58-4">                   .withColumn(<span class="st" style="color: #20794D;">"day"</span>, F.dayofweek(F.col(<span class="st" style="color: #20794D;">"date"</span>)))</span>
<span id="cb58-5">                   .groupBy(<span class="st" style="color: #20794D;">"day"</span>).agg(F.mean(F.col(<span class="st" style="color: #20794D;">"rating"</span>)).alias(<span class="st" style="color: #20794D;">"avg_rating"</span>),</span>
<span id="cb58-6">                                       F.countDistinct(<span class="st" style="color: #20794D;">"movieId"</span>).alias(</span>
<span id="cb58-7">                                           <span class="st" style="color: #20794D;">"num_movies"</span>),</span>
<span id="cb58-8">                                       F.countDistinct(<span class="st" style="color: #20794D;">"movieId"</span>, <span class="st" style="color: #20794D;">"userId"</span>).alias(<span class="st" style="color: #20794D;">"num_ratings"</span>))</span>
<span id="cb58-9">                   ).toPandas()</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>                                                                                </code></pre>
</div>
</div>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2023-01-21T02:22:03.278147Z&quot;,&quot;iopub.status.busy&quot;:&quot;2023-01-21T02:22:03.277286Z&quot;,&quot;iopub.status.idle&quot;:&quot;2023-01-21T02:22:03.928628Z&quot;,&quot;shell.execute_reply&quot;:&quot;2023-01-21T02:22:03.927437Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2023-01-21T02:22:03.278105Z&quot;}" data-execution_count="45">
<div class="sourceCode cell-code" id="cb60" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb60-1">fig, axes <span class="op" style="color: #5E5E5E;">=</span> plt.subplots(nrows<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">2</span>, ncols<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">2</span>, figsize<span class="op" style="color: #5E5E5E;">=</span>(<span class="dv" style="color: #AD0000;">20</span>, <span class="dv" style="color: #AD0000;">12</span>))</span>
<span id="cb60-2"></span>
<span id="cb60-3">axes[<span class="dv" style="color: #AD0000;">0</span>, <span class="dv" style="color: #AD0000;">0</span>].scatter(day_week_rating.day.astype(</span>
<span id="cb60-4">    <span class="st" style="color: #20794D;">'int64'</span>), day_week_rating.avg_rating)</span>
<span id="cb60-5">axes[<span class="dv" style="color: #AD0000;">0</span>, <span class="dv" style="color: #AD0000;">0</span>].set_title(<span class="st" style="color: #20794D;">"Visualizing average rating rated each day"</span>)</span>
<span id="cb60-6"></span>
<span id="cb60-7">axes[<span class="dv" style="color: #AD0000;">0</span>, <span class="dv" style="color: #AD0000;">1</span>].scatter(day_week_rating.day.astype(</span>
<span id="cb60-8">    <span class="st" style="color: #20794D;">'int64'</span>), day_week_rating.num_ratings)</span>
<span id="cb60-9">axes[<span class="dv" style="color: #AD0000;">0</span>, <span class="dv" style="color: #AD0000;">1</span>].set_title(<span class="st" style="color: #20794D;">"Visualizing number of ratings rated each day"</span>)</span>
<span id="cb60-10"></span>
<span id="cb60-11">axes[<span class="dv" style="color: #AD0000;">1</span>, <span class="dv" style="color: #AD0000;">0</span>].scatter(day_week_rating.day.astype(</span>
<span id="cb60-12">    <span class="st" style="color: #20794D;">'int64'</span>), day_week_rating.num_movies)</span>
<span id="cb60-13">axes[<span class="dv" style="color: #AD0000;">1</span>, <span class="dv" style="color: #AD0000;">0</span>].set_title(<span class="st" style="color: #20794D;">"Visualizing number of movies rated each day"</span>)</span>
<span id="cb60-14"></span>
<span id="cb60-15">fig.delaxes(axes[<span class="dv" style="color: #AD0000;">1</span>, <span class="dv" style="color: #AD0000;">1</span>])</span>
<span id="cb60-16">fig.tight_layout()</span>
<span id="cb60-17"></span>
<span id="cb60-18">plt.show()</span></code></pre></div>
<div class="cell-output cell-output-display">
<p><img src="https://sagarthacker.com/posts/spark/movielens_files/figure-html/cell-22-output-1.png" class="img-fluid"></p>
</div>
</div>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2023-01-21T02:22:20.268475Z&quot;,&quot;iopub.status.busy&quot;:&quot;2023-01-21T02:22:20.268058Z&quot;,&quot;iopub.status.idle&quot;:&quot;2023-01-21T02:23:19.346706Z&quot;,&quot;shell.execute_reply&quot;:&quot;2023-01-21T02:23:19.335576Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2023-01-21T02:22:20.268440Z&quot;}" data-execution_count="46">
<div class="sourceCode cell-code" id="cb61" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb61-1">release_year_rating <span class="op" style="color: #5E5E5E;">=</span> (df</span>
<span id="cb61-2">                       .select(<span class="st" style="color: #20794D;">"title"</span>, <span class="st" style="color: #20794D;">"movieId"</span>, <span class="st" style="color: #20794D;">"userId"</span>, <span class="st" style="color: #20794D;">"rating"</span>)</span>
<span id="cb61-3">                       .withColumn(<span class="st" style="color: #20794D;">"releaseyear"</span>, F.substring(<span class="st" style="color: #20794D;">'title'</span>, <span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">5</span>, <span class="dv" style="color: #AD0000;">4</span>))</span>
<span id="cb61-4">                       .<span class="bu" style="color: null;">filter</span>(F.col(<span class="st" style="color: #20794D;">"releaseyear"</span>) <span class="op" style="color: #5E5E5E;">&gt;</span> <span class="dv" style="color: #AD0000;">1900</span>)</span>
<span id="cb61-5">                       .groupBy(<span class="st" style="color: #20794D;">"releaseyear"</span>).agg(F.mean(F.col(<span class="st" style="color: #20794D;">"rating"</span>)).alias(<span class="st" style="color: #20794D;">"avg_rating"</span>),</span>
<span id="cb61-6">                                                   F.countDistinct(<span class="st" style="color: #20794D;">"movieId"</span>).alias(</span>
<span id="cb61-7">                                                       <span class="st" style="color: #20794D;">"num_movies"</span>),</span>
<span id="cb61-8">                                                   F.countDistinct(<span class="st" style="color: #20794D;">"movieId"</span>, <span class="st" style="color: #20794D;">"userId"</span>).alias(<span class="st" style="color: #20794D;">"num_ratings"</span>))</span>
<span id="cb61-9">                       ).toPandas()</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>                                                                                </code></pre>
</div>
</div>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2023-01-21T02:23:40.767508Z&quot;,&quot;iopub.status.busy&quot;:&quot;2023-01-21T02:23:40.766525Z&quot;,&quot;iopub.status.idle&quot;:&quot;2023-01-21T02:23:41.438888Z&quot;,&quot;shell.execute_reply&quot;:&quot;2023-01-21T02:23:41.437540Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2023-01-21T02:23:40.767452Z&quot;}" data-execution_count="48">
<div class="sourceCode cell-code" id="cb63" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb63-1">fig, axes <span class="op" style="color: #5E5E5E;">=</span> plt.subplots(nrows<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">2</span>, ncols<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">2</span>, figsize<span class="op" style="color: #5E5E5E;">=</span>(<span class="dv" style="color: #AD0000;">20</span>, <span class="dv" style="color: #AD0000;">12</span>))</span>
<span id="cb63-2"></span>
<span id="cb63-3">axes[<span class="dv" style="color: #AD0000;">0</span>, <span class="dv" style="color: #AD0000;">0</span>].scatter(release_year_rating.releaseyear.astype(</span>
<span id="cb63-4">    <span class="st" style="color: #20794D;">'int64'</span>), release_year_rating.avg_rating)</span>
<span id="cb63-5">axes[<span class="dv" style="color: #AD0000;">0</span>, <span class="dv" style="color: #AD0000;">0</span>].set_title(<span class="st" style="color: #20794D;">"Visualizing average rating vs Release Year"</span>)</span>
<span id="cb63-6"></span>
<span id="cb63-7">axes[<span class="dv" style="color: #AD0000;">0</span>, <span class="dv" style="color: #AD0000;">1</span>].scatter(release_year_rating.releaseyear.astype(</span>
<span id="cb63-8">    <span class="st" style="color: #20794D;">'int64'</span>), release_year_rating.num_ratings)</span>
<span id="cb63-9">axes[<span class="dv" style="color: #AD0000;">0</span>, <span class="dv" style="color: #AD0000;">1</span>].set_title(<span class="st" style="color: #20794D;">"Visualizing number of ratings vs Release Year"</span>)</span>
<span id="cb63-10"></span>
<span id="cb63-11">axes[<span class="dv" style="color: #AD0000;">1</span>, <span class="dv" style="color: #AD0000;">0</span>].scatter(release_year_rating.releaseyear.astype(</span>
<span id="cb63-12">    <span class="st" style="color: #20794D;">'int64'</span>), release_year_rating.num_movies)</span>
<span id="cb63-13">axes[<span class="dv" style="color: #AD0000;">1</span>, <span class="dv" style="color: #AD0000;">0</span>].set_title(<span class="st" style="color: #20794D;">"Visualizing number of movies vs Release Year"</span>)</span>
<span id="cb63-14"></span>
<span id="cb63-15">fig.delaxes(axes[<span class="dv" style="color: #AD0000;">1</span>, <span class="dv" style="color: #AD0000;">1</span>])</span>
<span id="cb63-16">fig.tight_layout()</span>
<span id="cb63-17"></span>
<span id="cb63-18">plt.show()</span></code></pre></div>
<div class="cell-output cell-output-display">
<p><img src="https://sagarthacker.com/posts/spark/movielens_files/figure-html/cell-24-output-1.png" class="img-fluid"></p>
</div>
</div>
<p>We find:</p>
<ul>
<li>Number of movies have increased significantly over the years.</li>
<li>Number of rating has a weird uprise and drop.</li>
</ul>
</section>
<section id="data-preparation" class="level2">
<h2 class="anchored" data-anchor-id="data-preparation">4. Data Preparation</h2>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2023-01-21T02:47:12.664319Z&quot;,&quot;iopub.status.busy&quot;:&quot;2023-01-21T02:47:12.662878Z&quot;,&quot;iopub.status.idle&quot;:&quot;2023-01-21T02:47:12.705674Z&quot;,&quot;shell.execute_reply&quot;:&quot;2023-01-21T02:47:12.704298Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2023-01-21T02:47:12.664260Z&quot;}" data-execution_count="52">
<div class="sourceCode cell-code" id="cb64" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb64-1"><span class="co" style="color: #5E5E5E;"># Train Test split</span></span>
<span id="cb64-2">(train, test) <span class="op" style="color: #5E5E5E;">=</span> df.select(</span>
<span id="cb64-3">    [<span class="st" style="color: #20794D;">'userId'</span>, <span class="st" style="color: #20794D;">'movieId'</span>, <span class="st" style="color: #20794D;">'rating'</span>]).randomSplit([<span class="fl" style="color: #AD0000;">0.8</span>, <span class="fl" style="color: #AD0000;">0.2</span>])</span></code></pre></div>
</div>
</section>
<section id="model-building" class="level2">
<h2 class="anchored" data-anchor-id="model-building">5. Model Building</h2>
<p>Parameter Description:</p>
<ul>
<li><code>rank</code>: rank of the factorization</li>
<li><code>maxIter</code>: max number of iterations (&gt;= 0)</li>
<li><code>regParam</code>: regularization parameter (&gt;= 0)</li>
<li><code>userCol</code>: column name for user ids. Ids must be within the integer value range</li>
<li><code>itemCol</code>: column name for item ids. Ids must be within the integer value range</li>
<li><code>ratingCol</code>: column name for ratings</li>
<li><code>coldStartStrategy</code>: strategy for dealing with unknown or new users/items at prediction time. This may be useful in cross-validation or production scenarios, for handling user/item ids the model has not seen in the training data. Supported values: ‘nan’, ‘drop’</li>
</ul>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2023-01-21T02:45:47.654650Z&quot;,&quot;iopub.status.busy&quot;:&quot;2023-01-21T02:45:47.654100Z&quot;,&quot;iopub.status.idle&quot;:&quot;2023-01-21T02:45:47.830287Z&quot;,&quot;shell.execute_reply&quot;:&quot;2023-01-21T02:45:47.828896Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2023-01-21T02:45:47.654612Z&quot;}" data-execution_count="49">
<div class="sourceCode cell-code" id="cb65" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb65-1"><span class="co" style="color: #5E5E5E;"># Basic Model building</span></span>
<span id="cb65-2">als <span class="op" style="color: #5E5E5E;">=</span> ALS(rank<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">10</span>, maxIter<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">4</span>, regParam<span class="op" style="color: #5E5E5E;">=</span><span class="fl" style="color: #AD0000;">0.1</span>, userCol<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'userId'</span>,</span>
<span id="cb65-3">          itemCol<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'movieId'</span>, ratingCol<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'rating'</span>, coldStartStrategy<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"drop"</span>)</span>
<span id="cb65-4"></span>
<span id="cb65-5"><span class="co" style="color: #5E5E5E;"># Define evaluator as RMSE</span></span>
<span id="cb65-6">evaluator <span class="op" style="color: #5E5E5E;">=</span> RegressionEvaluator(</span>
<span id="cb65-7">    metricName<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"rmse"</span>, labelCol<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"rating"</span>, predictionCol<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"prediction"</span>)</span></code></pre></div>
</div>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2023-01-21T02:47:17.031123Z&quot;,&quot;iopub.status.busy&quot;:&quot;2023-01-21T02:47:17.030704Z&quot;,&quot;iopub.status.idle&quot;:&quot;2023-01-21T02:50:41.614120Z&quot;,&quot;shell.execute_reply&quot;:&quot;2023-01-21T02:50:41.612772Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2023-01-21T02:47:17.031090Z&quot;}" data-execution_count="53">
<div class="sourceCode cell-code" id="cb66" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb66-1"><span class="op" style="color: #5E5E5E;">%</span> <span class="op" style="color: #5E5E5E;">%</span> time</span>
<span id="cb66-2"><span class="co" style="color: #5E5E5E;"># Fit the model</span></span>
<span id="cb66-3">model <span class="op" style="color: #5E5E5E;">=</span> als.fit(train)</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>                                                                                </code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>CPU times: user 168 ms, sys: 40.7 ms, total: 209 ms
Wall time: 3min 24s</code></pre>
</div>
</div>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2023-01-21T02:55:40.502582Z&quot;,&quot;iopub.status.busy&quot;:&quot;2023-01-21T02:55:40.502100Z&quot;,&quot;iopub.status.idle&quot;:&quot;2023-01-21T02:56:11.120774Z&quot;,&quot;shell.execute_reply&quot;:&quot;2023-01-21T02:56:11.119717Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2023-01-21T02:55:40.502550Z&quot;}" data-execution_count="54">
<div class="sourceCode cell-code" id="cb69" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb69-1"><span class="co" style="color: #5E5E5E;"># Evaluate the model</span></span>
<span id="cb69-2">predictions <span class="op" style="color: #5E5E5E;">=</span> model.transform(test)</span>
<span id="cb69-3">rmse <span class="op" style="color: #5E5E5E;">=</span> evaluator.evaluate(predictions)</span>
<span id="cb69-4"></span>
<span id="cb69-5"><span class="bu" style="color: null;">print</span>(<span class="st" style="color: #20794D;">'The RMSE for our model is: </span><span class="sc" style="color: #5E5E5E;">{}</span><span class="st" style="color: #20794D;">'</span>.<span class="bu" style="color: null;">format</span>(rmse))</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>[Stage 170:============================&gt;                            (2 + 2) / 4]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>The RMSE for our model is: 0.8176288680275328</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>                                                                                </code></pre>
</div>
</div>
<section id="improving-the-model" class="level3">
<h3 class="anchored" data-anchor-id="improving-the-model">5.1. Improving the model</h3>
<p>One way to improve the model is to tune the hyperparameter of the model. <code>CrossValidator</code> is familiar with sklearn’s <code>cross_val_score</code> and <code>ParamGridBuilder</code> is a builder for a param grid used in grid search-based model selection.</p>
<p>The cross validation consumes enormouse amout of time and hence, below you can find the skeleton code to perform hyper parameter tuning.</p>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2023-01-21T02:59:21.284423Z&quot;,&quot;iopub.status.busy&quot;:&quot;2023-01-21T02:59:21.283973Z&quot;,&quot;iopub.status.idle&quot;:&quot;2023-01-21T02:59:21.292465Z&quot;,&quot;shell.execute_reply&quot;:&quot;2023-01-21T02:59:21.291396Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2023-01-21T02:59:21.284385Z&quot;}" data-execution_count="56">
<div class="sourceCode cell-code" id="cb73" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb73-1"><span class="co" style="color: #5E5E5E;"># Define the model parameter grid</span></span>
<span id="cb73-2">param_grid <span class="op" style="color: #5E5E5E;">=</span> ParamGridBuilder()<span class="op" style="color: #5E5E5E;">\</span></span>
<span id="cb73-3">    .addGrid(als.rank, [<span class="dv" style="color: #AD0000;">12</span>, <span class="dv" style="color: #AD0000;">13</span>, <span class="dv" style="color: #AD0000;">14</span>])<span class="op" style="color: #5E5E5E;">\</span></span>
<span id="cb73-4">    .addGrid(als.maxIter, [<span class="dv" style="color: #AD0000;">18</span>, <span class="dv" style="color: #AD0000;">19</span>, <span class="dv" style="color: #AD0000;">20</span>])<span class="op" style="color: #5E5E5E;">\</span></span>
<span id="cb73-5">    .addGrid(als.regParam, [<span class="fl" style="color: #AD0000;">0.05</span>, <span class="fl" style="color: #AD0000;">0.5</span>, <span class="fl" style="color: #AD0000;">0.1</span>])<span class="op" style="color: #5E5E5E;">\</span></span>
<span id="cb73-6">    .build()</span>
<span id="cb73-7"></span>
<span id="cb73-8"><span class="co" style="color: #5E5E5E;"># Initialize the cross validator</span></span>
<span id="cb73-9">crossVal <span class="op" style="color: #5E5E5E;">=</span> CrossValidator(</span>
<span id="cb73-10">    estimator<span class="op" style="color: #5E5E5E;">=</span>als, estimatorParamMaps<span class="op" style="color: #5E5E5E;">=</span>param_grid, evaluator<span class="op" style="color: #5E5E5E;">=</span>evaluator, numFolds<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">10</span>)</span>
<span id="cb73-11"></span>
<span id="cb73-12"><span class="co" style="color: #5E5E5E;"># Fit the model and perform cross validation</span></span>
<span id="cb73-13">cvModel <span class="op" style="color: #5E5E5E;">=</span> crossVal.fit(train)</span>
<span id="cb73-14"></span>
<span id="cb73-15"><span class="co" style="color: #5E5E5E;"># Evaluate the model</span></span>
<span id="cb73-16">cvPredictions <span class="op" style="color: #5E5E5E;">=</span> cvModel.transform(test)</span>
<span id="cb73-17">cvRmse <span class="op" style="color: #5E5E5E;">=</span> evaluator.evaluate(cvPredictions)</span>
<span id="cb73-18"></span>
<span id="cb73-19"><span class="bu" style="color: null;">print</span>(<span class="st" style="color: #20794D;">'The RMSE for our model is: </span><span class="sc" style="color: #5E5E5E;">{}</span><span class="st" style="color: #20794D;">'</span>.<span class="bu" style="color: null;">format</span>(cvRmse))</span></code></pre></div>
</div>
</section>
</section>
<section id="recommend-movies" class="level2">
<h2 class="anchored" data-anchor-id="recommend-movies">6. Recommend Movies</h2>
<p>To recommend movies for a specific user, below is a function that applies the trained model, ALSModel, on the list of movies that the user hasn’t yet rated</p>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2023-01-21T03:15:25.866163Z&quot;,&quot;iopub.status.busy&quot;:&quot;2023-01-21T03:15:25.864695Z&quot;,&quot;iopub.status.idle&quot;:&quot;2023-01-21T03:15:25.879001Z&quot;,&quot;shell.execute_reply&quot;:&quot;2023-01-21T03:15:25.876582Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2023-01-21T03:15:25.866101Z&quot;}" data-execution_count="58">
<div class="sourceCode cell-code" id="cb74" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb74-1"><span class="kw" style="color: #003B4F;">def</span> recommendMovies(model, user, nRecommendation):</span>
<span id="cb74-2">    <span class="co" style="color: #5E5E5E;"># Create a Spark DataFrame with the specified user and all the movies listed in the ratings DataFrame</span></span>
<span id="cb74-3">    dataSet <span class="op" style="color: #5E5E5E;">=</span> ratings.select(<span class="st" style="color: #20794D;">'movieId'</span>).distinct(</span>
<span id="cb74-4">    ).withColumn(<span class="st" style="color: #20794D;">'userId'</span>, F.lit(user))</span>
<span id="cb74-5"></span>
<span id="cb74-6">    <span class="co" style="color: #5E5E5E;"># Create a Spark DataFrame with the movies that have already been rated by this user</span></span>
<span id="cb74-7">    moviesAlreadyRated <span class="op" style="color: #5E5E5E;">=</span> ratings.<span class="bu" style="color: null;">filter</span>(</span>
<span id="cb74-8">        ratings.userId <span class="op" style="color: #5E5E5E;">==</span> user).select(<span class="st" style="color: #20794D;">'movieId'</span>, <span class="st" style="color: #20794D;">'userId'</span>)</span>
<span id="cb74-9"></span>
<span id="cb74-10">    <span class="co" style="color: #5E5E5E;"># Apply the recommender system to the data set without the already rated movies to predict ratings</span></span>
<span id="cb74-11">    predictions <span class="op" style="color: #5E5E5E;">=</span> model.transform(dataSet.subtract(moviesAlreadyRated)).dropna().orderBy(</span>
<span id="cb74-12">        <span class="st" style="color: #20794D;">'prediction'</span>, ascending<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">False</span>).limit(nRecommendation).select(<span class="st" style="color: #20794D;">'movieId'</span>, <span class="st" style="color: #20794D;">'prediction'</span>)</span>
<span id="cb74-13"></span>
<span id="cb74-14">    <span class="co" style="color: #5E5E5E;"># Join with the movies DataFrame to get the movies titles and genres</span></span>
<span id="cb74-15">    recommendations <span class="op" style="color: #5E5E5E;">=</span> predictions.join(movies, predictions.movieId <span class="op" style="color: #5E5E5E;">==</span> movies.movieId).select(</span>
<span id="cb74-16">        predictions.movieId, movies.title, movies.genres, predictions.prediction)</span>
<span id="cb74-17"></span>
<span id="cb74-18">    <span class="cf" style="color: #003B4F;">return</span> recommendations</span></code></pre></div>
</div>
<p>Now run this function to recommend 10 movies for different users:</p>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2023-01-21T03:16:01.397105Z&quot;,&quot;iopub.status.busy&quot;:&quot;2023-01-21T03:16:01.396383Z&quot;,&quot;iopub.status.idle&quot;:&quot;2023-01-21T03:17:05.356420Z&quot;,&quot;shell.execute_reply&quot;:&quot;2023-01-21T03:17:05.355281Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2023-01-21T03:16:01.397059Z&quot;}" data-execution_count="59">
<div class="sourceCode cell-code" id="cb75" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb75-1"><span class="bu" style="color: null;">print</span>(<span class="st" style="color: #20794D;">'Recommendations for user 153:'</span>)</span>
<span id="cb75-2">recommendMovies(model, <span class="dv" style="color: #AD0000;">153</span>, <span class="dv" style="color: #AD0000;">10</span>).toPandas()</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Recommendations for user 153:</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>                                                                                </code></pre>
</div>
<div class="cell-output cell-output-display" data-execution_count="59">

<div>

<table class="dataframe table table-sm table-striped">
  <thead>
    <tr>
      <th></th>
      <th>movieId</th>
      <th>title</th>
      <th>genres</th>
      <th>prediction</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td>81117</td>
      <td>Moth, The (Cma) (1980)</td>
      <td>Drama</td>
      <td>6.064673</td>
    </tr>
    <tr>
      <th>1</th>
      <td>82328</td>
      <td>One Fine Spring Day (Bomnaleun ganda) (2001)</td>
      <td>Drama</td>
      <td>5.925478</td>
    </tr>
    <tr>
      <th>2</th>
      <td>109887</td>
      <td>Great Passage, The (Fune wo amu) (2013)</td>
      <td>Drama</td>
      <td>5.818318</td>
    </tr>
    <tr>
      <th>3</th>
      <td>116183</td>
      <td>It's Love I'm After (1937)</td>
      <td>Comedy</td>
      <td>5.911806</td>
    </tr>
    <tr>
      <th>4</th>
      <td>117907</td>
      <td>My Brother Tom (2001)</td>
      <td>Drama</td>
      <td>6.311569</td>
    </tr>
    <tr>
      <th>5</th>
      <td>120134</td>
      <td>Doggiewoggiez! Poochiewoochiez! (2012)</td>
      <td>Comedy</td>
      <td>6.050812</td>
    </tr>
    <tr>
      <th>6</th>
      <td>120821</td>
      <td>The War at Home (1979)</td>
      <td>Documentary|War</td>
      <td>6.015426</td>
    </tr>
    <tr>
      <th>7</th>
      <td>121029</td>
      <td>No Distance Left to Run (2010)</td>
      <td>Documentary</td>
      <td>6.553770</td>
    </tr>
    <tr>
      <th>8</th>
      <td>129536</td>
      <td>Code Name Coq Rouge (1989)</td>
      <td>(no genres listed)</td>
      <td>6.092913</td>
    </tr>
    <tr>
      <th>9</th>
      <td>130347</td>
      <td>Bill Hicks: Sane Man (1989)</td>
      <td>Comedy</td>
      <td>5.887615</td>
    </tr>
  </tbody>
</table>
</div>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>[Stage 420:=======================================&gt;                (7 + 3) / 10]</code></pre>
</div>
</div>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2023-01-21T03:17:47.450314Z&quot;,&quot;iopub.status.busy&quot;:&quot;2023-01-21T03:17:47.449710Z&quot;,&quot;iopub.status.idle&quot;:&quot;2023-01-21T03:18:59.924784Z&quot;,&quot;shell.execute_reply&quot;:&quot;2023-01-21T03:18:59.923635Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2023-01-21T03:17:47.450268Z&quot;}" data-execution_count="60">
<div class="sourceCode cell-code" id="cb79" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb79-1"><span class="bu" style="color: null;">print</span>(<span class="st" style="color: #20794D;">'Recommendations for user 250:'</span>)</span>
<span id="cb79-2">recommendMovies(model, <span class="dv" style="color: #AD0000;">250</span>, <span class="dv" style="color: #AD0000;">10</span>).toPandas()</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Recommendations for user 250:</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>                                                                                </code></pre>
</div>
<div class="cell-output cell-output-display" data-execution_count="60">

<div>

<table class="dataframe table table-sm table-striped">
  <thead>
    <tr>
      <th></th>
      <th>movieId</th>
      <th>title</th>
      <th>genres</th>
      <th>prediction</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td>26793</td>
      <td>Tito and Me (Tito i ja) (1992)</td>
      <td>Comedy</td>
      <td>4.924314</td>
    </tr>
    <tr>
      <th>1</th>
      <td>103593</td>
      <td>Taming the Fire (Ukroshcheniye ognya) (1972)</td>
      <td>Documentary|Drama|Sci-Fi</td>
      <td>4.850996</td>
    </tr>
    <tr>
      <th>2</th>
      <td>104317</td>
      <td>Flight of the Conchords: A Texan Odyssey (2006)</td>
      <td>Comedy</td>
      <td>4.919813</td>
    </tr>
    <tr>
      <th>3</th>
      <td>107434</td>
      <td>Diplomatic Immunity (2009– )</td>
      <td>Comedy</td>
      <td>4.923127</td>
    </tr>
    <tr>
      <th>4</th>
      <td>110669</td>
      <td>Honest Liar, An (2014)</td>
      <td>Comedy|Documentary</td>
      <td>4.900411</td>
    </tr>
    <tr>
      <th>5</th>
      <td>118338</td>
      <td>Hard to Be a God (2013)</td>
      <td>Sci-Fi</td>
      <td>4.911441</td>
    </tr>
    <tr>
      <th>6</th>
      <td>120134</td>
      <td>Doggiewoggiez! Poochiewoochiez! (2012)</td>
      <td>Comedy</td>
      <td>5.056443</td>
    </tr>
    <tr>
      <th>7</th>
      <td>121029</td>
      <td>No Distance Left to Run (2010)</td>
      <td>Documentary</td>
      <td>5.534087</td>
    </tr>
    <tr>
      <th>8</th>
      <td>128091</td>
      <td>Craig Ferguson: A Wee Bit o' Revolution (2009)</td>
      <td>Comedy</td>
      <td>5.608799</td>
    </tr>
    <tr>
      <th>9</th>
      <td>130347</td>
      <td>Bill Hicks: Sane Man (1989)</td>
      <td>Comedy</td>
      <td>5.114568</td>
    </tr>
  </tbody>
</table>
</div>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>[Stage 666:&gt;                                                       (0 + 4) / 10]</code></pre>
</div>
</div>
</section>
<section id="thank-you" class="level2">
<h2 class="anchored" data-anchor-id="thank-you">Thank you</h2>
<p>Share if you liked it, comment if you loved it. Hope to see you guys in the next one. Peace!</p>
</section>
<section id="resources" class="level2">
<h2 class="anchored" data-anchor-id="resources">Resources</h2>
<ol type="1">
<li><a href="https://spark.apache.org/docs/latest/ml-tuning.html">ML Tuning: Model Selection and Hyperparameter Tuning Using PySpark</a></li>
<li><a href="https://spark.apache.org/docs/latest/api/python/reference/api/pyspark.ml.recommendation.ALS.html">ALS</a></li>
<li><a href="https://spark.apache.org/docs/latest/api/python/getting_started/index.html">PySpark Documentation</a></li>
</ol>
</section>
<section id="data-citation" class="level2">
<h2 class="anchored" data-anchor-id="data-citation">Data Citation</h2>
<p>F. Maxwell Harper and Joseph A. Konstan. 2015. The MovieLens Datasets: History and Context. ACM Transactions on Interactive Intelligent Systems (TiiS) 5, 4, Article 19 (December 2015), 19 pages. DOI=http://dx.doi.org/10.1145/2827872</p>


</section>

 ]]></description>
  <category>PySpark</category>
  <guid>https://sagarthacker.com/posts/spark/movielens.html</guid>
  <pubDate>Thu, 20 Jan 2022 05:00:00 GMT</pubDate>
  <media:content url="https://sagarthacker.com/posts/spark/movie-recommendation.jpeg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Song Popularity EDA</title>
  <dc:creator>Sagar Thacker</dc:creator>
  <link>https://sagarthacker.com/posts/kaggle/song-popularity-eda.html</link>
  <description><![CDATA[ 




<p>This Python notebook is the Python version of <a href="https://www.kaggle.com/headsortails/song-popularity-eda-live-coding-fun">Song Popularity EDA - Live Coding Fun</a> by <a href="https://www.kaggle.com/headsortails">Martin Henze</a></p>
<p>Purpose of this notebook is to recreate the plots in python for learning purpose.</p>
<p>The recording of the live-coding session can be found on Abhishek Thakur’s YouTube channel:</p>
<ul>
<li><a href="https://www.youtube.com/watch?v=JXF-7rCcR1c">Song Popularity Prediction - EDA (Part 1)</a></li>
<li><a href="https://www.youtube.com/watch?v=2aE6SvCVOis">Song Popularity Prediction - EDA (Part 2)</a></li>
</ul>
<section id="introduction" class="level2">
<h2 class="anchored" data-anchor-id="introduction">1. Introduction</h2>
<p>The competition is about Song Prediction based on a set of different features. The dataset contains the basic file such as <code>train.csv</code>, <code>test.csv</code> and <code>submission_sample.csv</code>. The dataset used in this competition is in tabular format. The evaluation metric used for this competition is AUC score.</p>
</section>
<section id="preparation" class="level2">
<h2 class="anchored" data-anchor-id="preparation">2. Preparation</h2>
<p>Initially we’ll load different libraries used in our analysis. Also, load the train and test data.</p>
<div class="cell" data-execution_count="1">
<details>
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="co" style="color: #5E5E5E;"># Import libraries and load the data</span></span>
<span id="cb1-2"><span class="im" style="color: #00769E;">import</span> numpy <span class="im" style="color: #00769E;">as</span> np</span>
<span id="cb1-3"><span class="im" style="color: #00769E;">import</span> pandas <span class="im" style="color: #00769E;">as</span> pd</span>
<span id="cb1-4"><span class="im" style="color: #00769E;">import</span> matplotlib.pyplot <span class="im" style="color: #00769E;">as</span> plt</span>
<span id="cb1-5"><span class="im" style="color: #00769E;">import</span> seaborn <span class="im" style="color: #00769E;">as</span> sns</span>
<span id="cb1-6"><span class="im" style="color: #00769E;">import</span> os</span>
<span id="cb1-7"><span class="im" style="color: #00769E;">import</span> random</span>
<span id="cb1-8"><span class="im" style="color: #00769E;">import</span> warnings</span>
<span id="cb1-9"></span>
<span id="cb1-10"><span class="im" style="color: #00769E;">from</span> plotnine <span class="im" style="color: #00769E;">import</span> <span class="op" style="color: #5E5E5E;">*</span></span>
<span id="cb1-11"></span>
<span id="cb1-12"><span class="op" style="color: #5E5E5E;">%</span>matplotlib inline</span>
<span id="cb1-13">warnings.filterwarnings(<span class="st" style="color: #20794D;">"ignore"</span>)</span></code></pre></div>
</details>
</div>
<div class="cell" data-tags="[]" data-execution_count="28">
<details>
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb2-1"><span class="co" style="color: #5E5E5E;"># Load the data</span></span>
<span id="cb2-2">train <span class="op" style="color: #5E5E5E;">=</span> pd.read_csv(<span class="st" style="color: #20794D;">"/kaggle/input/song-popularity-prediction/train.csv"</span>)</span>
<span id="cb2-3">test <span class="op" style="color: #5E5E5E;">=</span> pd.read_csv(<span class="st" style="color: #20794D;">"/kaggle/input/song-popularity-prediction/test.csv"</span>)</span></code></pre></div>
</details>
</div>
</section>
<section id="overview-structure-and-data-content" class="level2">
<h2 class="anchored" data-anchor-id="overview-structure-and-data-content">3. Overview: structure and data content</h2>
<p>The first step we’ll do is look at the raw data. This tell us about the different features in the dataset, missing values, and types of features (numeric, string, categorical, etc.).</p>
<section id="look-at-the-data" class="level3">
<h3 class="anchored" data-anchor-id="look-at-the-data">3.1. Look at the data</h3>
<p>Let’s look at the basic structure of the data</p>
<div class="cell" data-tags="[]" data-execution_count="6">
<details>
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb3-1"><span class="bu" style="color: null;">print</span>(<span class="st" style="color: #20794D;">'</span><span class="ch" style="color: #20794D;">\n</span><span class="st" style="color: #20794D;">Information about Data'</span>)</span>
<span id="cb3-2">display(train.info())</span></code></pre></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code>
Information about Data
&lt;class 'pandas.core.frame.DataFrame'&gt;
RangeIndex: 40000 entries, 0 to 39999
Data columns (total 15 columns):
 #   Column            Non-Null Count  Dtype  
---  ------            --------------  -----  
 0   id                40000 non-null  int64  
 1   song_duration_ms  35899 non-null  float64
 2   acousticness      36008 non-null  float64
 3   danceability      35974 non-null  float64
 4   energy            36025 non-null  float64
 5   instrumentalness  36015 non-null  float64
 6   key               35935 non-null  float64
 7   liveness          35914 non-null  float64
 8   loudness          36043 non-null  float64
 9   audio_mode        40000 non-null  int64  
 10  speechiness       40000 non-null  float64
 11  tempo             40000 non-null  float64
 12  time_signature    40000 non-null  int64  
 13  audio_valence     40000 non-null  float64
 14  song_popularity   40000 non-null  int64  
dtypes: float64(11), int64(4)
memory usage: 4.6 MB</code></pre>
</div>
<div class="cell-output cell-output-display">
<pre><code>None</code></pre>
</div>
</div>
<p>We find:</p>
<ul>
<li>There are 40000 entries and 15 features in total.</li>
<li>All the column data type is either int or float i.e.&nbsp;all the columns are numeric. This make is comparatively easier to work with compared to columns contains string type data.</li>
<li>We can also observe there are columns that contain less than 40K Non-Null values which indicates missing values in the dataset.</li>
</ul>
<p>Let’s now look at the top 20 rows of the data.</p>
<div class="cell" data-tags="[]" data-execution_count="7">
<details>
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb6-1"><span class="co" style="color: #5E5E5E;">"""Display top 20 rows of the train data"""</span></span>
<span id="cb6-2">display(train.head(<span class="dv" style="color: #AD0000;">20</span>).style.set_caption(<span class="st" style="color: #20794D;">"First Twenty rows of Training Data"</span>))</span></code></pre></div>
</details>
<div class="cell-output cell-output-display">

<style type="text/css">
</style>
<table id="T_a11c9_">
  <caption>First Twenty rows of Training Data</caption>
  <thead>
    <tr>
      <th class="blank level0">&nbsp;</th>
      <th class="col_heading level0 col0">id</th>
      <th class="col_heading level0 col1">song_duration_ms</th>
      <th class="col_heading level0 col2">acousticness</th>
      <th class="col_heading level0 col3">danceability</th>
      <th class="col_heading level0 col4">energy</th>
      <th class="col_heading level0 col5">instrumentalness</th>
      <th class="col_heading level0 col6">key</th>
      <th class="col_heading level0 col7">liveness</th>
      <th class="col_heading level0 col8">loudness</th>
      <th class="col_heading level0 col9">audio_mode</th>
      <th class="col_heading level0 col10">speechiness</th>
      <th class="col_heading level0 col11">tempo</th>
      <th class="col_heading level0 col12">time_signature</th>
      <th class="col_heading level0 col13">audio_valence</th>
      <th class="col_heading level0 col14">song_popularity</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th id="T_a11c9_level0_row0" class="row_heading level0 row0">0</th>
      <td id="T_a11c9_row0_col0" class="data row0 col0">0</td>
      <td id="T_a11c9_row0_col1" class="data row0 col1">212990.000000</td>
      <td id="T_a11c9_row0_col2" class="data row0 col2">0.642286</td>
      <td id="T_a11c9_row0_col3" class="data row0 col3">0.856520</td>
      <td id="T_a11c9_row0_col4" class="data row0 col4">0.707073</td>
      <td id="T_a11c9_row0_col5" class="data row0 col5">0.002001</td>
      <td id="T_a11c9_row0_col6" class="data row0 col6">10.000000</td>
      <td id="T_a11c9_row0_col7" class="data row0 col7">nan</td>
      <td id="T_a11c9_row0_col8" class="data row0 col8">-5.619088</td>
      <td id="T_a11c9_row0_col9" class="data row0 col9">0</td>
      <td id="T_a11c9_row0_col10" class="data row0 col10">0.082570</td>
      <td id="T_a11c9_row0_col11" class="data row0 col11">158.386236</td>
      <td id="T_a11c9_row0_col12" class="data row0 col12">4</td>
      <td id="T_a11c9_row0_col13" class="data row0 col13">0.734642</td>
      <td id="T_a11c9_row0_col14" class="data row0 col14">0</td>
    </tr>
    <tr>
      <th id="T_a11c9_level0_row1" class="row_heading level0 row1">1</th>
      <td id="T_a11c9_row1_col0" class="data row1 col0">1</td>
      <td id="T_a11c9_row1_col1" class="data row1 col1">nan</td>
      <td id="T_a11c9_row1_col2" class="data row1 col2">0.054866</td>
      <td id="T_a11c9_row1_col3" class="data row1 col3">0.733289</td>
      <td id="T_a11c9_row1_col4" class="data row1 col4">0.835545</td>
      <td id="T_a11c9_row1_col5" class="data row1 col5">0.000996</td>
      <td id="T_a11c9_row1_col6" class="data row1 col6">8.000000</td>
      <td id="T_a11c9_row1_col7" class="data row1 col7">0.436428</td>
      <td id="T_a11c9_row1_col8" class="data row1 col8">-5.236965</td>
      <td id="T_a11c9_row1_col9" class="data row1 col9">1</td>
      <td id="T_a11c9_row1_col10" class="data row1 col10">0.127358</td>
      <td id="T_a11c9_row1_col11" class="data row1 col11">102.752988</td>
      <td id="T_a11c9_row1_col12" class="data row1 col12">3</td>
      <td id="T_a11c9_row1_col13" class="data row1 col13">0.711531</td>
      <td id="T_a11c9_row1_col14" class="data row1 col14">1</td>
    </tr>
    <tr>
      <th id="T_a11c9_level0_row2" class="row_heading level0 row2">2</th>
      <td id="T_a11c9_row2_col0" class="data row2 col0">2</td>
      <td id="T_a11c9_row2_col1" class="data row2 col1">193213.000000</td>
      <td id="T_a11c9_row2_col2" class="data row2 col2">nan</td>
      <td id="T_a11c9_row2_col3" class="data row2 col3">0.188387</td>
      <td id="T_a11c9_row2_col4" class="data row2 col4">0.783524</td>
      <td id="T_a11c9_row2_col5" class="data row2 col5">-0.002694</td>
      <td id="T_a11c9_row2_col6" class="data row2 col6">5.000000</td>
      <td id="T_a11c9_row2_col7" class="data row2 col7">0.170499</td>
      <td id="T_a11c9_row2_col8" class="data row2 col8">-4.951759</td>
      <td id="T_a11c9_row2_col9" class="data row2 col9">0</td>
      <td id="T_a11c9_row2_col10" class="data row2 col10">0.052282</td>
      <td id="T_a11c9_row2_col11" class="data row2 col11">178.685791</td>
      <td id="T_a11c9_row2_col12" class="data row2 col12">3</td>
      <td id="T_a11c9_row2_col13" class="data row2 col13">0.425536</td>
      <td id="T_a11c9_row2_col14" class="data row2 col14">0</td>
    </tr>
    <tr>
      <th id="T_a11c9_level0_row3" class="row_heading level0 row3">3</th>
      <td id="T_a11c9_row3_col0" class="data row3 col0">3</td>
      <td id="T_a11c9_row3_col1" class="data row3 col1">249893.000000</td>
      <td id="T_a11c9_row3_col2" class="data row3 col2">0.488660</td>
      <td id="T_a11c9_row3_col3" class="data row3 col3">0.585234</td>
      <td id="T_a11c9_row3_col4" class="data row3 col4">0.552685</td>
      <td id="T_a11c9_row3_col5" class="data row3 col5">0.000608</td>
      <td id="T_a11c9_row3_col6" class="data row3 col6">0.000000</td>
      <td id="T_a11c9_row3_col7" class="data row3 col7">0.094805</td>
      <td id="T_a11c9_row3_col8" class="data row3 col8">-7.893694</td>
      <td id="T_a11c9_row3_col9" class="data row3 col9">0</td>
      <td id="T_a11c9_row3_col10" class="data row3 col10">0.035618</td>
      <td id="T_a11c9_row3_col11" class="data row3 col11">128.715630</td>
      <td id="T_a11c9_row3_col12" class="data row3 col12">3</td>
      <td id="T_a11c9_row3_col13" class="data row3 col13">0.453597</td>
      <td id="T_a11c9_row3_col14" class="data row3 col14">0</td>
    </tr>
    <tr>
      <th id="T_a11c9_level0_row4" class="row_heading level0 row4">4</th>
      <td id="T_a11c9_row4_col0" class="data row4 col0">4</td>
      <td id="T_a11c9_row4_col1" class="data row4 col1">165969.000000</td>
      <td id="T_a11c9_row4_col2" class="data row4 col2">0.493017</td>
      <td id="T_a11c9_row4_col3" class="data row4 col3">nan</td>
      <td id="T_a11c9_row4_col4" class="data row4 col4">0.740982</td>
      <td id="T_a11c9_row4_col5" class="data row4 col5">0.002033</td>
      <td id="T_a11c9_row4_col6" class="data row4 col6">10.000000</td>
      <td id="T_a11c9_row4_col7" class="data row4 col7">0.094891</td>
      <td id="T_a11c9_row4_col8" class="data row4 col8">-2.684095</td>
      <td id="T_a11c9_row4_col9" class="data row4 col9">0</td>
      <td id="T_a11c9_row4_col10" class="data row4 col10">0.050746</td>
      <td id="T_a11c9_row4_col11" class="data row4 col11">121.928157</td>
      <td id="T_a11c9_row4_col12" class="data row4 col12">4</td>
      <td id="T_a11c9_row4_col13" class="data row4 col13">0.741311</td>
      <td id="T_a11c9_row4_col14" class="data row4 col14">0</td>
    </tr>
    <tr>
      <th id="T_a11c9_level0_row5" class="row_heading level0 row5">5</th>
      <td id="T_a11c9_row5_col0" class="data row5 col0">5</td>
      <td id="T_a11c9_row5_col1" class="data row5 col1">188891.000000</td>
      <td id="T_a11c9_row5_col2" class="data row5 col2">0.035655</td>
      <td id="T_a11c9_row5_col3" class="data row5 col3">0.825919</td>
      <td id="T_a11c9_row5_col4" class="data row5 col4">0.804528</td>
      <td id="T_a11c9_row5_col5" class="data row5 col5">-0.000005</td>
      <td id="T_a11c9_row5_col6" class="data row5 col6">4.000000</td>
      <td id="T_a11c9_row5_col7" class="data row5 col7">0.120758</td>
      <td id="T_a11c9_row5_col8" class="data row5 col8">-6.122926</td>
      <td id="T_a11c9_row5_col9" class="data row5 col9">0</td>
      <td id="T_a11c9_row5_col10" class="data row5 col10">0.039012</td>
      <td id="T_a11c9_row5_col11" class="data row5 col11">115.679128</td>
      <td id="T_a11c9_row5_col12" class="data row5 col12">4</td>
      <td id="T_a11c9_row5_col13" class="data row5 col13">0.709408</td>
      <td id="T_a11c9_row5_col14" class="data row5 col14">0</td>
    </tr>
    <tr>
      <th id="T_a11c9_level0_row6" class="row_heading level0 row6">6</th>
      <td id="T_a11c9_row6_col0" class="data row6 col0">6</td>
      <td id="T_a11c9_row6_col1" class="data row6 col1">161061.000000</td>
      <td id="T_a11c9_row6_col2" class="data row6 col2">0.081743</td>
      <td id="T_a11c9_row6_col3" class="data row6 col3">0.673588</td>
      <td id="T_a11c9_row6_col4" class="data row6 col4">0.880181</td>
      <td id="T_a11c9_row6_col5" class="data row6 col5">0.000327</td>
      <td id="T_a11c9_row6_col6" class="data row6 col6">0.000000</td>
      <td id="T_a11c9_row6_col7" class="data row6 col7">0.535411</td>
      <td id="T_a11c9_row6_col8" class="data row6 col8">-2.909607</td>
      <td id="T_a11c9_row6_col9" class="data row6 col9">1</td>
      <td id="T_a11c9_row6_col10" class="data row6 col10">0.030902</td>
      <td id="T_a11c9_row6_col11" class="data row6 col11">98.046205</td>
      <td id="T_a11c9_row6_col12" class="data row6 col12">4</td>
      <td id="T_a11c9_row6_col13" class="data row6 col13">0.982729</td>
      <td id="T_a11c9_row6_col14" class="data row6 col14">0</td>
    </tr>
    <tr>
      <th id="T_a11c9_level0_row7" class="row_heading level0 row7">7</th>
      <td id="T_a11c9_row7_col0" class="data row7 col0">7</td>
      <td id="T_a11c9_row7_col1" class="data row7 col1">196202.000000</td>
      <td id="T_a11c9_row7_col2" class="data row7 col2">0.259747</td>
      <td id="T_a11c9_row7_col3" class="data row7 col3">0.813214</td>
      <td id="T_a11c9_row7_col4" class="data row7 col4">0.554385</td>
      <td id="T_a11c9_row7_col5" class="data row7 col5">0.000390</td>
      <td id="T_a11c9_row7_col6" class="data row7 col6">8.000000</td>
      <td id="T_a11c9_row7_col7" class="data row7 col7">0.276580</td>
      <td id="T_a11c9_row7_col8" class="data row7 col8">-7.794237</td>
      <td id="T_a11c9_row7_col9" class="data row7 col9">0</td>
      <td id="T_a11c9_row7_col10" class="data row7 col10">0.207067</td>
      <td id="T_a11c9_row7_col11" class="data row7 col11">158.626764</td>
      <td id="T_a11c9_row7_col12" class="data row7 col12">3</td>
      <td id="T_a11c9_row7_col13" class="data row7 col13">0.662987</td>
      <td id="T_a11c9_row7_col14" class="data row7 col14">1</td>
    </tr>
    <tr>
      <th id="T_a11c9_level0_row8" class="row_heading level0 row8">8</th>
      <td id="T_a11c9_row8_col0" class="data row8 col0">8</td>
      <td id="T_a11c9_row8_col1" class="data row8 col1">169660.000000</td>
      <td id="T_a11c9_row8_col2" class="data row8 col2">nan</td>
      <td id="T_a11c9_row8_col3" class="data row8 col3">0.653263</td>
      <td id="T_a11c9_row8_col4" class="data row8 col4">0.917034</td>
      <td id="T_a11c9_row8_col5" class="data row8 col5">0.001748</td>
      <td id="T_a11c9_row8_col6" class="data row8 col6">0.000000</td>
      <td id="T_a11c9_row8_col7" class="data row8 col7">nan</td>
      <td id="T_a11c9_row8_col8" class="data row8 col8">-4.422089</td>
      <td id="T_a11c9_row8_col9" class="data row8 col9">0</td>
      <td id="T_a11c9_row8_col10" class="data row8 col10">0.031608</td>
      <td id="T_a11c9_row8_col11" class="data row8 col11">122.382398</td>
      <td id="T_a11c9_row8_col12" class="data row8 col12">3</td>
      <td id="T_a11c9_row8_col13" class="data row8 col13">0.297683</td>
      <td id="T_a11c9_row8_col14" class="data row8 col14">1</td>
    </tr>
    <tr>
      <th id="T_a11c9_level0_row9" class="row_heading level0 row9">9</th>
      <td id="T_a11c9_row9_col0" class="data row9 col0">9</td>
      <td id="T_a11c9_row9_col1" class="data row9 col1">167245.000000</td>
      <td id="T_a11c9_row9_col2" class="data row9 col2">0.019617</td>
      <td id="T_a11c9_row9_col3" class="data row9 col3">0.595235</td>
      <td id="T_a11c9_row9_col4" class="data row9 col4">0.820039</td>
      <td id="T_a11c9_row9_col5" class="data row9 col5">0.761884</td>
      <td id="T_a11c9_row9_col6" class="data row9 col6">5.000000</td>
      <td id="T_a11c9_row9_col7" class="data row9 col7">0.181098</td>
      <td id="T_a11c9_row9_col8" class="data row9 col8">-5.154293</td>
      <td id="T_a11c9_row9_col9" class="data row9 col9">0</td>
      <td id="T_a11c9_row9_col10" class="data row9 col10">0.054493</td>
      <td id="T_a11c9_row9_col11" class="data row9 col11">110.524824</td>
      <td id="T_a11c9_row9_col12" class="data row9 col12">4</td>
      <td id="T_a11c9_row9_col13" class="data row9 col13">0.535453</td>
      <td id="T_a11c9_row9_col14" class="data row9 col14">0</td>
    </tr>
    <tr>
      <th id="T_a11c9_level0_row10" class="row_heading level0 row10">10</th>
      <td id="T_a11c9_row10_col0" class="data row10 col0">10</td>
      <td id="T_a11c9_row10_col1" class="data row10 col1">128274.000000</td>
      <td id="T_a11c9_row10_col2" class="data row10 col2">0.614007</td>
      <td id="T_a11c9_row10_col3" class="data row10 col3">0.397899</td>
      <td id="T_a11c9_row10_col4" class="data row10 col4">0.346820</td>
      <td id="T_a11c9_row10_col5" class="data row10 col5">0.002853</td>
      <td id="T_a11c9_row10_col6" class="data row10 col6">3.000000</td>
      <td id="T_a11c9_row10_col7" class="data row10 col7">0.132549</td>
      <td id="T_a11c9_row10_col8" class="data row10 col8">nan</td>
      <td id="T_a11c9_row10_col9" class="data row10 col9">1</td>
      <td id="T_a11c9_row10_col10" class="data row10 col10">0.059512</td>
      <td id="T_a11c9_row10_col11" class="data row10 col11">87.363516</td>
      <td id="T_a11c9_row10_col12" class="data row10 col12">3</td>
      <td id="T_a11c9_row10_col13" class="data row10 col13">0.671581</td>
      <td id="T_a11c9_row10_col14" class="data row10 col14">1</td>
    </tr>
    <tr>
      <th id="T_a11c9_level0_row11" class="row_heading level0 row11">11</th>
      <td id="T_a11c9_row11_col0" class="data row11 col0">11</td>
      <td id="T_a11c9_row11_col1" class="data row11 col1">213121.000000</td>
      <td id="T_a11c9_row11_col2" class="data row11 col2">0.044053</td>
      <td id="T_a11c9_row11_col3" class="data row11 col3">0.817874</td>
      <td id="T_a11c9_row11_col4" class="data row11 col4">0.729679</td>
      <td id="T_a11c9_row11_col5" class="data row11 col5">0.003660</td>
      <td id="T_a11c9_row11_col6" class="data row11 col6">5.000000</td>
      <td id="T_a11c9_row11_col7" class="data row11 col7">0.137938</td>
      <td id="T_a11c9_row11_col8" class="data row11 col8">-4.880149</td>
      <td id="T_a11c9_row11_col9" class="data row11 col9">0</td>
      <td id="T_a11c9_row11_col10" class="data row11 col10">0.038814</td>
      <td id="T_a11c9_row11_col11" class="data row11 col11">124.199541</td>
      <td id="T_a11c9_row11_col12" class="data row11 col12">4</td>
      <td id="T_a11c9_row11_col13" class="data row11 col13">0.816472</td>
      <td id="T_a11c9_row11_col14" class="data row11 col14">1</td>
    </tr>
    <tr>
      <th id="T_a11c9_level0_row12" class="row_heading level0 row12">12</th>
      <td id="T_a11c9_row12_col0" class="data row12 col0">12</td>
      <td id="T_a11c9_row12_col1" class="data row12 col1">219730.000000</td>
      <td id="T_a11c9_row12_col2" class="data row12 col2">0.339275</td>
      <td id="T_a11c9_row12_col3" class="data row12 col3">0.660707</td>
      <td id="T_a11c9_row12_col4" class="data row12 col4">nan</td>
      <td id="T_a11c9_row12_col5" class="data row12 col5">nan</td>
      <td id="T_a11c9_row12_col6" class="data row12 col6">0.000000</td>
      <td id="T_a11c9_row12_col7" class="data row12 col7">0.223173</td>
      <td id="T_a11c9_row12_col8" class="data row12 col8">-12.005655</td>
      <td id="T_a11c9_row12_col9" class="data row12 col9">0</td>
      <td id="T_a11c9_row12_col10" class="data row12 col10">0.089726</td>
      <td id="T_a11c9_row12_col11" class="data row12 col11">164.877811</td>
      <td id="T_a11c9_row12_col12" class="data row12 col12">3</td>
      <td id="T_a11c9_row12_col13" class="data row12 col13">0.322253</td>
      <td id="T_a11c9_row12_col14" class="data row12 col14">1</td>
    </tr>
    <tr>
      <th id="T_a11c9_level0_row13" class="row_heading level0 row13">13</th>
      <td id="T_a11c9_row13_col0" class="data row13 col0">13</td>
      <td id="T_a11c9_row13_col1" class="data row13 col1">nan</td>
      <td id="T_a11c9_row13_col2" class="data row13 col2">0.455778</td>
      <td id="T_a11c9_row13_col3" class="data row13 col3">0.448538</td>
      <td id="T_a11c9_row13_col4" class="data row13 col4">0.754924</td>
      <td id="T_a11c9_row13_col5" class="data row13 col5">nan</td>
      <td id="T_a11c9_row13_col6" class="data row13 col6">nan</td>
      <td id="T_a11c9_row13_col7" class="data row13 col7">0.076379</td>
      <td id="T_a11c9_row13_col8" class="data row13 col8">-3.158905</td>
      <td id="T_a11c9_row13_col9" class="data row13 col9">0</td>
      <td id="T_a11c9_row13_col10" class="data row13 col10">0.034837</td>
      <td id="T_a11c9_row13_col11" class="data row13 col11">118.664526</td>
      <td id="T_a11c9_row13_col12" class="data row13 col12">3</td>
      <td id="T_a11c9_row13_col13" class="data row13 col13">0.862989</td>
      <td id="T_a11c9_row13_col14" class="data row13 col14">0</td>
    </tr>
    <tr>
      <th id="T_a11c9_level0_row14" class="row_heading level0 row14">14</th>
      <td id="T_a11c9_row14_col0" class="data row14 col0">14</td>
      <td id="T_a11c9_row14_col1" class="data row14 col1">nan</td>
      <td id="T_a11c9_row14_col2" class="data row14 col2">0.462876</td>
      <td id="T_a11c9_row14_col3" class="data row14 col3">0.384318</td>
      <td id="T_a11c9_row14_col4" class="data row14 col4">0.653525</td>
      <td id="T_a11c9_row14_col5" class="data row14 col5">0.781326</td>
      <td id="T_a11c9_row14_col6" class="data row14 col6">6.000000</td>
      <td id="T_a11c9_row14_col7" class="data row14 col7">nan</td>
      <td id="T_a11c9_row14_col8" class="data row14 col8">-10.362441</td>
      <td id="T_a11c9_row14_col9" class="data row14 col9">0</td>
      <td id="T_a11c9_row14_col10" class="data row14 col10">0.065149</td>
      <td id="T_a11c9_row14_col11" class="data row14 col11">141.581118</td>
      <td id="T_a11c9_row14_col12" class="data row14 col12">3</td>
      <td id="T_a11c9_row14_col13" class="data row14 col13">0.432883</td>
      <td id="T_a11c9_row14_col14" class="data row14 col14">0</td>
    </tr>
    <tr>
      <th id="T_a11c9_level0_row15" class="row_heading level0 row15">15</th>
      <td id="T_a11c9_row15_col0" class="data row15 col0">15</td>
      <td id="T_a11c9_row15_col1" class="data row15 col1">nan</td>
      <td id="T_a11c9_row15_col2" class="data row15 col2">0.059284</td>
      <td id="T_a11c9_row15_col3" class="data row15 col3">0.164167</td>
      <td id="T_a11c9_row15_col4" class="data row15 col4">0.877743</td>
      <td id="T_a11c9_row15_col5" class="data row15 col5">0.002113</td>
      <td id="T_a11c9_row15_col6" class="data row15 col6">8.000000</td>
      <td id="T_a11c9_row15_col7" class="data row15 col7">0.227997</td>
      <td id="T_a11c9_row15_col8" class="data row15 col8">-3.627678</td>
      <td id="T_a11c9_row15_col9" class="data row15 col9">0</td>
      <td id="T_a11c9_row15_col10" class="data row15 col10">0.246330</td>
      <td id="T_a11c9_row15_col11" class="data row15 col11">174.445180</td>
      <td id="T_a11c9_row15_col12" class="data row15 col12">4</td>
      <td id="T_a11c9_row15_col13" class="data row15 col13">0.530006</td>
      <td id="T_a11c9_row15_col14" class="data row15 col14">1</td>
    </tr>
    <tr>
      <th id="T_a11c9_level0_row16" class="row_heading level0 row16">16</th>
      <td id="T_a11c9_row16_col0" class="data row16 col0">16</td>
      <td id="T_a11c9_row16_col1" class="data row16 col1">248851.000000</td>
      <td id="T_a11c9_row16_col2" class="data row16 col2">0.097600</td>
      <td id="T_a11c9_row16_col3" class="data row16 col3">0.718901</td>
      <td id="T_a11c9_row16_col4" class="data row16 col4">0.618376</td>
      <td id="T_a11c9_row16_col5" class="data row16 col5">0.002925</td>
      <td id="T_a11c9_row16_col6" class="data row16 col6">4.000000</td>
      <td id="T_a11c9_row16_col7" class="data row16 col7">0.075377</td>
      <td id="T_a11c9_row16_col8" class="data row16 col8">-7.715512</td>
      <td id="T_a11c9_row16_col9" class="data row16 col9">1</td>
      <td id="T_a11c9_row16_col10" class="data row16 col10">0.083494</td>
      <td id="T_a11c9_row16_col11" class="data row16 col11">96.831665</td>
      <td id="T_a11c9_row16_col12" class="data row16 col12">4</td>
      <td id="T_a11c9_row16_col13" class="data row16 col13">0.935569</td>
      <td id="T_a11c9_row16_col14" class="data row16 col14">0</td>
    </tr>
    <tr>
      <th id="T_a11c9_level0_row17" class="row_heading level0 row17">17</th>
      <td id="T_a11c9_row17_col0" class="data row17 col0">17</td>
      <td id="T_a11c9_row17_col1" class="data row17 col1">153340.000000</td>
      <td id="T_a11c9_row17_col2" class="data row17 col2">0.012866</td>
      <td id="T_a11c9_row17_col3" class="data row17 col3">0.715635</td>
      <td id="T_a11c9_row17_col4" class="data row17 col4">0.796742</td>
      <td id="T_a11c9_row17_col5" class="data row17 col5">0.002236</td>
      <td id="T_a11c9_row17_col6" class="data row17 col6">6.000000</td>
      <td id="T_a11c9_row17_col7" class="data row17 col7">0.101808</td>
      <td id="T_a11c9_row17_col8" class="data row17 col8">-4.879090</td>
      <td id="T_a11c9_row17_col9" class="data row17 col9">0</td>
      <td id="T_a11c9_row17_col10" class="data row17 col10">0.172036</td>
      <td id="T_a11c9_row17_col11" class="data row17 col11">120.830046</td>
      <td id="T_a11c9_row17_col12" class="data row17 col12">3</td>
      <td id="T_a11c9_row17_col13" class="data row17 col13">0.497743</td>
      <td id="T_a11c9_row17_col14" class="data row17 col14">0</td>
    </tr>
    <tr>
      <th id="T_a11c9_level0_row18" class="row_heading level0 row18">18</th>
      <td id="T_a11c9_row18_col0" class="data row18 col0">18</td>
      <td id="T_a11c9_row18_col1" class="data row18 col1">170983.000000</td>
      <td id="T_a11c9_row18_col2" class="data row18 col2">0.123631</td>
      <td id="T_a11c9_row18_col3" class="data row18 col3">0.524386</td>
      <td id="T_a11c9_row18_col4" class="data row18 col4">0.566983</td>
      <td id="T_a11c9_row18_col5" class="data row18 col5">nan</td>
      <td id="T_a11c9_row18_col6" class="data row18 col6">5.000000</td>
      <td id="T_a11c9_row18_col7" class="data row18 col7">nan</td>
      <td id="T_a11c9_row18_col8" class="data row18 col8">-7.312097</td>
      <td id="T_a11c9_row18_col9" class="data row18 col9">0</td>
      <td id="T_a11c9_row18_col10" class="data row18 col10">0.210055</td>
      <td id="T_a11c9_row18_col11" class="data row18 col11">114.609197</td>
      <td id="T_a11c9_row18_col12" class="data row18 col12">4</td>
      <td id="T_a11c9_row18_col13" class="data row18 col13">0.951705</td>
      <td id="T_a11c9_row18_col14" class="data row18 col14">1</td>
    </tr>
    <tr>
      <th id="T_a11c9_level0_row19" class="row_heading level0 row19">19</th>
      <td id="T_a11c9_row19_col0" class="data row19 col0">19</td>
      <td id="T_a11c9_row19_col1" class="data row19 col1">266726.000000</td>
      <td id="T_a11c9_row19_col2" class="data row19 col2">0.021030</td>
      <td id="T_a11c9_row19_col3" class="data row19 col3">0.323277</td>
      <td id="T_a11c9_row19_col4" class="data row19 col4">nan</td>
      <td id="T_a11c9_row19_col5" class="data row19 col5">-0.000861</td>
      <td id="T_a11c9_row19_col6" class="data row19 col6">nan</td>
      <td id="T_a11c9_row19_col7" class="data row19 col7">0.239698</td>
      <td id="T_a11c9_row19_col8" class="data row19 col8">-12.692935</td>
      <td id="T_a11c9_row19_col9" class="data row19 col9">1</td>
      <td id="T_a11c9_row19_col10" class="data row19 col10">0.031522</td>
      <td id="T_a11c9_row19_col11" class="data row19 col11">124.811208</td>
      <td id="T_a11c9_row19_col12" class="data row19 col12">4</td>
      <td id="T_a11c9_row19_col13" class="data row19 col13">0.350090</td>
      <td id="T_a11c9_row19_col14" class="data row19 col14">1</td>
    </tr>
  </tbody>
</table>
</div>
</div>
<p>We find:</p>
<ul>
<li>There are missing values that can be seen as <code>nan</code> in the table above</li>
<li>The <code>id</code> column seems to have values in increasing order</li>
<li>The values in the features are in different scales</li>
</ul>
<p>Now, let’s look at some basic statistics about our features in the data</p>
<div class="cell" data-tags="[]" data-execution_count="8">
<details>
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb7-1">display(train.describe().style.set_caption(<span class="st" style="color: #20794D;">"Basic statistics about Train Data"</span>))</span></code></pre></div>
</details>
<div class="cell-output cell-output-display">

<style type="text/css">
</style>
<table id="T_f86fb_">
  <caption>Basic statistics about Train Data</caption>
  <thead>
    <tr>
      <th class="blank level0">&nbsp;</th>
      <th class="col_heading level0 col0">id</th>
      <th class="col_heading level0 col1">song_duration_ms</th>
      <th class="col_heading level0 col2">acousticness</th>
      <th class="col_heading level0 col3">danceability</th>
      <th class="col_heading level0 col4">energy</th>
      <th class="col_heading level0 col5">instrumentalness</th>
      <th class="col_heading level0 col6">key</th>
      <th class="col_heading level0 col7">liveness</th>
      <th class="col_heading level0 col8">loudness</th>
      <th class="col_heading level0 col9">audio_mode</th>
      <th class="col_heading level0 col10">speechiness</th>
      <th class="col_heading level0 col11">tempo</th>
      <th class="col_heading level0 col12">time_signature</th>
      <th class="col_heading level0 col13">audio_valence</th>
      <th class="col_heading level0 col14">song_popularity</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th id="T_f86fb_level0_row0" class="row_heading level0 row0">count</th>
      <td id="T_f86fb_row0_col0" class="data row0 col0">40000.000000</td>
      <td id="T_f86fb_row0_col1" class="data row0 col1">35899.000000</td>
      <td id="T_f86fb_row0_col2" class="data row0 col2">36008.000000</td>
      <td id="T_f86fb_row0_col3" class="data row0 col3">35974.000000</td>
      <td id="T_f86fb_row0_col4" class="data row0 col4">36025.000000</td>
      <td id="T_f86fb_row0_col5" class="data row0 col5">36015.000000</td>
      <td id="T_f86fb_row0_col6" class="data row0 col6">35935.000000</td>
      <td id="T_f86fb_row0_col7" class="data row0 col7">35914.000000</td>
      <td id="T_f86fb_row0_col8" class="data row0 col8">36043.000000</td>
      <td id="T_f86fb_row0_col9" class="data row0 col9">40000.000000</td>
      <td id="T_f86fb_row0_col10" class="data row0 col10">40000.000000</td>
      <td id="T_f86fb_row0_col11" class="data row0 col11">40000.000000</td>
      <td id="T_f86fb_row0_col12" class="data row0 col12">40000.000000</td>
      <td id="T_f86fb_row0_col13" class="data row0 col13">40000.000000</td>
      <td id="T_f86fb_row0_col14" class="data row0 col14">40000.000000</td>
    </tr>
    <tr>
      <th id="T_f86fb_level0_row1" class="row_heading level0 row1">mean</th>
      <td id="T_f86fb_row1_col0" class="data row1 col0">19999.500000</td>
      <td id="T_f86fb_row1_col1" class="data row1 col1">193165.847572</td>
      <td id="T_f86fb_row1_col2" class="data row1 col2">0.276404</td>
      <td id="T_f86fb_row1_col3" class="data row1 col3">0.570951</td>
      <td id="T_f86fb_row1_col4" class="data row1 col4">0.683932</td>
      <td id="T_f86fb_row1_col5" class="data row1 col5">0.036527</td>
      <td id="T_f86fb_row1_col6" class="data row1 col6">5.042605</td>
      <td id="T_f86fb_row1_col7" class="data row1 col7">0.198514</td>
      <td id="T_f86fb_row1_col8" class="data row1 col8">-7.407596</td>
      <td id="T_f86fb_row1_col9" class="data row1 col9">0.321150</td>
      <td id="T_f86fb_row1_col10" class="data row1 col10">0.094107</td>
      <td id="T_f86fb_row1_col11" class="data row1 col11">116.562815</td>
      <td id="T_f86fb_row1_col12" class="data row1 col12">3.394375</td>
      <td id="T_f86fb_row1_col13" class="data row1 col13">0.580645</td>
      <td id="T_f86fb_row1_col14" class="data row1 col14">0.364400</td>
    </tr>
    <tr>
      <th id="T_f86fb_level0_row2" class="row_heading level0 row2">std</th>
      <td id="T_f86fb_row2_col0" class="data row2 col0">11547.149720</td>
      <td id="T_f86fb_row2_col1" class="data row2 col1">45822.127679</td>
      <td id="T_f86fb_row2_col2" class="data row2 col2">0.297928</td>
      <td id="T_f86fb_row2_col3" class="data row2 col3">0.190010</td>
      <td id="T_f86fb_row2_col4" class="data row2 col4">0.212662</td>
      <td id="T_f86fb_row2_col5" class="data row2 col5">0.150024</td>
      <td id="T_f86fb_row2_col6" class="data row2 col6">3.372728</td>
      <td id="T_f86fb_row2_col7" class="data row2 col7">0.151670</td>
      <td id="T_f86fb_row2_col8" class="data row2 col8">3.877198</td>
      <td id="T_f86fb_row2_col9" class="data row2 col9">0.466924</td>
      <td id="T_f86fb_row2_col10" class="data row2 col10">0.083591</td>
      <td id="T_f86fb_row2_col11" class="data row2 col11">26.167911</td>
      <td id="T_f86fb_row2_col12" class="data row2 col12">0.524405</td>
      <td id="T_f86fb_row2_col13" class="data row2 col13">0.237351</td>
      <td id="T_f86fb_row2_col14" class="data row2 col14">0.481268</td>
    </tr>
    <tr>
      <th id="T_f86fb_level0_row3" class="row_heading level0 row3">min</th>
      <td id="T_f86fb_row3_col0" class="data row3 col0">0.000000</td>
      <td id="T_f86fb_row3_col1" class="data row3 col1">25658.000000</td>
      <td id="T_f86fb_row3_col2" class="data row3 col2">-0.013551</td>
      <td id="T_f86fb_row3_col3" class="data row3 col3">0.043961</td>
      <td id="T_f86fb_row3_col4" class="data row3 col4">-0.001682</td>
      <td id="T_f86fb_row3_col5" class="data row3 col5">-0.004398</td>
      <td id="T_f86fb_row3_col6" class="data row3 col6">0.000000</td>
      <td id="T_f86fb_row3_col7" class="data row3 col7">0.027843</td>
      <td id="T_f86fb_row3_col8" class="data row3 col8">-32.117911</td>
      <td id="T_f86fb_row3_col9" class="data row3 col9">0.000000</td>
      <td id="T_f86fb_row3_col10" class="data row3 col10">0.015065</td>
      <td id="T_f86fb_row3_col11" class="data row3 col11">62.055779</td>
      <td id="T_f86fb_row3_col12" class="data row3 col12">2.000000</td>
      <td id="T_f86fb_row3_col13" class="data row3 col13">0.013398</td>
      <td id="T_f86fb_row3_col14" class="data row3 col14">0.000000</td>
    </tr>
    <tr>
      <th id="T_f86fb_level0_row4" class="row_heading level0 row4">25%</th>
      <td id="T_f86fb_row4_col0" class="data row4 col0">9999.750000</td>
      <td id="T_f86fb_row4_col1" class="data row4 col1">166254.500000</td>
      <td id="T_f86fb_row4_col2" class="data row4 col2">0.039618</td>
      <td id="T_f86fb_row4_col3" class="data row4 col3">0.424760</td>
      <td id="T_f86fb_row4_col4" class="data row4 col4">0.539276</td>
      <td id="T_f86fb_row4_col5" class="data row4 col5">0.000941</td>
      <td id="T_f86fb_row4_col6" class="data row4 col6">2.000000</td>
      <td id="T_f86fb_row4_col7" class="data row4 col7">0.111796</td>
      <td id="T_f86fb_row4_col8" class="data row4 col8">-9.578139</td>
      <td id="T_f86fb_row4_col9" class="data row4 col9">0.000000</td>
      <td id="T_f86fb_row4_col10" class="data row4 col10">0.038500</td>
      <td id="T_f86fb_row4_col11" class="data row4 col11">96.995309</td>
      <td id="T_f86fb_row4_col12" class="data row4 col12">3.000000</td>
      <td id="T_f86fb_row4_col13" class="data row4 col13">0.398669</td>
      <td id="T_f86fb_row4_col14" class="data row4 col14">0.000000</td>
    </tr>
    <tr>
      <th id="T_f86fb_level0_row5" class="row_heading level0 row5">50%</th>
      <td id="T_f86fb_row5_col0" class="data row5 col0">19999.500000</td>
      <td id="T_f86fb_row5_col1" class="data row5 col1">186660.000000</td>
      <td id="T_f86fb_row5_col2" class="data row5 col2">0.140532</td>
      <td id="T_f86fb_row5_col3" class="data row5 col3">0.608234</td>
      <td id="T_f86fb_row5_col4" class="data row5 col4">0.704453</td>
      <td id="T_f86fb_row5_col5" class="data row5 col5">0.001974</td>
      <td id="T_f86fb_row5_col6" class="data row5 col6">5.000000</td>
      <td id="T_f86fb_row5_col7" class="data row5 col7">0.135945</td>
      <td id="T_f86fb_row5_col8" class="data row5 col8">-6.345413</td>
      <td id="T_f86fb_row5_col9" class="data row5 col9">0.000000</td>
      <td id="T_f86fb_row5_col10" class="data row5 col10">0.055881</td>
      <td id="T_f86fb_row5_col11" class="data row5 col11">113.795959</td>
      <td id="T_f86fb_row5_col12" class="data row5 col12">3.000000</td>
      <td id="T_f86fb_row5_col13" class="data row5 col13">0.598827</td>
      <td id="T_f86fb_row5_col14" class="data row5 col14">0.000000</td>
    </tr>
    <tr>
      <th id="T_f86fb_level0_row6" class="row_heading level0 row6">75%</th>
      <td id="T_f86fb_row6_col0" class="data row6 col0">29999.250000</td>
      <td id="T_f86fb_row6_col1" class="data row6 col1">215116.000000</td>
      <td id="T_f86fb_row6_col2" class="data row6 col2">0.482499</td>
      <td id="T_f86fb_row6_col3" class="data row6 col3">0.718464</td>
      <td id="T_f86fb_row6_col4" class="data row6 col4">0.870503</td>
      <td id="T_f86fb_row6_col5" class="data row6 col5">0.003225</td>
      <td id="T_f86fb_row6_col6" class="data row6 col6">8.000000</td>
      <td id="T_f86fb_row6_col7" class="data row6 col7">0.212842</td>
      <td id="T_f86fb_row6_col8" class="data row6 col8">-4.620711</td>
      <td id="T_f86fb_row6_col9" class="data row6 col9">1.000000</td>
      <td id="T_f86fb_row6_col10" class="data row6 col10">0.118842</td>
      <td id="T_f86fb_row6_col11" class="data row6 col11">128.517383</td>
      <td id="T_f86fb_row6_col12" class="data row6 col12">4.000000</td>
      <td id="T_f86fb_row6_col13" class="data row6 col13">0.759635</td>
      <td id="T_f86fb_row6_col14" class="data row6 col14">1.000000</td>
    </tr>
    <tr>
      <th id="T_f86fb_level0_row7" class="row_heading level0 row7">max</th>
      <td id="T_f86fb_row7_col0" class="data row7 col0">39999.000000</td>
      <td id="T_f86fb_row7_col1" class="data row7 col1">491671.000000</td>
      <td id="T_f86fb_row7_col2" class="data row7 col2">1.065284</td>
      <td id="T_f86fb_row7_col3" class="data row7 col3">0.957131</td>
      <td id="T_f86fb_row7_col4" class="data row7 col4">1.039741</td>
      <td id="T_f86fb_row7_col5" class="data row7 col5">1.075415</td>
      <td id="T_f86fb_row7_col6" class="data row7 col6">11.000000</td>
      <td id="T_f86fb_row7_col7" class="data row7 col7">1.065298</td>
      <td id="T_f86fb_row7_col8" class="data row7 col8">-0.877346</td>
      <td id="T_f86fb_row7_col9" class="data row7 col9">1.000000</td>
      <td id="T_f86fb_row7_col10" class="data row7 col10">0.560748</td>
      <td id="T_f86fb_row7_col11" class="data row7 col11">219.163578</td>
      <td id="T_f86fb_row7_col12" class="data row7 col12">5.000000</td>
      <td id="T_f86fb_row7_col13" class="data row7 col13">1.022558</td>
      <td id="T_f86fb_row7_col14" class="data row7 col14">1.000000</td>
    </tr>
  </tbody>
</table>
</div>
</div>
<p>We find:</p>
<ul>
<li>Most of the features are in the range of 0 and 1</li>
<li>There are features with only negative values (<code>loudness</code>), binary features (<code>audio_mode</code>) , and seems to be categorical (<code>key</code> and <code>time_signature</code>)</li>
</ul>
</section>
<section id="missing-data" class="level3">
<h3 class="anchored" data-anchor-id="missing-data">3.2. Missing data</h3>
<p>Now let’s take a closer look at the missing values in the dataset</p>
<div class="cell" data-tags="[]" data-execution_count="9">
<details>
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb8-1"><span class="co" style="color: #5E5E5E;">"""Missing Values"""</span></span>
<span id="cb8-2"><span class="bu" style="color: null;">print</span>(<span class="ss" style="color: #20794D;">f"Train set has </span><span class="sc" style="color: #5E5E5E;">{</span>train<span class="sc" style="color: #5E5E5E;">.</span>isnull()<span class="sc" style="color: #5E5E5E;">.</span><span class="bu" style="color: null;">sum</span>()<span class="sc" style="color: #5E5E5E;">.</span><span class="bu" style="color: null;">sum</span>()<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;"> missing values, and test set has </span><span class="sc" style="color: #5E5E5E;">{</span>test<span class="sc" style="color: #5E5E5E;">.</span>isnull()<span class="sc" style="color: #5E5E5E;">.</span><span class="bu" style="color: null;">sum</span>()<span class="sc" style="color: #5E5E5E;">.</span><span class="bu" style="color: null;">sum</span>()<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;"> missing values"</span>)</span></code></pre></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code>Train set has 32187 missing values, and test set has 7962 missing values</code></pre>
</div>
</div>
<div class="cell" data-tags="[]" data-execution_count="12">
<details>
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb10-1"><span class="co" style="color: #5E5E5E;"># Refrence (edited): https://datavizpyr.com/visualizing-missing-data-with-seaborn-heatmap-and-displot/</span></span>
<span id="cb10-2">fig <span class="op" style="color: #5E5E5E;">=</span> plt.figure(figsize<span class="op" style="color: #5E5E5E;">=</span>(<span class="dv" style="color: #AD0000;">18</span>,<span class="dv" style="color: #AD0000;">6</span>))</span>
<span id="cb10-3"></span>
<span id="cb10-4">sns.displot(</span>
<span id="cb10-5">    data<span class="op" style="color: #5E5E5E;">=</span>train.isna().melt(value_name<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"missing"</span>),</span>
<span id="cb10-6">    y<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"variable"</span>,</span>
<span id="cb10-7">    hue<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"missing"</span>,</span>
<span id="cb10-8">    multiple<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"fill"</span>,</span>
<span id="cb10-9">    aspect<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">3</span></span>
<span id="cb10-10">)</span>
<span id="cb10-11">plt.title(<span class="st" style="color: #20794D;">"Missing values shown using Bar plot"</span>, fontsize<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">17</span>)</span>
<span id="cb10-12">plt.ylabel(<span class="st" style="color: #20794D;">""</span>)</span>
<span id="cb10-13">plt.xlabel(<span class="st" style="color: #20794D;">""</span>)</span>
<span id="cb10-14"></span>
<span id="cb10-15">plt.figure(figsize<span class="op" style="color: #5E5E5E;">=</span>(<span class="dv" style="color: #AD0000;">18</span>,<span class="dv" style="color: #AD0000;">10</span>))</span>
<span id="cb10-16">sns.heatmap(train.isna().transpose())</span>
<span id="cb10-17">plt.title(<span class="st" style="color: #20794D;">'Heatmap showing Missing Values in Train data'</span>, fontsize<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">17</span>)</span>
<span id="cb10-18">plt.ylabel(<span class="st" style="color: #20794D;">""</span>)</span>
<span id="cb10-19">plt.xlabel(<span class="st" style="color: #20794D;">""</span>)</span>
<span id="cb10-20">plt.show()</span></code></pre></div>
</details>
<div class="cell-output cell-output-display">
<pre><code>&lt;Figure size 1296x432 with 0 Axes&gt;</code></pre>
</div>
<div class="cell-output cell-output-display">
<p><img src="https://sagarthacker.com/posts/kaggle/song-popularity-eda_files/figure-html/cell-8-output-2.png" class="img-fluid"></p>
</div>
<div class="cell-output cell-output-display">
<p><img src="https://sagarthacker.com/posts/kaggle/song-popularity-eda_files/figure-html/cell-8-output-3.png" class="img-fluid"></p>
</div>
</div>
<div class="cell" data-tags="[]" data-execution_count="13">
<details>
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb12-1">train_null <span class="op" style="color: #5E5E5E;">=</span> train.isna().<span class="bu" style="color: null;">sum</span>().sort_values(ascending <span class="op" style="color: #5E5E5E;">=</span> <span class="va" style="color: #111111;">False</span>)</span>
<span id="cb12-2">test_null <span class="op" style="color: #5E5E5E;">=</span> test.isna().<span class="bu" style="color: null;">sum</span>().sort_values(ascending <span class="op" style="color: #5E5E5E;">=</span> <span class="va" style="color: #111111;">False</span>)</span>
<span id="cb12-3"></span>
<span id="cb12-4">non_zero_train_values <span class="op" style="color: #5E5E5E;">=</span> train_null[train_null.values <span class="op" style="color: #5E5E5E;">&gt;</span> <span class="dv" style="color: #AD0000;">0</span>]</span>
<span id="cb12-5">non_zero_test_values <span class="op" style="color: #5E5E5E;">=</span> test_null[test_null.values <span class="op" style="color: #5E5E5E;">&gt;</span> <span class="dv" style="color: #AD0000;">0</span>]</span>
<span id="cb12-6"></span>
<span id="cb12-7">fig, axes <span class="op" style="color: #5E5E5E;">=</span> plt.subplots(<span class="dv" style="color: #AD0000;">1</span>,<span class="dv" style="color: #AD0000;">2</span>, figsize<span class="op" style="color: #5E5E5E;">=</span>(<span class="dv" style="color: #AD0000;">15</span>,<span class="dv" style="color: #AD0000;">8</span>))</span>
<span id="cb12-8">sns.barplot(y<span class="op" style="color: #5E5E5E;">=</span>non_zero_test_values.index , x<span class="op" style="color: #5E5E5E;">=</span>non_zero_test_values.values, ax<span class="op" style="color: #5E5E5E;">=</span>axes[<span class="dv" style="color: #AD0000;">1</span>], palette <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">"viridis"</span>)</span>
<span id="cb12-9">sns.barplot(y<span class="op" style="color: #5E5E5E;">=</span>non_zero_train_values.index , x<span class="op" style="color: #5E5E5E;">=</span>non_zero_train_values.values, ax<span class="op" style="color: #5E5E5E;">=</span>axes[<span class="dv" style="color: #AD0000;">0</span>], palette <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">"viridis"</span>)</span>
<span id="cb12-10">axes[<span class="dv" style="color: #AD0000;">0</span>].set_title(<span class="st" style="color: #20794D;">"Train data"</span>, fontsize<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">14</span>)</span>
<span id="cb12-11">axes[<span class="dv" style="color: #AD0000;">1</span>].set_title(<span class="st" style="color: #20794D;">"Test data"</span>, fontsize<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">14</span>)</span>
<span id="cb12-12">plt.tight_layout()</span>
<span id="cb12-13">plt.show()</span></code></pre></div>
</details>
<div class="cell-output cell-output-display">
<p><img src="https://sagarthacker.com/posts/kaggle/song-popularity-eda_files/figure-html/cell-9-output-1.png" class="img-fluid"></p>
</div>
</div>
</section>
</section>
<section id="visualization---individual-features" class="level2">
<h2 class="anchored" data-anchor-id="visualization---individual-features">4. Visualization - Individual Features</h2>
<p>After getting an initial idea about our features and their values, we can now dive into the visual part of the exploration. I recommend to always plot your data. Sometimes this might be challenging, e.g.&nbsp;because you have tons of features. In that case, you want to start at least with a subset before you run any dimensionality reduction or other tools. This step is as much about spotting issues and irregularities as it is about learning more about the shapes and distributions of your features.</p>
<section id="predictor-variables" class="level3">
<h3 class="anchored" data-anchor-id="predictor-variables">4.1. Predictor variables</h3>
<ul>
<li>In the live session, we were building this plot step by step. (Well, we got most of the way there.) It really pays off to take the time and investigate each feature separately. This is one of the most instructive steps in the EDA process, where you aim to learn how messed up your features are. No dataset is perfect. We want to figure out how severe those imperfections are, and whether we can live with them or have to address them.</li>
<li>Different kind of data types go best with different kind of visuals. My recommendation is to start out with density plots or histograms for numerical features, and with barcharts for those that are better expressed as types of categories.</li>
</ul>
<div class="cell" data-tags="[]" data-execution_count="14">
<details>
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb13-1">useful_cols <span class="op" style="color: #5E5E5E;">=</span> [col <span class="cf" style="color: #003B4F;">for</span> col <span class="kw" style="color: #003B4F;">in</span> train.columns <span class="cf" style="color: #003B4F;">if</span> col <span class="kw" style="color: #003B4F;">not</span> <span class="kw" style="color: #003B4F;">in</span> [<span class="st" style="color: #20794D;">"id"</span>, <span class="st" style="color: #20794D;">"song_popularity"</span>]]</span>
<span id="cb13-2">numeric_cols <span class="op" style="color: #5E5E5E;">=</span> [col <span class="cf" style="color: #003B4F;">for</span> col <span class="kw" style="color: #003B4F;">in</span> useful_cols <span class="cf" style="color: #003B4F;">if</span> col <span class="kw" style="color: #003B4F;">not</span> <span class="kw" style="color: #003B4F;">in</span> [<span class="st" style="color: #20794D;">"key"</span>, <span class="st" style="color: #20794D;">"audio_mode"</span>, <span class="st" style="color: #20794D;">"time_signature"</span>]]</span>
<span id="cb13-3"></span>
<span id="cb13-4">n_rows <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">5</span></span>
<span id="cb13-5">n_cols <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">3</span></span>
<span id="cb13-6">index <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">1</span></span>
<span id="cb13-7"></span>
<span id="cb13-8">colors <span class="op" style="color: #5E5E5E;">=</span> [<span class="st" style="color: #20794D;">"red"</span>, <span class="st" style="color: #20794D;">"darkblue"</span>, <span class="st" style="color: #20794D;">"green"</span>]</span>
<span id="cb13-9"></span>
<span id="cb13-10">fig <span class="op" style="color: #5E5E5E;">=</span> plt.figure(figsize<span class="op" style="color: #5E5E5E;">=</span>(<span class="dv" style="color: #AD0000;">16</span>,<span class="dv" style="color: #AD0000;">20</span>))</span>
<span id="cb13-11"></span>
<span id="cb13-12"><span class="cf" style="color: #003B4F;">for</span> index, col <span class="kw" style="color: #003B4F;">in</span> <span class="bu" style="color: null;">enumerate</span>(train[useful_cols].columns):</span>
<span id="cb13-13">    plt.subplot(n_rows,n_cols,index<span class="op" style="color: #5E5E5E;">+</span><span class="dv" style="color: #AD0000;">1</span>)</span>
<span id="cb13-14">    </span>
<span id="cb13-15">    <span class="cf" style="color: #003B4F;">if</span> col <span class="kw" style="color: #003B4F;">in</span> numeric_cols:</span>
<span id="cb13-16">        sns.kdeplot(train[col], color<span class="op" style="color: #5E5E5E;">=</span>random.sample(colors, <span class="dv" style="color: #AD0000;">1</span>), fill<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>)</span>
<span id="cb13-17">        plt.title(col, fontsize<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">14</span>)</span>
<span id="cb13-18">        plt.xlabel(<span class="st" style="color: #20794D;">""</span>)</span>
<span id="cb13-19">        plt.ylabel(<span class="st" style="color: #20794D;">""</span>)</span>
<span id="cb13-20">        plt.tight_layout()</span>
<span id="cb13-21">    <span class="cf" style="color: #003B4F;">else</span>:</span>
<span id="cb13-22">        sns.countplot(train[col])</span>
<span id="cb13-23">        plt.title(col, fontsize<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">14</span>)</span>
<span id="cb13-24">        plt.xlabel(<span class="st" style="color: #20794D;">""</span>)</span>
<span id="cb13-25">        plt.ylabel(<span class="st" style="color: #20794D;">""</span>)</span>
<span id="cb13-26">        plt.tight_layout()</span>
<span id="cb13-27"></span>
<span id="cb13-28">plt.subplot(n_rows,n_cols,<span class="dv" style="color: #AD0000;">14</span>)</span>
<span id="cb13-29">sns.kdeplot(np.log(train[<span class="st" style="color: #20794D;">'instrumentalness'</span>]), color<span class="op" style="color: #5E5E5E;">=</span>random.sample(colors, <span class="dv" style="color: #AD0000;">1</span>), fill<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>)</span>
<span id="cb13-30">plt.title(<span class="st" style="color: #20794D;">'instrumentalness (log transformed)'</span>, fontsize<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">14</span>)</span>
<span id="cb13-31">plt.ylabel(<span class="st" style="color: #20794D;">" "</span>)</span>
<span id="cb13-32">plt.xlabel(<span class="st" style="color: #20794D;">" "</span>)</span>
<span id="cb13-33">plt.tight_layout()</span>
<span id="cb13-34">plt.show()</span></code></pre></div>
</details>
<div class="cell-output cell-output-display">
<p><img src="https://sagarthacker.com/posts/kaggle/song-popularity-eda_files/figure-html/cell-10-output-1.png" class="img-fluid"></p>
</div>
</div>
<p>We find:</p>
<ul>
<li>Our initial impressions of the data types have largely been confirmed: audio_mode is a boolean feature, and time_signature and key are ordinal or categorical ones (or integer; although a better understanding of those musical concepts would certainly benefit from some domain knowledge.)</li>
<li>A number of features are bounded between 0 and 1: accosticness, danceability, energy, liveliness, speechiness, and audio_valence.</li>
<li>The feature loudness looks like it refer to the decibel scale.</li>
<li>The distribution of instrumentalness is heavily right-skewed, and even after a log transform this feature doesn’t look very well-behaved. This might need a bit more work.</li>
</ul>
</section>
<section id="target-song-popularity" class="level3">
<h3 class="anchored" data-anchor-id="target-song-popularity">4.2. Target: Song Popularity</h3>
<p>On to the target itself. We figured out that song_popularity is a binary feature, and thus we can express it as boolean. Here we plot a barchart.</p>
<div class="cell" data-tags="[]" data-execution_count="15">
<details>
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb14-1">sns.countplot(train.song_popularity.astype(<span class="st" style="color: #20794D;">"bool"</span>))</span>
<span id="cb14-2">plt.title(<span class="st" style="color: #20794D;">"Target: Song Popularity"</span>, fontsize<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">14</span>)</span>
<span id="cb14-3">plt.xlabel(<span class="st" style="color: #20794D;">""</span>)</span>
<span id="cb14-4">plt.ylabel(<span class="st" style="color: #20794D;">""</span>)</span>
<span id="cb14-5">plt.show()</span></code></pre></div>
</details>
<div class="cell-output cell-output-display">
<p><img src="https://sagarthacker.com/posts/kaggle/song-popularity-eda_files/figure-html/cell-11-output-1.png" class="img-fluid"></p>
</div>
</div>
<p>We find:</p>
<ul>
<li>There is a slight imbalance in the target distribution: a bit more than 60/40. Not super imbalanced, but something to keep in mind.</li>
</ul>
</section>
</section>
<section id="feature-interactions" class="level2">
<h2 class="anchored" data-anchor-id="feature-interactions">5. Feature interactions</h2>
<p>After learning more about each individual feature, we now want to see them interacting with one another. It’s best to perfom those steps in that order, so that you can understand and interpret the interactions in the context of the overall distributions.</p>
<section id="target-impact" class="level3">
<h3 class="anchored" data-anchor-id="target-impact">5.1. Target impact</h3>
<p>We have seen all the feature distributions, now we want to investigate whether they look different based on the target value. Here’s an example for song_duration:</p>
<div class="cell" data-tags="[]" data-execution_count="16">
<details>
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb15-1">fig <span class="op" style="color: #5E5E5E;">=</span> plt.figure(figsize<span class="op" style="color: #5E5E5E;">=</span>(<span class="dv" style="color: #AD0000;">16</span>,<span class="dv" style="color: #AD0000;">18</span>))</span>
<span id="cb15-2">n_rows <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">4</span></span>
<span id="cb15-3">n_cols <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">3</span></span>
<span id="cb15-4"></span>
<span id="cb15-5"><span class="cf" style="color: #003B4F;">for</span> index, col <span class="kw" style="color: #003B4F;">in</span> <span class="bu" style="color: null;">enumerate</span>(numeric_cols):</span>
<span id="cb15-6">    plt.subplot(n_rows, n_cols, index<span class="op" style="color: #5E5E5E;">+</span><span class="dv" style="color: #AD0000;">1</span>)</span>
<span id="cb15-7">    </span>
<span id="cb15-8">    sns.kdeplot(train[col], hue<span class="op" style="color: #5E5E5E;">=</span>train.song_popularity.astype(<span class="st" style="color: #20794D;">"bool"</span>), fill<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>)</span>
<span id="cb15-9">    plt.title(col, fontsize<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">14</span>)</span>
<span id="cb15-10">    plt.xlabel(<span class="st" style="color: #20794D;">""</span>)</span>
<span id="cb15-11">    plt.ylabel(<span class="st" style="color: #20794D;">""</span>)</span>
<span id="cb15-12">    plt.tight_layout()</span>
<span id="cb15-13">plt.show()</span></code></pre></div>
</details>
<div class="cell-output cell-output-display">
<p><img src="https://sagarthacker.com/posts/kaggle/song-popularity-eda_files/figure-html/cell-12-output-1.png" class="img-fluid"></p>
</div>
</div>
<p>Observations:</p>
<ul>
<li>By looking at the probability distribution of different variables we find that popular songs are almost exactly the same length as unpopular ones. There is a slight difference, but it’s pretty small.</li>
</ul>
<p>Now we can check the categorical features.</p>
<div class="cell" data-tags="[]" data-execution_count="17">
<details>
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb16-1">fig <span class="op" style="color: #5E5E5E;">=</span> plt.figure(figsize<span class="op" style="color: #5E5E5E;">=</span>(<span class="dv" style="color: #AD0000;">18</span>,<span class="dv" style="color: #AD0000;">5</span>))</span>
<span id="cb16-2"></span>
<span id="cb16-3"><span class="cf" style="color: #003B4F;">for</span> index, col <span class="kw" style="color: #003B4F;">in</span> <span class="bu" style="color: null;">enumerate</span>([<span class="st" style="color: #20794D;">"key"</span>, <span class="st" style="color: #20794D;">"audio_mode"</span>, <span class="st" style="color: #20794D;">"time_signature"</span>]):</span>
<span id="cb16-4">    plt.subplot(<span class="dv" style="color: #AD0000;">1</span>,<span class="dv" style="color: #AD0000;">3</span>,index<span class="op" style="color: #5E5E5E;">+</span><span class="dv" style="color: #AD0000;">1</span>)</span>
<span id="cb16-5">    </span>
<span id="cb16-6">    sns.countplot(train[col], hue<span class="op" style="color: #5E5E5E;">=</span>train.song_popularity.astype(<span class="st" style="color: #20794D;">"bool"</span>))</span>
<span id="cb16-7">    plt.title(col, fontsize<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">14</span>)</span>
<span id="cb16-8">    plt.xlabel(<span class="st" style="color: #20794D;">""</span>)</span>
<span id="cb16-9">    plt.ylabel(<span class="st" style="color: #20794D;">""</span>)</span>
<span id="cb16-10">    plt.tight_layout()</span>
<span id="cb16-11">plt.show()</span></code></pre></div>
</details>
<div class="cell-output cell-output-display">
<p><img src="https://sagarthacker.com/posts/kaggle/song-popularity-eda_files/figure-html/cell-13-output-1.png" class="img-fluid"></p>
</div>
</div>
</section>
<section id="feature-interaction" class="level3">
<h3 class="anchored" data-anchor-id="feature-interaction">5.2. Feature Interaction</h3>
<p>How do the predictor features interact with each other? Are there any redundancies or strong relationships? We will start out with a correlation matrix, and then look at features of interest in a bit more detail.</p>
<section id="correlations-overview" class="level4">
<h4 class="anchored" data-anchor-id="correlations-overview">5.2.1. Correlations overview</h4>
<div class="cell" data-scrolled="true" data-tags="[]" data-execution_count="18">
<details>
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb17-1"><span class="co" style="color: #5E5E5E;"># Refrence (edited): https://towardsdatascience.com/better-heatmaps-and-correlation-matrix-plots-in-python-41445d0f2bec</span></span>
<span id="cb17-2"><span class="kw" style="color: #003B4F;">def</span> heatmap(data):</span>
<span id="cb17-3">    corr <span class="op" style="color: #5E5E5E;">=</span> pd.melt(data.reset_index(), id_vars<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'index'</span>) <span class="co" style="color: #5E5E5E;"># Unpivot the dataframe, so we can get pair of arrays for x and y</span></span>
<span id="cb17-4">    corr.columns <span class="op" style="color: #5E5E5E;">=</span> [<span class="st" style="color: #20794D;">'x'</span>, <span class="st" style="color: #20794D;">'y'</span>, <span class="st" style="color: #20794D;">'value'</span>]</span>
<span id="cb17-5">    x<span class="op" style="color: #5E5E5E;">=</span>corr[<span class="st" style="color: #20794D;">'x'</span>]</span>
<span id="cb17-6">    y<span class="op" style="color: #5E5E5E;">=</span>corr[<span class="st" style="color: #20794D;">'y'</span>]</span>
<span id="cb17-7">    size<span class="op" style="color: #5E5E5E;">=</span>corr[<span class="st" style="color: #20794D;">'value'</span>].<span class="bu" style="color: null;">abs</span>()</span>
<span id="cb17-8">    color<span class="op" style="color: #5E5E5E;">=</span>corr[<span class="st" style="color: #20794D;">'value'</span>]</span>
<span id="cb17-9">    </span>
<span id="cb17-10">    fig, ax <span class="op" style="color: #5E5E5E;">=</span> plt.subplots(figsize<span class="op" style="color: #5E5E5E;">=</span>(<span class="dv" style="color: #AD0000;">10</span>,<span class="dv" style="color: #AD0000;">10</span>))</span>
<span id="cb17-11">    plot_grid <span class="op" style="color: #5E5E5E;">=</span> plt.GridSpec(<span class="dv" style="color: #AD0000;">1</span>, <span class="dv" style="color: #AD0000;">15</span>, hspace<span class="op" style="color: #5E5E5E;">=</span><span class="fl" style="color: #AD0000;">0.2</span>, wspace<span class="op" style="color: #5E5E5E;">=</span><span class="fl" style="color: #AD0000;">0.1</span>) <span class="co" style="color: #5E5E5E;"># Setup a 1x15 grid</span></span>
<span id="cb17-12">    ax <span class="op" style="color: #5E5E5E;">=</span> plt.subplot(plot_grid[:,:<span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">1</span>]) <span class="co" style="color: #5E5E5E;"># Use the leftmost 14 columns of the grid for the main plot</span></span>
<span id="cb17-13">    </span>
<span id="cb17-14">    n_colors <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">256</span> <span class="co" style="color: #5E5E5E;"># Use 256 colors for the diverging color palette</span></span>
<span id="cb17-15">    palette <span class="op" style="color: #5E5E5E;">=</span> sns.diverging_palette(<span class="dv" style="color: #AD0000;">20</span>, <span class="dv" style="color: #AD0000;">220</span>, n<span class="op" style="color: #5E5E5E;">=</span>n_colors) <span class="co" style="color: #5E5E5E;"># Create the palette</span></span>
<span id="cb17-16">    color_min, color_max <span class="op" style="color: #5E5E5E;">=</span> [<span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">1</span>, <span class="dv" style="color: #AD0000;">1</span>] <span class="co" style="color: #5E5E5E;"># Range of values that will be mapped to the palette, i.e. min and max possible correlation</span></span>
<span id="cb17-17">    size_min, size_max <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">0</span>, <span class="dv" style="color: #AD0000;">1</span></span>
<span id="cb17-18">    </span>
<span id="cb17-19">    <span class="kw" style="color: #003B4F;">def</span> value_to_color(val):</span>
<span id="cb17-20">        val_position <span class="op" style="color: #5E5E5E;">=</span> <span class="bu" style="color: null;">float</span>((val <span class="op" style="color: #5E5E5E;">-</span> color_min)) <span class="op" style="color: #5E5E5E;">/</span> (color_max <span class="op" style="color: #5E5E5E;">-</span> color_min) <span class="co" style="color: #5E5E5E;"># position of value in the input range, relative to the length of the input range</span></span>
<span id="cb17-21">        val_position <span class="op" style="color: #5E5E5E;">=</span> <span class="bu" style="color: null;">min</span>(<span class="bu" style="color: null;">max</span>(val_position, <span class="dv" style="color: #AD0000;">0</span>), <span class="dv" style="color: #AD0000;">1</span>) <span class="co" style="color: #5E5E5E;"># bound the position betwen 0 and 1</span></span>
<span id="cb17-22">        ind <span class="op" style="color: #5E5E5E;">=</span> <span class="bu" style="color: null;">int</span>(val_position <span class="op" style="color: #5E5E5E;">*</span> (n_colors <span class="op" style="color: #5E5E5E;">-</span> <span class="dv" style="color: #AD0000;">1</span>)) <span class="co" style="color: #5E5E5E;"># target index in the color palette</span></span>
<span id="cb17-23">        <span class="cf" style="color: #003B4F;">return</span> palette[ind]</span>
<span id="cb17-24">    </span>
<span id="cb17-25">    <span class="kw" style="color: #003B4F;">def</span> value_to_size(val):</span>
<span id="cb17-26">        val_position <span class="op" style="color: #5E5E5E;">=</span> (val <span class="op" style="color: #5E5E5E;">-</span> size_min) <span class="op" style="color: #5E5E5E;">*</span> <span class="fl" style="color: #AD0000;">0.99</span> <span class="op" style="color: #5E5E5E;">/</span> (size_max <span class="op" style="color: #5E5E5E;">-</span> size_min) <span class="op" style="color: #5E5E5E;">+</span> <span class="fl" style="color: #AD0000;">0.01</span> <span class="co" style="color: #5E5E5E;"># position of value in the input range, relative to the length of the input range</span></span>
<span id="cb17-27">        val_position <span class="op" style="color: #5E5E5E;">=</span> <span class="bu" style="color: null;">min</span>(<span class="bu" style="color: null;">max</span>(val_position, <span class="dv" style="color: #AD0000;">0</span>), <span class="dv" style="color: #AD0000;">1</span>) <span class="co" style="color: #5E5E5E;"># bound the position betwen 0 and 1</span></span>
<span id="cb17-28">        <span class="cf" style="color: #003B4F;">return</span> val_position <span class="op" style="color: #5E5E5E;">*</span> size_scale</span>
<span id="cb17-29">        </span>
<span id="cb17-30">    <span class="co" style="color: #5E5E5E;"># Mapping from column names to integer coordinates</span></span>
<span id="cb17-31">    x_labels <span class="op" style="color: #5E5E5E;">=</span> [v <span class="cf" style="color: #003B4F;">for</span> v <span class="kw" style="color: #003B4F;">in</span> <span class="bu" style="color: null;">sorted</span>(x.unique())]</span>
<span id="cb17-32">    y_labels <span class="op" style="color: #5E5E5E;">=</span> [v <span class="cf" style="color: #003B4F;">for</span> v <span class="kw" style="color: #003B4F;">in</span> <span class="bu" style="color: null;">sorted</span>(y.unique())]</span>
<span id="cb17-33">    x_to_num <span class="op" style="color: #5E5E5E;">=</span> {p[<span class="dv" style="color: #AD0000;">1</span>]:p[<span class="dv" style="color: #AD0000;">0</span>] <span class="cf" style="color: #003B4F;">for</span> p <span class="kw" style="color: #003B4F;">in</span> <span class="bu" style="color: null;">enumerate</span>(x_labels)} </span>
<span id="cb17-34">    y_to_num <span class="op" style="color: #5E5E5E;">=</span> {p[<span class="dv" style="color: #AD0000;">1</span>]:p[<span class="dv" style="color: #AD0000;">0</span>] <span class="cf" style="color: #003B4F;">for</span> p <span class="kw" style="color: #003B4F;">in</span> <span class="bu" style="color: null;">enumerate</span>(y_labels)} </span>
<span id="cb17-35">    </span>
<span id="cb17-36">    size_scale <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">500</span></span>
<span id="cb17-37">    ax.scatter(</span>
<span id="cb17-38">        x<span class="op" style="color: #5E5E5E;">=</span>x.<span class="bu" style="color: null;">map</span>(x_to_num), <span class="co" style="color: #5E5E5E;"># Use mapping for x</span></span>
<span id="cb17-39">        y<span class="op" style="color: #5E5E5E;">=</span>y.<span class="bu" style="color: null;">map</span>(y_to_num), <span class="co" style="color: #5E5E5E;"># Use mapping for y</span></span>
<span id="cb17-40">        s<span class="op" style="color: #5E5E5E;">=</span>size.<span class="bu" style="color: null;">apply</span>(value_to_size), <span class="co" style="color: #5E5E5E;"># Vector of square sizes, proportional to size parameter</span></span>
<span id="cb17-41">        c<span class="op" style="color: #5E5E5E;">=</span>color.<span class="bu" style="color: null;">apply</span>(value_to_color), <span class="co" style="color: #5E5E5E;"># Vector of square color values, mapped to color palette</span></span>
<span id="cb17-42">        marker<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'s'</span> <span class="co" style="color: #5E5E5E;"># Use square as scatterplot marker</span></span>
<span id="cb17-43">    )</span>
<span id="cb17-44">    </span>
<span id="cb17-45">    <span class="co" style="color: #5E5E5E;"># Show column labels on the axes</span></span>
<span id="cb17-46">    ax.set_xticks([x_to_num[v] <span class="cf" style="color: #003B4F;">for</span> v <span class="kw" style="color: #003B4F;">in</span> x_labels])</span>
<span id="cb17-47">    ax.set_xticklabels(x_labels, rotation<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">45</span>, horizontalalignment<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'right'</span>)</span>
<span id="cb17-48">    ax.set_yticks([y_to_num[v] <span class="cf" style="color: #003B4F;">for</span> v <span class="kw" style="color: #003B4F;">in</span> y_labels])</span>
<span id="cb17-49">    ax.set_yticklabels(y_labels)</span>
<span id="cb17-50">    </span>
<span id="cb17-51">    ax.grid(<span class="va" style="color: #111111;">False</span>, <span class="st" style="color: #20794D;">'major'</span>)</span>
<span id="cb17-52">    ax.grid(<span class="va" style="color: #111111;">True</span>, <span class="st" style="color: #20794D;">'minor'</span>)</span>
<span id="cb17-53">    ax.set_xticks([t <span class="op" style="color: #5E5E5E;">+</span> <span class="fl" style="color: #AD0000;">0.5</span> <span class="cf" style="color: #003B4F;">for</span> t <span class="kw" style="color: #003B4F;">in</span> ax.get_xticks()], minor<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>)</span>
<span id="cb17-54">    ax.set_yticks([t <span class="op" style="color: #5E5E5E;">+</span> <span class="fl" style="color: #AD0000;">0.5</span> <span class="cf" style="color: #003B4F;">for</span> t <span class="kw" style="color: #003B4F;">in</span> ax.get_yticks()], minor<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>)</span>
<span id="cb17-55">        </span>
<span id="cb17-56">    ax.set_xlim([<span class="op" style="color: #5E5E5E;">-</span><span class="fl" style="color: #AD0000;">0.5</span>, <span class="bu" style="color: null;">max</span>([v <span class="cf" style="color: #003B4F;">for</span> v <span class="kw" style="color: #003B4F;">in</span> x_to_num.values()]) <span class="op" style="color: #5E5E5E;">+</span> <span class="fl" style="color: #AD0000;">0.5</span>])</span>
<span id="cb17-57">    ax.set_ylim([<span class="op" style="color: #5E5E5E;">-</span><span class="fl" style="color: #AD0000;">0.5</span>, <span class="bu" style="color: null;">max</span>([v <span class="cf" style="color: #003B4F;">for</span> v <span class="kw" style="color: #003B4F;">in</span> y_to_num.values()]) <span class="op" style="color: #5E5E5E;">+</span> <span class="fl" style="color: #AD0000;">0.5</span>])</span>
<span id="cb17-58">    ax.set_facecolor(<span class="st" style="color: #20794D;">'#F1F1F1'</span>)</span>
<span id="cb17-59">    </span>
<span id="cb17-60">    <span class="co" style="color: #5E5E5E;"># Add color legend on the right side of the plot</span></span>
<span id="cb17-61">    ax <span class="op" style="color: #5E5E5E;">=</span> plt.subplot(plot_grid[:,<span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">1</span>]) <span class="co" style="color: #5E5E5E;"># Use the rightmost column of the plot</span></span>
<span id="cb17-62"></span>
<span id="cb17-63">    col_x <span class="op" style="color: #5E5E5E;">=</span> [<span class="dv" style="color: #AD0000;">0</span>]<span class="op" style="color: #5E5E5E;">*</span><span class="bu" style="color: null;">len</span>(palette) <span class="co" style="color: #5E5E5E;"># Fixed x coordinate for the bars</span></span>
<span id="cb17-64">    bar_y<span class="op" style="color: #5E5E5E;">=</span>np.linspace(color_min, color_max, n_colors) <span class="co" style="color: #5E5E5E;"># y coordinates for each of the n_colors bars</span></span>
<span id="cb17-65"></span>
<span id="cb17-66">    bar_height <span class="op" style="color: #5E5E5E;">=</span> bar_y[<span class="dv" style="color: #AD0000;">1</span>] <span class="op" style="color: #5E5E5E;">-</span> bar_y[<span class="dv" style="color: #AD0000;">0</span>]</span>
<span id="cb17-67">    ax.barh(</span>
<span id="cb17-68">        y<span class="op" style="color: #5E5E5E;">=</span>bar_y,</span>
<span id="cb17-69">        width<span class="op" style="color: #5E5E5E;">=</span>[<span class="dv" style="color: #AD0000;">5</span>]<span class="op" style="color: #5E5E5E;">*</span><span class="bu" style="color: null;">len</span>(palette), <span class="co" style="color: #5E5E5E;"># Make bars 5 units wide</span></span>
<span id="cb17-70">        left<span class="op" style="color: #5E5E5E;">=</span>col_x, <span class="co" style="color: #5E5E5E;"># Make bars start at 0</span></span>
<span id="cb17-71">        height<span class="op" style="color: #5E5E5E;">=</span>bar_height,</span>
<span id="cb17-72">        color<span class="op" style="color: #5E5E5E;">=</span>palette,</span>
<span id="cb17-73">        linewidth<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">0</span></span>
<span id="cb17-74">    )</span>
<span id="cb17-75">    ax.set_xlim(<span class="dv" style="color: #AD0000;">1</span>, <span class="dv" style="color: #AD0000;">2</span>) <span class="co" style="color: #5E5E5E;"># Bars are going from 0 to 5, so lets crop the plot somewhere in the middle</span></span>
<span id="cb17-76">    ax.grid(<span class="va" style="color: #111111;">False</span>) <span class="co" style="color: #5E5E5E;"># Hide grid</span></span>
<span id="cb17-77">    ax.set_facecolor(<span class="st" style="color: #20794D;">'white'</span>) <span class="co" style="color: #5E5E5E;"># Make background white</span></span>
<span id="cb17-78">    ax.set_xticks([]) <span class="co" style="color: #5E5E5E;"># Remove horizontal ticks</span></span>
<span id="cb17-79">    ax.set_yticks(np.linspace(<span class="bu" style="color: null;">min</span>(bar_y), <span class="bu" style="color: null;">max</span>(bar_y), <span class="dv" style="color: #AD0000;">3</span>)) <span class="co" style="color: #5E5E5E;"># Show vertical ticks for min, middle and max</span></span>
<span id="cb17-80">    ax.yaxis.tick_right() <span class="co" style="color: #5E5E5E;"># Show vertical ticks on the right</span></span>
<span id="cb17-81">    </span></code></pre></div>
</details>
</div>
<div class="cell" data-tags="[]" data-execution_count="19">
<details>
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb18-1">heatmap(train[numeric_cols].corr())</span></code></pre></div>
</details>
<div class="cell-output cell-output-display">
<p><img src="https://sagarthacker.com/posts/kaggle/song-popularity-eda_files/figure-html/cell-15-output-1.png" class="img-fluid"></p>
</div>
</div>
<p>Below is a similar correlation heatmap but only using the lower triangle to show the correlation.</p>
<div class="cell" data-tags="[]" data-execution_count="20">
<details>
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb19-1"><span class="co" style="color: #5E5E5E;"># Refrence (edited): https://medium.com/@szabo.bibor/how-to-create-a-seaborn-correlation-heatmap-in-python-834c0686b88e</span></span>
<span id="cb19-2"></span>
<span id="cb19-3">fig <span class="op" style="color: #5E5E5E;">=</span> plt.figure(figsize<span class="op" style="color: #5E5E5E;">=</span>(<span class="dv" style="color: #AD0000;">10</span>,<span class="dv" style="color: #AD0000;">10</span>))</span>
<span id="cb19-4">matrix <span class="op" style="color: #5E5E5E;">=</span> np.triu(np.ones_like(train[numeric_cols].corr(), dtype<span class="op" style="color: #5E5E5E;">=</span>np.<span class="bu" style="color: null;">bool</span>))</span>
<span id="cb19-5">sns.heatmap(train[numeric_cols].corr(), mask<span class="op" style="color: #5E5E5E;">=</span>matrix, vmin<span class="op" style="color: #5E5E5E;">=-</span><span class="dv" style="color: #AD0000;">1</span>, vmax<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">1</span>, annot<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>, cmap<span class="op" style="color: #5E5E5E;">=</span>sns.diverging_palette(<span class="dv" style="color: #AD0000;">220</span>, <span class="dv" style="color: #AD0000;">20</span>, as_cmap<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>))</span>
<span id="cb19-6">plt.show()</span></code></pre></div>
</details>
<div class="cell-output cell-output-display">
<p><img src="https://sagarthacker.com/posts/kaggle/song-popularity-eda_files/figure-html/cell-16-output-1.png" class="img-fluid"></p>
</div>
</div>
<p>We find:</p>
<ul>
<li>There’s a strong anti-correlation between <code>acousticness</code> vs <code>energy</code> and <code>loudness</code>, respectively. Consequently, <code>energy</code> and <code>loudness</code> share a strong correlation.</li>
<li>None of the features individually show a notable correlation with the target <code>song_popularity</code>.</li>
</ul>
</section>
<section id="categorical-feature-interactions" class="level4">
<h4 class="anchored" data-anchor-id="categorical-feature-interactions">5.2.2. Categorical feature interactions</h4>
<p>Whenever we’re looking at categorical features, we can assign a visualisation dimension like colour, size, or facets to those. We will start modifying our trusted density plots to look at the distributions of energy (potentially one of the more interesting numerical features) for the different values of time_signature (here encoded as colour):</p>
<div class="cell" data-tags="[]" data-execution_count="21">
<details>
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb20" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb20-1">fig <span class="op" style="color: #5E5E5E;">=</span> plt.figure(figsize<span class="op" style="color: #5E5E5E;">=</span>(<span class="dv" style="color: #AD0000;">10</span>,<span class="dv" style="color: #AD0000;">8</span>))</span>
<span id="cb20-2">sns.kdeplot(x<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"energy"</span>, hue<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"time_signature"</span>, data<span class="op" style="color: #5E5E5E;">=</span>train, fill<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>, bw<span class="op" style="color: #5E5E5E;">=</span><span class="fl" style="color: #AD0000;">0.03</span>)</span>
<span id="cb20-3">plt.show()</span></code></pre></div>
</details>
<div class="cell-output cell-output-display">
<p><img src="https://sagarthacker.com/posts/kaggle/song-popularity-eda_files/figure-html/cell-17-output-1.png" class="img-fluid"></p>
</div>
</div>
<div class="cell" data-tags="[]" data-execution_count="22">
<details>
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb21" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb21-1">(ggplot(train, aes(<span class="st" style="color: #20794D;">"key"</span>, <span class="st" style="color: #20794D;">"time_signature"</span>, fill <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">"energy"</span>)) </span>
<span id="cb21-2"> <span class="op" style="color: #5E5E5E;">+</span> geom_tile()</span>
<span id="cb21-3"> <span class="op" style="color: #5E5E5E;">+</span> theme(figure_size<span class="op" style="color: #5E5E5E;">=</span>(<span class="dv" style="color: #AD0000;">16</span>,<span class="dv" style="color: #AD0000;">5</span>))</span>
<span id="cb21-4"> <span class="op" style="color: #5E5E5E;">+</span> scale_x_continuous(breaks<span class="op" style="color: #5E5E5E;">=</span><span class="bu" style="color: null;">range</span>(<span class="dv" style="color: #AD0000;">0</span>,<span class="dv" style="color: #AD0000;">12</span>)))</span></code></pre></div>
</details>
<div class="cell-output cell-output-display">
<p><img src="https://sagarthacker.com/posts/kaggle/song-popularity-eda_files/figure-html/cell-18-output-1.png" class="img-fluid"></p>
</div>
<div class="cell-output cell-output-display" data-execution_count="22">
<pre><code>&lt;ggplot: (8777952485729)&gt;</code></pre>
</div>
</div>
<p>We find:</p>
<ul>
<li>For time_signatures 2 and 5 we have no instances of key == 11. This is no big surprise, since those three values are already rare individually, which makes their combinations even more rare.</li>
<li>There are no clear clusters of high vs low energy features here.</li>
<li>We can see certain combinations that are particularly low energy, such as key == 2 and time_signature == 1 or 8. key == 3 and time_signature == 1 seems to be a particularly energetic combination.</li>
</ul>
</section>
</section>
<section id="feature-target-interaction" class="level3">
<h3 class="anchored" data-anchor-id="feature-target-interaction">5.3. Feature Target Interaction</h3>
<p>Once we have found interesting correlations we can look for clustering in the target variable.</p>
<div class="cell" data-tags="[]" data-execution_count="24">
<details>
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb23" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb23-1">(ggplot(train, aes(<span class="st" style="color: #20794D;">'key'</span>, <span class="st" style="color: #20794D;">'time_signature'</span>)) </span>
<span id="cb23-2"> <span class="op" style="color: #5E5E5E;">+</span> geom_tile(aes(fill<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'energy'</span>)) </span>
<span id="cb23-3"> <span class="op" style="color: #5E5E5E;">+</span> facet_wrap(<span class="st" style="color: #20794D;">"song_popularity"</span>, nrow <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">2</span>) </span>
<span id="cb23-4"> <span class="op" style="color: #5E5E5E;">+</span> theme_minimal() </span>
<span id="cb23-5"> <span class="op" style="color: #5E5E5E;">+</span> theme(figure_size<span class="op" style="color: #5E5E5E;">=</span>(<span class="dv" style="color: #AD0000;">16</span>, <span class="dv" style="color: #AD0000;">8</span>))</span>
<span id="cb23-6"> <span class="op" style="color: #5E5E5E;">+</span> scale_x_continuous(breaks<span class="op" style="color: #5E5E5E;">=</span><span class="bu" style="color: null;">range</span>(<span class="dv" style="color: #AD0000;">0</span>,<span class="dv" style="color: #AD0000;">12</span>)))</span></code></pre></div>
</details>
<div class="cell-output cell-output-display">
<p><img src="https://sagarthacker.com/posts/kaggle/song-popularity-eda_files/figure-html/cell-19-output-1.png" class="img-fluid"></p>
</div>
<div class="cell-output cell-output-display" data-execution_count="24">
<pre><code>&lt;ggplot: (8777950648995)&gt;</code></pre>
</div>
</div>
<div class="cell" data-tags="[]" data-execution_count="25">
<details>
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb25" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb25-1">sns.displot(data<span class="op" style="color: #5E5E5E;">=</span>train, x<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"energy"</span>, y<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"audio_valence"</span>, col<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"song_popularity"</span>, kind<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"kde"</span>, fill<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>, legend<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>, height<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">8</span>, aspect<span class="op" style="color: #5E5E5E;">=</span><span class="fl" style="color: #AD0000;">0.75</span>)</span>
<span id="cb25-2">plt.show()</span></code></pre></div>
</details>
<div class="cell-output cell-output-display">
<p><img src="https://sagarthacker.com/posts/kaggle/song-popularity-eda_files/figure-html/cell-20-output-1.png" class="img-fluid"></p>
</div>
</div>
<div class="cell" data-tags="[]" data-execution_count="26">
<details>
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb26" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb26-1">fig <span class="op" style="color: #5E5E5E;">=</span> plt.figure(figsize<span class="op" style="color: #5E5E5E;">=</span>(<span class="dv" style="color: #AD0000;">12</span>,<span class="dv" style="color: #AD0000;">6</span>))</span>
<span id="cb26-2">sns.scatterplot(x<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"energy"</span>, y<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"acousticness"</span>, hue<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"song_popularity"</span>, data<span class="op" style="color: #5E5E5E;">=</span>train)</span>
<span id="cb26-3">plt.show()</span></code></pre></div>
</details>
<div class="cell-output cell-output-display">
<p><img src="https://sagarthacker.com/posts/kaggle/song-popularity-eda_files/figure-html/cell-21-output-1.png" class="img-fluid"></p>
</div>
</div>
</section>
<section id="more-resources" class="level3">
<h3 class="anchored" data-anchor-id="more-resources">More Resources:</h3>
<ul>
<li><a href="https://seaborn.pydata.org/tutorial/color_palettes.html#palette-tutorial">Choosing different color palette in Seaborn</a></li>
<li>See also
<ul>
<li><a href="https://seaborn.pydata.org/generated/seaborn.PairGrid.html#seaborn.PairGrid">PairGrid</a>: Subplot grid for plotting pairwise relationships</li>
<li><a href="https://seaborn.pydata.org/generated/seaborn.relplot.html#seaborn.relplot">relplot</a>: Combine a relational plot and a FacetGrid</li>
<li><a href="https://seaborn.pydata.org/generated/seaborn.displot.html#seaborn.displot">displot</a>: Combine a distribution plot and a FacetGrid</li>
<li><a href="https://seaborn.pydata.org/generated/seaborn.catplot.html#seaborn.catplot">catplot</a>: Combine a categorical plot and a FacetGrid</li>
<li><a href="https://seaborn.pydata.org/generated/seaborn.lmplot.html#seaborn.lmplot">lmplot</a>: Combine a regression plot and a FacetGrid</li>
</ul></li>
</ul>
<p>Special Thanks to <a href="https://www.kaggle.com/headsortails">Martin Henze</a> for sharing his knowledge during the live coding session. Also, thank you <a href="https://www.kaggle.com/abhishek">Abhishek Thakur</a> for hosting these wonderful sessions for people to learn. I look forward to learn more.</p>
<p>Share if you liked it, comment if you loved it. Hope to see you guys in the next one. Peace!</p>


</section>
</section>

 ]]></description>
  <category>Kaggle</category>
  <guid>https://sagarthacker.com/posts/kaggle/song-popularity-eda.html</guid>
  <pubDate>Mon, 31 May 2021 04:00:00 GMT</pubDate>
  <media:content url="https://sagarthacker.com/posts/kaggle/song_prediction.PNG" medium="image"/>
</item>
<item>
  <title>Text Preprocessing</title>
  <dc:creator>Sagar Thacker</dc:creator>
  <link>https://sagarthacker.com/posts/nlp/text-preprocessing.html</link>
  <description><![CDATA[ 




<p>In any machine learning task, cleaning and pre-processing of the data is a very important step. The better we can represent our data, the better the model training and prediction can be expected.</p>
<p>Specially in the domain of Natural Language Processing (NLP) the data is unstructured. It become crucial to clean and properly format it based on the task at hand. There are various pre-processing steps that can be performed but not necessary to perform all. These steps should be applied based on the problem statement.</p>
<p>Example: Sentiment analysis on twitter data can required to remove hashtags, emoticons, etc. but this may not be the case if we are doing the same analysis on customer feedback data.</p>
<p>Here we are using the twitter_sample dataset from the nltk library.</p>
<div class="cell" data-execution_count="3">
<details>
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="co" style="color: #5E5E5E;"># Import libraries and load the data</span></span>
<span id="cb1-2"><span class="im" style="color: #00769E;">import</span> numpy <span class="im" style="color: #00769E;">as</span> np</span>
<span id="cb1-3"><span class="im" style="color: #00769E;">import</span> pandas <span class="im" style="color: #00769E;">as</span> pd</span>
<span id="cb1-4"><span class="im" style="color: #00769E;">import</span> re</span>
<span id="cb1-5"><span class="im" style="color: #00769E;">import</span> nltk</span>
<span id="cb1-6"><span class="im" style="color: #00769E;">import</span> spacy</span>
<span id="cb1-7"><span class="im" style="color: #00769E;">import</span> string</span>
<span id="cb1-8"><span class="im" style="color: #00769E;">import</span> demoji</span>
<span id="cb1-9"><span class="im" style="color: #00769E;">import</span> contractions</span>
<span id="cb1-10"><span class="im" style="color: #00769E;">import</span> unidecode</span>
<span id="cb1-11"><span class="im" style="color: #00769E;">from</span> num2words <span class="im" style="color: #00769E;">import</span> num2words</span>
<span id="cb1-12"><span class="im" style="color: #00769E;">from</span> nltk.corpus <span class="im" style="color: #00769E;">import</span> twitter_samples</span>
<span id="cb1-13"><span class="im" style="color: #00769E;">from</span> nltk.corpus <span class="im" style="color: #00769E;">import</span> stopwords</span>
<span id="cb1-14"><span class="im" style="color: #00769E;">from</span> nltk.stem.porter <span class="im" style="color: #00769E;">import</span> PorterStemmer</span>
<span id="cb1-15"><span class="im" style="color: #00769E;">from</span> nltk.stem.snowball <span class="im" style="color: #00769E;">import</span> SnowballStemmer</span>
<span id="cb1-16"><span class="im" style="color: #00769E;">from</span> nltk.stem <span class="im" style="color: #00769E;">import</span> WordNetLemmatizer</span>
<span id="cb1-17"><span class="im" style="color: #00769E;">from</span> bs4 <span class="im" style="color: #00769E;">import</span> BeautifulSoup</span>
<span id="cb1-18"><span class="im" style="color: #00769E;">from</span> spellchecker <span class="im" style="color: #00769E;">import</span> SpellChecker</span>
<span id="cb1-19"><span class="im" style="color: #00769E;">from</span> ekphrasis.classes.preprocessor <span class="im" style="color: #00769E;">import</span> TextPreProcessor</span>
<span id="cb1-20"><span class="im" style="color: #00769E;">from</span> ekphrasis.classes.tokenizer <span class="im" style="color: #00769E;">import</span> SocialTokenizer</span>
<span id="cb1-21"><span class="im" style="color: #00769E;">from</span> ekphrasis.dicts.emoticons <span class="im" style="color: #00769E;">import</span> emoticons</span>
<span id="cb1-22"></span>
<span id="cb1-23">pd.options.display.max_columns <span class="op" style="color: #5E5E5E;">=</span> <span class="va" style="color: #111111;">None</span></span>
<span id="cb1-24">pd.options.display.max_rows <span class="op" style="color: #5E5E5E;">=</span> <span class="va" style="color: #111111;">None</span></span>
<span id="cb1-25">pd.options.display.max_colwidth <span class="op" style="color: #5E5E5E;">=</span> <span class="va" style="color: #111111;">None</span></span>
<span id="cb1-26"></span>
<span id="cb1-27">nltk.download(<span class="st" style="color: #20794D;">'twitter_samples'</span>)  <span class="co" style="color: #5E5E5E;"># Download the dataset</span></span>
<span id="cb1-28"></span>
<span id="cb1-29"><span class="co" style="color: #5E5E5E;"># We are going to use the Negative and Positive Tweets file which each contains 5000 tweets.</span></span>
<span id="cb1-30"><span class="cf" style="color: #003B4F;">for</span> name <span class="kw" style="color: #003B4F;">in</span> twitter_samples.fileids():</span>
<span id="cb1-31">    <span class="bu" style="color: null;">print</span>(<span class="ss" style="color: #20794D;">f' - </span><span class="sc" style="color: #5E5E5E;">{</span>name<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">'</span>)</span></code></pre></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code> - negative_tweets.json
 - positive_tweets.json
 - tweets.20150430-223406.json</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>[nltk_data] Downloading package twitter_samples to
[nltk_data]     /Users/wizard/nltk_data...
[nltk_data]   Package twitter_samples is already up-to-date!</code></pre>
</div>
</div>
<div class="cell" data-execution_count="115">
<details>
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb4-1"><span class="co" style="color: #5E5E5E;"># Load the negative tweets file and assign label as 0 for negative</span></span>
<span id="cb4-2">negative_tweets <span class="op" style="color: #5E5E5E;">=</span> twitter_samples.strings(<span class="st" style="color: #20794D;">"negative_tweets.json"</span>)</span>
<span id="cb4-3">df_neg <span class="op" style="color: #5E5E5E;">=</span> pd.DataFrame(negative_tweets, columns<span class="op" style="color: #5E5E5E;">=</span>[<span class="st" style="color: #20794D;">'text'</span>])</span>
<span id="cb4-4">df_neg[<span class="st" style="color: #20794D;">'label'</span>] <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">0</span></span>
<span id="cb4-5"></span>
<span id="cb4-6"><span class="co" style="color: #5E5E5E;"># Load the positive tweets file and assign label as 1 for positive</span></span>
<span id="cb4-7">positive_tweets <span class="op" style="color: #5E5E5E;">=</span> twitter_samples.strings(<span class="st" style="color: #20794D;">"positive_tweets.json"</span>)</span>
<span id="cb4-8">df_pos <span class="op" style="color: #5E5E5E;">=</span> pd.DataFrame(positive_tweets, columns<span class="op" style="color: #5E5E5E;">=</span>[<span class="st" style="color: #20794D;">'text'</span>])</span>
<span id="cb4-9">df_pos[<span class="st" style="color: #20794D;">'label'</span>] <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">1</span></span>
<span id="cb4-10"></span>
<span id="cb4-11">df <span class="op" style="color: #5E5E5E;">=</span> pd.concat([df_pos, df_neg])  <span class="co" style="color: #5E5E5E;"># Concatenate both the files</span></span>
<span id="cb4-12"><span class="co" style="color: #5E5E5E;"># Shuffle the data to mix negative and positive tweets</span></span>
<span id="cb4-13">df <span class="op" style="color: #5E5E5E;">=</span> df.sample(frac<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">1</span>).reset_index(drop<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>)</span></code></pre></div>
</details>
</div>
<div class="cell" data-execution_count="116">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb5-1"><span class="bu" style="color: null;">print</span>(<span class="ss" style="color: #20794D;">f'Shape of the whole data is: </span><span class="sc" style="color: #5E5E5E;">{</span>df<span class="sc" style="color: #5E5E5E;">.</span>shape[<span class="dv" style="color: #AD0000;">0</span>]<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;"> rows and </span><span class="sc" style="color: #5E5E5E;">{</span>df<span class="sc" style="color: #5E5E5E;">.</span>shape[<span class="dv" style="color: #AD0000;">1</span>]<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;"> columns'</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Shape of the whole data is: 10000 rows and 2 columns</code></pre>
</div>
</div>
<div class="cell" data-execution_count="118">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb7-1"><span class="co" style="color: #5E5E5E;"># Look at the head of the dataframe</span></span>
<span id="cb7-2">df.head()</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="118">

<div>

<table class="dataframe table table-sm table-striped">
  <thead>
    <tr>
      <th></th>
      <th>text</th>
      <th>label</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td>Username Changed! :D</td>
      <td>1</td>
    </tr>
    <tr>
      <th>1</th>
      <td>@kimtaaeyeonss unnieeee!!!:)</td>
      <td>1</td>
    </tr>
    <tr>
      <th>2</th>
      <td>@amyewest Thanks! I hope you've got a good book to keep you company. :-)</td>
      <td>1</td>
    </tr>
    <tr>
      <th>3</th>
      <td>:) where are you situated? @Hijay09</td>
      <td>1</td>
    </tr>
    <tr>
      <th>4</th>
      <td>@egaroo You're welcome, I'm glad you liked it :)</td>
      <td>1</td>
    </tr>
  </tbody>
</table>
</div>
</div>
</div>
<div class="callout-tip callout callout-style-default callout-captioned">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-caption-container flex-fill">
Tip
</div>
</div>
<div class="callout-body-container callout-body">
<p>Tip: Always make it a practice to first skim the dataset before performing any text pre-processing steps. It is important because text data can be very noisy eg. dates are written in different formats, present of accented characters, etc. These are stuff we can easily miss if we don’t go through the dataset properly.</p>
</div>
</div>
<section id="lower-casing" class="level2">
<h2 class="anchored" data-anchor-id="lower-casing">Lower Casing</h2>
<p>Lowercasing is a common text preprocessing technique. It helps to transform all the text in same case. <br> Examples ‘The’, ‘the’, ‘ThE’ -&gt; ‘the’</p>
<p>This is also useful to find all the duplicates since words in different cases are treated as separate words and becomes difficult for us to remove redundant words in all different case combination.</p>
<p>This may not be helpful when we do tasks like Part of Speech tagging (where proper casing gives some information about Nouns and so on) and Sentiment Analysis (where upper casing refers to anger and so on)</p>
<div class="cell" data-execution_count="119">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb8-1">df.text <span class="op" style="color: #5E5E5E;">=</span> df.text.<span class="bu" style="color: null;">str</span>.lower()</span>
<span id="cb8-2">df.head(<span class="dv" style="color: #AD0000;">2</span>)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="119">

<div>

<table class="dataframe table table-sm table-striped">
  <thead>
    <tr>
      <th></th>
      <th>text</th>
      <th>label</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td>username changed! :d</td>
      <td>1</td>
    </tr>
    <tr>
      <th>1</th>
      <td>@kimtaaeyeonss unnieeee!!!:)</td>
      <td>1</td>
    </tr>
  </tbody>
</table>
</div>
</div>
</div>
</section>
<section id="remove-redundant-features" class="level2">
<h2 class="anchored" data-anchor-id="remove-redundant-features">Remove Redundant Features</h2>
<div class="callout-note callout callout-style-default callout-captioned">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-caption-container flex-fill">
Note
</div>
</div>
<div class="callout-body-container callout-body">
<p>Note: How you define redundant features varies based on the problem statement.</p>
</div>
</div>
<section id="urls" class="level3">
<h3 class="anchored" data-anchor-id="urls">URL’s</h3>
<p>URL stands for Uniform Resource Locator. If present in a text, it represents the location of another website.</p>
<p>If we are performing any websites backlink analysis, in that case URL’s are useful to keep. Otherwise, they don’t provide any information. So we can remove them from our text.</p>
<div class="cell" data-execution_count="120">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb9-1">df.text <span class="op" style="color: #5E5E5E;">=</span> df.text.<span class="bu" style="color: null;">str</span>.replace(<span class="vs" style="color: #20794D;">r'https?://\S+|www\.\S+'</span>, <span class="st" style="color: #20794D;">''</span>, regex<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>)</span>
<span id="cb9-2">df.head()</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="120">

<div>

<table class="dataframe table table-sm table-striped">
  <thead>
    <tr>
      <th></th>
      <th>text</th>
      <th>label</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td>username changed! :d</td>
      <td>1</td>
    </tr>
    <tr>
      <th>1</th>
      <td>@kimtaaeyeonss unnieeee!!!:)</td>
      <td>1</td>
    </tr>
    <tr>
      <th>2</th>
      <td>@amyewest thanks! i hope you've got a good book to keep you company. :-)</td>
      <td>1</td>
    </tr>
    <tr>
      <th>3</th>
      <td>:) where are you situated? @hijay09</td>
      <td>1</td>
    </tr>
    <tr>
      <th>4</th>
      <td>@egaroo you're welcome, i'm glad you liked it :)</td>
      <td>1</td>
    </tr>
  </tbody>
</table>
</div>
</div>
</div>
</section>
<section id="e-mail" class="level3">
<h3 class="anchored" data-anchor-id="e-mail">E-mail</h3>
<p>E-mail id’s are common in customer feedback data and they do not provide any useful information. So we remove them from the text.</p>
<p>Twitter data that we are using does not contain any email id’s. Hence, please find the code snipper with an dummy example to remove e-mail id’s.</p>
<div class="cell" data-execution_count="6">
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb10-1">text <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">'I have being trying to contact xyz via email to xyz@abc.co.in but there is no response.'</span></span>
<span id="cb10-2">re.sub(<span class="vs" style="color: #20794D;">r'\S+@\S+'</span>, <span class="st" style="color: #20794D;">''</span>, text)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="6">
<pre><code>'I have being trying to contact xyz via email to  but there is no response.'</code></pre>
</div>
</div>
</section>
<section id="date" class="level3">
<h3 class="anchored" data-anchor-id="date">Date</h3>
<p>Dates can be represented in various formats and can be difficult at times to remove them. They are unlikely to contain any useful information for predicting the labels.</p>
<p>Below I have used dummy text to showcase the following task.</p>
<div class="cell" data-execution_count="7">
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb12-1">text <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">"Today is 22/12/2020 and after two days on 24-12-2020 our vacation starts until 25th.09.2021"</span></span>
<span id="cb12-2"></span>
<span id="cb12-3"><span class="co" style="color: #5E5E5E;"># 1. Remove date formats like: dd/mm/yy(yy), dd-mm-yy(yy), dd(st|nd|rd).mm/yy(yy)</span></span>
<span id="cb12-4">re.sub(<span class="vs" style="color: #20794D;">r'\d{1,2}(st|nd|rd|th)?[-./]\d{1,2}[-./]\d{2,4}'</span>, <span class="st" style="color: #20794D;">''</span>, text)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="7">
<pre><code>'Today is  and after two days on  our vacation starts until '</code></pre>
</div>
</div>
<div class="cell" data-execution_count="8">
<div class="sourceCode cell-code" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb14-1">text <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">"Today is 11th of January, 2021 when I am writing this post. I hope to post this by February 15th or max to max by 20 may 21 or 20th-December-21"</span></span>
<span id="cb14-2"></span>
<span id="cb14-3"><span class="co" style="color: #5E5E5E;"># 2. Remove date formats like: 20 apr 21, April 15th, 11th of April, 2021</span></span>
<span id="cb14-4">pattern <span class="op" style="color: #5E5E5E;">=</span> re.<span class="bu" style="color: null;">compile</span>(</span>
<span id="cb14-5">    <span class="vs" style="color: #20794D;">r'(\d{1,2})?(st|nd|rd|th)?[-./,]?\s?(of)?\s?([J|j]an(uary)?|[F|f]eb(ruary)?|[Mm]ar(ch)?|[Aa]pr(il)?|[Mm]ay|[Jj]un(e)?|[Jj]ul(y)?|[Aa]ug(ust)?|[Ss]ep(tember)?|[Oo]ct(ober)?|[Nn]ov(ember)?|[Dd]ec(ember)?)\s?(\d{1,2})?(st|nd|rd|th)?\s?[-./,]?\s?(\d{2,4})?'</span>)</span>
<span id="cb14-6">pattern.sub(<span class="vs" style="color: #20794D;">r''</span>, text)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="8">
<pre><code>'Today is  when I am writing this post. I hope to post this byor max to max by or '</code></pre>
</div>
</div>
<p>There are various formats in which dates are represented and the above regex can be customized in many ways. Above, “byor” got combined cause we are trying multiple format in single regex pattern. You can customize the above expression accordingly to your need.</p>
</section>
<section id="html-tags" class="level3">
<h3 class="anchored" data-anchor-id="html-tags">HTML Tags</h3>
<p>If we are extracting data from various websites, it is possible that the data also contains HTML tags. These tags does not provide any information and should be removed. These tags can be removed using regex or by using BeautifulSoup library.</p>
<div class="cell" data-execution_count="138">
<div class="sourceCode cell-code" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb16-1"><span class="co" style="color: #5E5E5E;"># Dummy text</span></span>
<span id="cb16-2">text <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">"""</span></span>
<span id="cb16-3"><span class="st" style="color: #20794D;">&lt;title&gt;Below is a dummy html code.&lt;/title&gt;</span></span>
<span id="cb16-4"><span class="st" style="color: #20794D;">&lt;body&gt;</span></span>
<span id="cb16-5"><span class="st" style="color: #20794D;">    &lt;p&gt;All the html opening and closing brackets should be remove.&lt;/p&gt;</span></span>
<span id="cb16-6"><span class="st" style="color: #20794D;">    &lt;a href="https://www.abc.com"&gt;Company Site&lt;/a&gt;</span></span>
<span id="cb16-7"><span class="st" style="color: #20794D;">&lt;/body&gt;</span></span>
<span id="cb16-8"><span class="st" style="color: #20794D;">"""</span></span></code></pre></div>
</div>
<div class="cell" data-execution_count="139">
<div class="sourceCode cell-code" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb17-1"><span class="co" style="color: #5E5E5E;"># Using regex to remove html tags</span></span>
<span id="cb17-2">pattern <span class="op" style="color: #5E5E5E;">=</span> re.<span class="bu" style="color: null;">compile</span>(<span class="st" style="color: #20794D;">'&lt;.*?&gt;'</span>)</span>
<span id="cb17-3">pattern.sub(<span class="st" style="color: #20794D;">''</span>, text)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="139">
<pre><code>'\nBelow is a dummy html code.\n\n    All the html opening and closing brackets should be remove.\n    Company Site\n\n'</code></pre>
</div>
</div>
<div class="cell" data-execution_count="140">
<div class="sourceCode cell-code" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb19-1"><span class="co" style="color: #5E5E5E;"># Using Beautiful Soup</span></span>
<span id="cb19-2"><span class="kw" style="color: #003B4F;">def</span> remove_html(text):</span>
<span id="cb19-3">    clean_text <span class="op" style="color: #5E5E5E;">=</span> BeautifulSoup(text).get_text()</span>
<span id="cb19-4">    <span class="cf" style="color: #003B4F;">return</span> clean_text</span></code></pre></div>
</div>
<div class="cell" data-execution_count="141">
<div class="sourceCode cell-code" id="cb20" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb20-1">remove_html(text)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="141">
<pre><code>'\nBelow is a dummy html code.\n\nAll the html opening and closing brackets should be remove.\nCompany Site\n\n'</code></pre>
</div>
</div>
</section>
<section id="emojis" class="level3">
<h3 class="anchored" data-anchor-id="emojis">Emojis</h3>
<p>As more and more people have started using social media emoji’s play a very crucial role. Emoji’s are used to express emotions that are universally understood.</p>
<p>In some analysis such as sentiment analysis emoji’s can be useful. We can convert them to words or create some new features based on them. For some analysis we need to remove them. Find the below code snippet used to remove the emoji’s.</p>
<div class="cell" data-execution_count="126">
<details>
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb22" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb22-1"><span class="co" style="color: #5E5E5E;"># Reference: https://gist.github.com/slowkow/7a7f61f495e3dbb7e3d767f97bd7304b</span></span>
<span id="cb22-2"></span>
<span id="cb22-3"><span class="kw" style="color: #003B4F;">def</span> remove_emoji(text):</span>
<span id="cb22-4">    emoji_pattern <span class="op" style="color: #5E5E5E;">=</span> re.<span class="bu" style="color: null;">compile</span>(<span class="st" style="color: #20794D;">"["</span></span>
<span id="cb22-5">                               <span class="st" style="color: #20794D;">u"</span><span class="ch" style="color: #20794D;">\U0001F600</span><span class="st" style="color: #20794D;">-</span><span class="ch" style="color: #20794D;">\U0001F64F</span><span class="st" style="color: #20794D;">"</span>  <span class="co" style="color: #5E5E5E;"># emoticons</span></span>
<span id="cb22-6">                               <span class="st" style="color: #20794D;">u"</span><span class="ch" style="color: #20794D;">\U0001F300</span><span class="st" style="color: #20794D;">-</span><span class="ch" style="color: #20794D;">\U0001F5FF</span><span class="st" style="color: #20794D;">"</span>  <span class="co" style="color: #5E5E5E;"># symbols &amp; pictographs</span></span>
<span id="cb22-7">                               <span class="st" style="color: #20794D;">u"</span><span class="ch" style="color: #20794D;">\U0001F680</span><span class="st" style="color: #20794D;">-</span><span class="ch" style="color: #20794D;">\U0001F6FF</span><span class="st" style="color: #20794D;">"</span>  <span class="co" style="color: #5E5E5E;"># transport &amp; map symbols</span></span>
<span id="cb22-8">                               <span class="st" style="color: #20794D;">u"</span><span class="ch" style="color: #20794D;">\U0001F1E0</span><span class="st" style="color: #20794D;">-</span><span class="ch" style="color: #20794D;">\U0001F1FF</span><span class="st" style="color: #20794D;">"</span>  <span class="co" style="color: #5E5E5E;"># flags (iOS)</span></span>
<span id="cb22-9">                               <span class="st" style="color: #20794D;">u"</span><span class="ch" style="color: #20794D;">\U00002500</span><span class="st" style="color: #20794D;">-</span><span class="ch" style="color: #20794D;">\U00002BEF</span><span class="st" style="color: #20794D;">"</span>  <span class="co" style="color: #5E5E5E;"># chinese char</span></span>
<span id="cb22-10">                               <span class="st" style="color: #20794D;">u"</span><span class="ch" style="color: #20794D;">\U00002702</span><span class="st" style="color: #20794D;">-</span><span class="ch" style="color: #20794D;">\U000027B0</span><span class="st" style="color: #20794D;">"</span></span>
<span id="cb22-11">                               <span class="st" style="color: #20794D;">u"</span><span class="ch" style="color: #20794D;">\U00002702</span><span class="st" style="color: #20794D;">-</span><span class="ch" style="color: #20794D;">\U000027B0</span><span class="st" style="color: #20794D;">"</span></span>
<span id="cb22-12">                               <span class="st" style="color: #20794D;">u"</span><span class="ch" style="color: #20794D;">\U000024C2</span><span class="st" style="color: #20794D;">-</span><span class="ch" style="color: #20794D;">\U0001F251</span><span class="st" style="color: #20794D;">"</span></span>
<span id="cb22-13">                               <span class="st" style="color: #20794D;">u"</span><span class="ch" style="color: #20794D;">\U0001f926</span><span class="st" style="color: #20794D;">-</span><span class="ch" style="color: #20794D;">\U0001f937</span><span class="st" style="color: #20794D;">"</span></span>
<span id="cb22-14">                               <span class="st" style="color: #20794D;">u"</span><span class="ch" style="color: #20794D;">\U00010000</span><span class="st" style="color: #20794D;">-</span><span class="ch" style="color: #20794D;">\U0010ffff</span><span class="st" style="color: #20794D;">"</span></span>
<span id="cb22-15">                               <span class="st" style="color: #20794D;">u"</span><span class="ch" style="color: #20794D;">\u2640</span><span class="st" style="color: #20794D;">-</span><span class="ch" style="color: #20794D;">\u2642</span><span class="st" style="color: #20794D;">"</span></span>
<span id="cb22-16">                               <span class="st" style="color: #20794D;">u"</span><span class="ch" style="color: #20794D;">\u2600</span><span class="st" style="color: #20794D;">-</span><span class="ch" style="color: #20794D;">\u2B55</span><span class="st" style="color: #20794D;">"</span></span>
<span id="cb22-17">                               <span class="st" style="color: #20794D;">u"</span><span class="ch" style="color: #20794D;">\u200d</span><span class="st" style="color: #20794D;">"</span></span>
<span id="cb22-18">                               <span class="st" style="color: #20794D;">u"</span><span class="ch" style="color: #20794D;">\u23cf</span><span class="st" style="color: #20794D;">"</span></span>
<span id="cb22-19">                               <span class="st" style="color: #20794D;">u"</span><span class="ch" style="color: #20794D;">\u23e9</span><span class="st" style="color: #20794D;">"</span></span>
<span id="cb22-20">                               <span class="st" style="color: #20794D;">u"</span><span class="ch" style="color: #20794D;">\u231a</span><span class="st" style="color: #20794D;">"</span></span>
<span id="cb22-21">                               <span class="st" style="color: #20794D;">u"</span><span class="ch" style="color: #20794D;">\ufe0f</span><span class="st" style="color: #20794D;">"</span>  <span class="co" style="color: #5E5E5E;"># dingbats</span></span>
<span id="cb22-22">                               <span class="st" style="color: #20794D;">u"</span><span class="ch" style="color: #20794D;">\u3030</span><span class="st" style="color: #20794D;">"</span></span>
<span id="cb22-23">                               <span class="st" style="color: #20794D;">"]+"</span>, flags<span class="op" style="color: #5E5E5E;">=</span>re.UNICODE)</span>
<span id="cb22-24">    <span class="cf" style="color: #003B4F;">return</span> emoji_pattern.sub(<span class="vs" style="color: #20794D;">r''</span>, text)</span></code></pre></div>
</details>
</div>
<div class="cell" data-execution_count="127">
<div class="sourceCode cell-code" id="cb23" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb23-1">text <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">"game is on 🔥🔥. Hilarious😂"</span></span>
<span id="cb23-2">remove_emoji(text)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="127">
<pre><code>'game is on . Hilarious'</code></pre>
</div>
</div>
<div class="cell" data-execution_count="128">
<div class="sourceCode cell-code" id="cb25" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb25-1"><span class="co" style="color: #5E5E5E;"># Remove emoji's from text</span></span>
<span id="cb25-2">df.text <span class="op" style="color: #5E5E5E;">=</span> df.text.<span class="bu" style="color: null;">apply</span>(<span class="kw" style="color: #003B4F;">lambda</span> x: remove_emoji(x))</span></code></pre></div>
</div>
</section>
<section id="emoticons" class="level3">
<h3 class="anchored" data-anchor-id="emoticons">Emoticons</h3>
<p>Emoji’s and Emoticons are different. Yes!!<br> Emoticons are used to express facial expressions using keyboard characters such as letters, numbers, and pucntuation marks. Where emjoi’s are small images.</p>
<p>Thanks to <a href="https://github.com/NeelShah18/emot/blob/master/emot/emo_unicode.py">Neel Shah</a> for curating a dictionary of emoticons and their description. We shall use this dictionary and remove the emoticons from our text.</p>
<div class="cell" data-execution_count="143">
<details>
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb26" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb26-1">EMOTICONS <span class="op" style="color: #5E5E5E;">=</span> {</span>
<span id="cb26-2">    <span class="st" style="color: #20794D;">u":‑\)"</span>: <span class="st" style="color: #20794D;">"Happy face or smiley"</span>,</span>
<span id="cb26-3">    <span class="st" style="color: #20794D;">u":\)"</span>: <span class="st" style="color: #20794D;">"Happy face or smiley"</span>,</span>
<span id="cb26-4">    <span class="st" style="color: #20794D;">u":-\]"</span>: <span class="st" style="color: #20794D;">"Happy face or smiley"</span>,</span>
<span id="cb26-5">    <span class="st" style="color: #20794D;">u":\]"</span>: <span class="st" style="color: #20794D;">"Happy face or smiley"</span>,</span>
<span id="cb26-6">    <span class="st" style="color: #20794D;">u":-3"</span>: <span class="st" style="color: #20794D;">"Happy face smiley"</span>,</span>
<span id="cb26-7">    <span class="st" style="color: #20794D;">u":3"</span>: <span class="st" style="color: #20794D;">"Happy face smiley"</span>,</span>
<span id="cb26-8">    <span class="st" style="color: #20794D;">u":-&gt;"</span>: <span class="st" style="color: #20794D;">"Happy face smiley"</span>,</span>
<span id="cb26-9">    <span class="st" style="color: #20794D;">u":&gt;"</span>: <span class="st" style="color: #20794D;">"Happy face smiley"</span>,</span>
<span id="cb26-10">    <span class="st" style="color: #20794D;">u"8-\)"</span>: <span class="st" style="color: #20794D;">"Happy face smiley"</span>,</span>
<span id="cb26-11">    <span class="st" style="color: #20794D;">u":o\)"</span>: <span class="st" style="color: #20794D;">"Happy face smiley"</span>,</span>
<span id="cb26-12">    <span class="st" style="color: #20794D;">u":-\}"</span>: <span class="st" style="color: #20794D;">"Happy face smiley"</span>,</span>
<span id="cb26-13">    <span class="st" style="color: #20794D;">u":\}"</span>: <span class="st" style="color: #20794D;">"Happy face smiley"</span>,</span>
<span id="cb26-14">    <span class="st" style="color: #20794D;">u":-\)"</span>: <span class="st" style="color: #20794D;">"Happy face smiley"</span>,</span>
<span id="cb26-15">    <span class="st" style="color: #20794D;">u":c\)"</span>: <span class="st" style="color: #20794D;">"Happy face smiley"</span>,</span>
<span id="cb26-16">    <span class="st" style="color: #20794D;">u":\^\)"</span>: <span class="st" style="color: #20794D;">"Happy face smiley"</span>,</span>
<span id="cb26-17">    <span class="st" style="color: #20794D;">u"=\]"</span>: <span class="st" style="color: #20794D;">"Happy face smiley"</span>,</span>
<span id="cb26-18">    <span class="st" style="color: #20794D;">u"=\)"</span>: <span class="st" style="color: #20794D;">"Happy face smiley"</span>,</span>
<span id="cb26-19">    <span class="st" style="color: #20794D;">u":‑D"</span>: <span class="st" style="color: #20794D;">"Laughing, big grin or laugh with glasses"</span>,</span>
<span id="cb26-20">    <span class="st" style="color: #20794D;">u":D"</span>: <span class="st" style="color: #20794D;">"Laughing, big grin or laugh with glasses"</span>,</span>
<span id="cb26-21">    <span class="st" style="color: #20794D;">u"8‑D"</span>: <span class="st" style="color: #20794D;">"Laughing, big grin or laugh with glasses"</span>,</span>
<span id="cb26-22">    <span class="st" style="color: #20794D;">u"8D"</span>: <span class="st" style="color: #20794D;">"Laughing, big grin or laugh with glasses"</span>,</span>
<span id="cb26-23">    <span class="st" style="color: #20794D;">u"X‑D"</span>: <span class="st" style="color: #20794D;">"Laughing, big grin or laugh with glasses"</span>,</span>
<span id="cb26-24">    <span class="st" style="color: #20794D;">u"XD"</span>: <span class="st" style="color: #20794D;">"Laughing, big grin or laugh with glasses"</span>,</span>
<span id="cb26-25">    <span class="st" style="color: #20794D;">u"=D"</span>: <span class="st" style="color: #20794D;">"Laughing, big grin or laugh with glasses"</span>,</span>
<span id="cb26-26">    <span class="st" style="color: #20794D;">u"=3"</span>: <span class="st" style="color: #20794D;">"Laughing, big grin or laugh with glasses"</span>,</span>
<span id="cb26-27">    <span class="st" style="color: #20794D;">u"B\^D"</span>: <span class="st" style="color: #20794D;">"Laughing, big grin or laugh with glasses"</span>,</span>
<span id="cb26-28">    <span class="st" style="color: #20794D;">u":-\)\)"</span>: <span class="st" style="color: #20794D;">"Very happy"</span>,</span>
<span id="cb26-29">    <span class="st" style="color: #20794D;">u":‑\("</span>: <span class="st" style="color: #20794D;">"Frown, sad, andry or pouting"</span>,</span>
<span id="cb26-30">    <span class="st" style="color: #20794D;">u":-\("</span>: <span class="st" style="color: #20794D;">"Frown, sad, andry or pouting"</span>,</span>
<span id="cb26-31">    <span class="st" style="color: #20794D;">u":\("</span>: <span class="st" style="color: #20794D;">"Frown, sad, andry or pouting"</span>,</span>
<span id="cb26-32">    <span class="st" style="color: #20794D;">u":‑c"</span>: <span class="st" style="color: #20794D;">"Frown, sad, andry or pouting"</span>,</span>
<span id="cb26-33">    <span class="st" style="color: #20794D;">u":c"</span>: <span class="st" style="color: #20794D;">"Frown, sad, andry or pouting"</span>,</span>
<span id="cb26-34">    <span class="st" style="color: #20794D;">u":‑&lt;"</span>: <span class="st" style="color: #20794D;">"Frown, sad, andry or pouting"</span>,</span>
<span id="cb26-35">    <span class="st" style="color: #20794D;">u":&lt;"</span>: <span class="st" style="color: #20794D;">"Frown, sad, andry or pouting"</span>,</span>
<span id="cb26-36">    <span class="st" style="color: #20794D;">u":‑\["</span>: <span class="st" style="color: #20794D;">"Frown, sad, andry or pouting"</span>,</span>
<span id="cb26-37">    <span class="st" style="color: #20794D;">u":\["</span>: <span class="st" style="color: #20794D;">"Frown, sad, andry or pouting"</span>,</span>
<span id="cb26-38">    <span class="st" style="color: #20794D;">u":-\|\|"</span>: <span class="st" style="color: #20794D;">"Frown, sad, andry or pouting"</span>,</span>
<span id="cb26-39">    <span class="st" style="color: #20794D;">u"&gt;:\["</span>: <span class="st" style="color: #20794D;">"Frown, sad, andry or pouting"</span>,</span>
<span id="cb26-40">    <span class="st" style="color: #20794D;">u":\{"</span>: <span class="st" style="color: #20794D;">"Frown, sad, andry or pouting"</span>,</span>
<span id="cb26-41">    <span class="st" style="color: #20794D;">u":@"</span>: <span class="st" style="color: #20794D;">"Frown, sad, andry or pouting"</span>,</span>
<span id="cb26-42">    <span class="st" style="color: #20794D;">u"&gt;:\("</span>: <span class="st" style="color: #20794D;">"Frown, sad, andry or pouting"</span>,</span>
<span id="cb26-43">    <span class="st" style="color: #20794D;">u":'‑\("</span>: <span class="st" style="color: #20794D;">"Crying"</span>,</span>
<span id="cb26-44">    <span class="st" style="color: #20794D;">u":'\("</span>: <span class="st" style="color: #20794D;">"Crying"</span>,</span>
<span id="cb26-45">    <span class="st" style="color: #20794D;">u":'‑\)"</span>: <span class="st" style="color: #20794D;">"Tears of happiness"</span>,</span>
<span id="cb26-46">    <span class="st" style="color: #20794D;">u":'\)"</span>: <span class="st" style="color: #20794D;">"Tears of happiness"</span>,</span>
<span id="cb26-47">    <span class="st" style="color: #20794D;">u"D‑':"</span>: <span class="st" style="color: #20794D;">"Horror"</span>,</span>
<span id="cb26-48">    <span class="st" style="color: #20794D;">u"D:&lt;"</span>: <span class="st" style="color: #20794D;">"Disgust"</span>,</span>
<span id="cb26-49">    <span class="st" style="color: #20794D;">u"D:"</span>: <span class="st" style="color: #20794D;">"Sadness"</span>,</span>
<span id="cb26-50">    <span class="st" style="color: #20794D;">u"D8"</span>: <span class="st" style="color: #20794D;">"Great dismay"</span>,</span>
<span id="cb26-51">    <span class="st" style="color: #20794D;">u"D;"</span>: <span class="st" style="color: #20794D;">"Great dismay"</span>,</span>
<span id="cb26-52">    <span class="st" style="color: #20794D;">u"D="</span>: <span class="st" style="color: #20794D;">"Great dismay"</span>,</span>
<span id="cb26-53">    <span class="st" style="color: #20794D;">u"DX"</span>: <span class="st" style="color: #20794D;">"Great dismay"</span>,</span>
<span id="cb26-54">    <span class="st" style="color: #20794D;">u":‑O"</span>: <span class="st" style="color: #20794D;">"Surprise"</span>,</span>
<span id="cb26-55">    <span class="st" style="color: #20794D;">u":O"</span>: <span class="st" style="color: #20794D;">"Surprise"</span>,</span>
<span id="cb26-56">    <span class="st" style="color: #20794D;">u":‑o"</span>: <span class="st" style="color: #20794D;">"Surprise"</span>,</span>
<span id="cb26-57">    <span class="st" style="color: #20794D;">u":o"</span>: <span class="st" style="color: #20794D;">"Surprise"</span>,</span>
<span id="cb26-58">    <span class="st" style="color: #20794D;">u":-0"</span>: <span class="st" style="color: #20794D;">"Shock"</span>,</span>
<span id="cb26-59">    <span class="st" style="color: #20794D;">u"8‑0"</span>: <span class="st" style="color: #20794D;">"Yawn"</span>,</span>
<span id="cb26-60">    <span class="st" style="color: #20794D;">u"&gt;:O"</span>: <span class="st" style="color: #20794D;">"Yawn"</span>,</span>
<span id="cb26-61">    <span class="st" style="color: #20794D;">u":-\*"</span>: <span class="st" style="color: #20794D;">"Kiss"</span>,</span>
<span id="cb26-62">    <span class="st" style="color: #20794D;">u":\*"</span>: <span class="st" style="color: #20794D;">"Kiss"</span>,</span>
<span id="cb26-63">    <span class="st" style="color: #20794D;">u":X"</span>: <span class="st" style="color: #20794D;">"Kiss"</span>,</span>
<span id="cb26-64">    <span class="st" style="color: #20794D;">u";‑\)"</span>: <span class="st" style="color: #20794D;">"Wink or smirk"</span>,</span>
<span id="cb26-65">    <span class="st" style="color: #20794D;">u";\)"</span>: <span class="st" style="color: #20794D;">"Wink or smirk"</span>,</span>
<span id="cb26-66">    <span class="st" style="color: #20794D;">u"\*-\)"</span>: <span class="st" style="color: #20794D;">"Wink or smirk"</span>,</span>
<span id="cb26-67">    <span class="st" style="color: #20794D;">u"\*\)"</span>: <span class="st" style="color: #20794D;">"Wink or smirk"</span>,</span>
<span id="cb26-68">    <span class="st" style="color: #20794D;">u";‑\]"</span>: <span class="st" style="color: #20794D;">"Wink or smirk"</span>,</span>
<span id="cb26-69">    <span class="st" style="color: #20794D;">u";\]"</span>: <span class="st" style="color: #20794D;">"Wink or smirk"</span>,</span>
<span id="cb26-70">    <span class="st" style="color: #20794D;">u";\^\)"</span>: <span class="st" style="color: #20794D;">"Wink or smirk"</span>,</span>
<span id="cb26-71">    <span class="st" style="color: #20794D;">u":‑,"</span>: <span class="st" style="color: #20794D;">"Wink or smirk"</span>,</span>
<span id="cb26-72">    <span class="st" style="color: #20794D;">u";D"</span>: <span class="st" style="color: #20794D;">"Wink or smirk"</span>,</span>
<span id="cb26-73">    <span class="st" style="color: #20794D;">u":‑P"</span>: <span class="st" style="color: #20794D;">"Tongue sticking out, cheeky, playful or blowing a raspberry"</span>,</span>
<span id="cb26-74">    <span class="st" style="color: #20794D;">u":P"</span>: <span class="st" style="color: #20794D;">"Tongue sticking out, cheeky, playful or blowing a raspberry"</span>,</span>
<span id="cb26-75">    <span class="st" style="color: #20794D;">u"X‑P"</span>: <span class="st" style="color: #20794D;">"Tongue sticking out, cheeky, playful or blowing a raspberry"</span>,</span>
<span id="cb26-76">    <span class="st" style="color: #20794D;">u"XP"</span>: <span class="st" style="color: #20794D;">"Tongue sticking out, cheeky, playful or blowing a raspberry"</span>,</span>
<span id="cb26-77">    <span class="st" style="color: #20794D;">u":‑Þ"</span>: <span class="st" style="color: #20794D;">"Tongue sticking out, cheeky, playful or blowing a raspberry"</span>,</span>
<span id="cb26-78">    <span class="st" style="color: #20794D;">u":Þ"</span>: <span class="st" style="color: #20794D;">"Tongue sticking out, cheeky, playful or blowing a raspberry"</span>,</span>
<span id="cb26-79">    <span class="st" style="color: #20794D;">u":b"</span>: <span class="st" style="color: #20794D;">"Tongue sticking out, cheeky, playful or blowing a raspberry"</span>,</span>
<span id="cb26-80">    <span class="st" style="color: #20794D;">u"d:"</span>: <span class="st" style="color: #20794D;">"Tongue sticking out, cheeky, playful or blowing a raspberry"</span>,</span>
<span id="cb26-81">    <span class="st" style="color: #20794D;">u"=p"</span>: <span class="st" style="color: #20794D;">"Tongue sticking out, cheeky, playful or blowing a raspberry"</span>,</span>
<span id="cb26-82">    <span class="st" style="color: #20794D;">u"&gt;:P"</span>: <span class="st" style="color: #20794D;">"Tongue sticking out, cheeky, playful or blowing a raspberry"</span>,</span>
<span id="cb26-83">    <span class="st" style="color: #20794D;">u":‑/"</span>: <span class="st" style="color: #20794D;">"Skeptical, annoyed, undecided, uneasy or hesitant"</span>,</span>
<span id="cb26-84">    <span class="st" style="color: #20794D;">u":/"</span>: <span class="st" style="color: #20794D;">"Skeptical, annoyed, undecided, uneasy or hesitant"</span>,</span>
<span id="cb26-85">    <span class="st" style="color: #20794D;">u":-[.]"</span>: <span class="st" style="color: #20794D;">"Skeptical, annoyed, undecided, uneasy or hesitant"</span>,</span>
<span id="cb26-86">    <span class="st" style="color: #20794D;">u"&gt;:[(</span><span class="ch" style="color: #20794D;">\\</span><span class="st" style="color: #20794D;">\)]"</span>: <span class="st" style="color: #20794D;">"Skeptical, annoyed, undecided, uneasy or hesitant"</span>,</span>
<span id="cb26-87">    <span class="st" style="color: #20794D;">u"&gt;:/"</span>: <span class="st" style="color: #20794D;">"Skeptical, annoyed, undecided, uneasy or hesitant"</span>,</span>
<span id="cb26-88">    <span class="st" style="color: #20794D;">u":[(</span><span class="ch" style="color: #20794D;">\\</span><span class="st" style="color: #20794D;">\)]"</span>: <span class="st" style="color: #20794D;">"Skeptical, annoyed, undecided, uneasy or hesitant"</span>,</span>
<span id="cb26-89">    <span class="st" style="color: #20794D;">u"=/"</span>: <span class="st" style="color: #20794D;">"Skeptical, annoyed, undecided, uneasy or hesitant"</span>,</span>
<span id="cb26-90">    <span class="st" style="color: #20794D;">u"=[(</span><span class="ch" style="color: #20794D;">\\</span><span class="st" style="color: #20794D;">\)]"</span>: <span class="st" style="color: #20794D;">"Skeptical, annoyed, undecided, uneasy or hesitant"</span>,</span>
<span id="cb26-91">    <span class="st" style="color: #20794D;">u":L"</span>: <span class="st" style="color: #20794D;">"Skeptical, annoyed, undecided, uneasy or hesitant"</span>,</span>
<span id="cb26-92">    <span class="st" style="color: #20794D;">u"=L"</span>: <span class="st" style="color: #20794D;">"Skeptical, annoyed, undecided, uneasy or hesitant"</span>,</span>
<span id="cb26-93">    <span class="st" style="color: #20794D;">u":S"</span>: <span class="st" style="color: #20794D;">"Skeptical, annoyed, undecided, uneasy or hesitant"</span>,</span>
<span id="cb26-94">    <span class="st" style="color: #20794D;">u":‑\|"</span>: <span class="st" style="color: #20794D;">"Straight face"</span>,</span>
<span id="cb26-95">    <span class="st" style="color: #20794D;">u":\|"</span>: <span class="st" style="color: #20794D;">"Straight face"</span>,</span>
<span id="cb26-96">    <span class="st" style="color: #20794D;">u":$"</span>: <span class="st" style="color: #20794D;">"Embarrassed or blushing"</span>,</span>
<span id="cb26-97">    <span class="st" style="color: #20794D;">u":‑x"</span>: <span class="st" style="color: #20794D;">"Sealed lips or wearing braces or tongue-tied"</span>,</span>
<span id="cb26-98">    <span class="st" style="color: #20794D;">u":x"</span>: <span class="st" style="color: #20794D;">"Sealed lips or wearing braces or tongue-tied"</span>,</span>
<span id="cb26-99">    <span class="st" style="color: #20794D;">u":‑#"</span>: <span class="st" style="color: #20794D;">"Sealed lips or wearing braces or tongue-tied"</span>,</span>
<span id="cb26-100">    <span class="st" style="color: #20794D;">u":#"</span>: <span class="st" style="color: #20794D;">"Sealed lips or wearing braces or tongue-tied"</span>,</span>
<span id="cb26-101">    <span class="st" style="color: #20794D;">u":‑&amp;"</span>: <span class="st" style="color: #20794D;">"Sealed lips or wearing braces or tongue-tied"</span>,</span>
<span id="cb26-102">    <span class="st" style="color: #20794D;">u":&amp;"</span>: <span class="st" style="color: #20794D;">"Sealed lips or wearing braces or tongue-tied"</span>,</span>
<span id="cb26-103">    <span class="st" style="color: #20794D;">u"O:‑\)"</span>: <span class="st" style="color: #20794D;">"Angel, saint or innocent"</span>,</span>
<span id="cb26-104">    <span class="st" style="color: #20794D;">u"O:\)"</span>: <span class="st" style="color: #20794D;">"Angel, saint or innocent"</span>,</span>
<span id="cb26-105">    <span class="st" style="color: #20794D;">u"0:‑3"</span>: <span class="st" style="color: #20794D;">"Angel, saint or innocent"</span>,</span>
<span id="cb26-106">    <span class="st" style="color: #20794D;">u"0:3"</span>: <span class="st" style="color: #20794D;">"Angel, saint or innocent"</span>,</span>
<span id="cb26-107">    <span class="st" style="color: #20794D;">u"0:‑\)"</span>: <span class="st" style="color: #20794D;">"Angel, saint or innocent"</span>,</span>
<span id="cb26-108">    <span class="st" style="color: #20794D;">u"0:\)"</span>: <span class="st" style="color: #20794D;">"Angel, saint or innocent"</span>,</span>
<span id="cb26-109">    <span class="st" style="color: #20794D;">u":‑b"</span>: <span class="st" style="color: #20794D;">"Tongue sticking out, cheeky, playful or blowing a raspberry"</span>,</span>
<span id="cb26-110">    <span class="st" style="color: #20794D;">u"0;\^\)"</span>: <span class="st" style="color: #20794D;">"Angel, saint or innocent"</span>,</span>
<span id="cb26-111">    <span class="st" style="color: #20794D;">u"&gt;:‑\)"</span>: <span class="st" style="color: #20794D;">"Evil or devilish"</span>,</span>
<span id="cb26-112">    <span class="st" style="color: #20794D;">u"&gt;:\)"</span>: <span class="st" style="color: #20794D;">"Evil or devilish"</span>,</span>
<span id="cb26-113">    <span class="st" style="color: #20794D;">u"\}:‑\)"</span>: <span class="st" style="color: #20794D;">"Evil or devilish"</span>,</span>
<span id="cb26-114">    <span class="st" style="color: #20794D;">u"\}:\)"</span>: <span class="st" style="color: #20794D;">"Evil or devilish"</span>,</span>
<span id="cb26-115">    <span class="st" style="color: #20794D;">u"3:‑\)"</span>: <span class="st" style="color: #20794D;">"Evil or devilish"</span>,</span>
<span id="cb26-116">    <span class="st" style="color: #20794D;">u"3:\)"</span>: <span class="st" style="color: #20794D;">"Evil or devilish"</span>,</span>
<span id="cb26-117">    <span class="st" style="color: #20794D;">u"&gt;;\)"</span>: <span class="st" style="color: #20794D;">"Evil or devilish"</span>,</span>
<span id="cb26-118">    <span class="st" style="color: #20794D;">u"\|;‑\)"</span>: <span class="st" style="color: #20794D;">"Cool"</span>,</span>
<span id="cb26-119">    <span class="st" style="color: #20794D;">u"\|‑O"</span>: <span class="st" style="color: #20794D;">"Bored"</span>,</span>
<span id="cb26-120">    <span class="st" style="color: #20794D;">u":‑J"</span>: <span class="st" style="color: #20794D;">"Tongue-in-cheek"</span>,</span>
<span id="cb26-121">    <span class="st" style="color: #20794D;">u"#‑\)"</span>: <span class="st" style="color: #20794D;">"Party all night"</span>,</span>
<span id="cb26-122">    <span class="st" style="color: #20794D;">u"%‑\)"</span>: <span class="st" style="color: #20794D;">"Drunk or confused"</span>,</span>
<span id="cb26-123">    <span class="st" style="color: #20794D;">u"%\)"</span>: <span class="st" style="color: #20794D;">"Drunk or confused"</span>,</span>
<span id="cb26-124">    <span class="st" style="color: #20794D;">u":-###.."</span>: <span class="st" style="color: #20794D;">"Being sick"</span>,</span>
<span id="cb26-125">    <span class="st" style="color: #20794D;">u":###.."</span>: <span class="st" style="color: #20794D;">"Being sick"</span>,</span>
<span id="cb26-126">    <span class="st" style="color: #20794D;">u"&lt;:‑\|"</span>: <span class="st" style="color: #20794D;">"Dump"</span>,</span>
<span id="cb26-127">    <span class="st" style="color: #20794D;">u"\(&gt;_&lt;\)"</span>: <span class="st" style="color: #20794D;">"Troubled"</span>,</span>
<span id="cb26-128">    <span class="st" style="color: #20794D;">u"\(&gt;_&lt;\)&gt;"</span>: <span class="st" style="color: #20794D;">"Troubled"</span>,</span>
<span id="cb26-129">    <span class="st" style="color: #20794D;">u"\(';'\)"</span>: <span class="st" style="color: #20794D;">"Baby"</span>,</span>
<span id="cb26-130">    <span class="st" style="color: #20794D;">u"\(\^\^&gt;``"</span>: <span class="st" style="color: #20794D;">"Nervous or Embarrassed or Troubled or Shy or Sweat drop"</span>,</span>
<span id="cb26-131">    <span class="st" style="color: #20794D;">u"\(\^_\^;\)"</span>: <span class="st" style="color: #20794D;">"Nervous or Embarrassed or Troubled or Shy or Sweat drop"</span>,</span>
<span id="cb26-132">    <span class="st" style="color: #20794D;">u"\(-_-;\)"</span>: <span class="st" style="color: #20794D;">"Nervous or Embarrassed or Troubled or Shy or Sweat drop"</span>,</span>
<span id="cb26-133">    <span class="st" style="color: #20794D;">u"\(~_~;\) \(・\.・;\)"</span>: <span class="st" style="color: #20794D;">"Nervous or Embarrassed or Troubled or Shy or Sweat drop"</span>,</span>
<span id="cb26-134">    <span class="st" style="color: #20794D;">u"\(-_-\)zzz"</span>: <span class="st" style="color: #20794D;">"Sleeping"</span>,</span>
<span id="cb26-135">    <span class="st" style="color: #20794D;">u"\(\^_-\)"</span>: <span class="st" style="color: #20794D;">"Wink"</span>,</span>
<span id="cb26-136">    <span class="st" style="color: #20794D;">u"\(\(\+_\+\)\)"</span>: <span class="st" style="color: #20794D;">"Confused"</span>,</span>
<span id="cb26-137">    <span class="st" style="color: #20794D;">u"\(\+o\+\)"</span>: <span class="st" style="color: #20794D;">"Confused"</span>,</span>
<span id="cb26-138">    <span class="st" style="color: #20794D;">u"\(o\|o\)"</span>: <span class="st" style="color: #20794D;">"Ultraman"</span>,</span>
<span id="cb26-139">    <span class="st" style="color: #20794D;">u"\^_\^"</span>: <span class="st" style="color: #20794D;">"Joyful"</span>,</span>
<span id="cb26-140">    <span class="st" style="color: #20794D;">u"\(\^_\^\)/"</span>: <span class="st" style="color: #20794D;">"Joyful"</span>,</span>
<span id="cb26-141">    <span class="st" style="color: #20794D;">u"\(\^O\^\)／"</span>: <span class="st" style="color: #20794D;">"Joyful"</span>,</span>
<span id="cb26-142">    <span class="st" style="color: #20794D;">u"\(\^o\^\)／"</span>: <span class="st" style="color: #20794D;">"Joyful"</span>,</span>
<span id="cb26-143">    <span class="st" style="color: #20794D;">u"\(__\)"</span>: <span class="st" style="color: #20794D;">"Kowtow as a sign of respect, or dogeza for apology"</span>,</span>
<span id="cb26-144">    <span class="st" style="color: #20794D;">u"_\(\._\.\)_"</span>: <span class="st" style="color: #20794D;">"Kowtow as a sign of respect, or dogeza for apology"</span>,</span>
<span id="cb26-145">    <span class="st" style="color: #20794D;">u"&lt;\(_ _\)&gt;"</span>: <span class="st" style="color: #20794D;">"Kowtow as a sign of respect, or dogeza for apology"</span>,</span>
<span id="cb26-146">    <span class="st" style="color: #20794D;">u"&lt;m\(__\)m&gt;"</span>: <span class="st" style="color: #20794D;">"Kowtow as a sign of respect, or dogeza for apology"</span>,</span>
<span id="cb26-147">    <span class="st" style="color: #20794D;">u"m\(__\)m"</span>: <span class="st" style="color: #20794D;">"Kowtow as a sign of respect, or dogeza for apology"</span>,</span>
<span id="cb26-148">    <span class="st" style="color: #20794D;">u"m\(_ _\)m"</span>: <span class="st" style="color: #20794D;">"Kowtow as a sign of respect, or dogeza for apology"</span>,</span>
<span id="cb26-149">    <span class="st" style="color: #20794D;">u"\('_'\)"</span>: <span class="st" style="color: #20794D;">"Sad or Crying"</span>,</span>
<span id="cb26-150">    <span class="st" style="color: #20794D;">u"\(/_;\)"</span>: <span class="st" style="color: #20794D;">"Sad or Crying"</span>,</span>
<span id="cb26-151">    <span class="st" style="color: #20794D;">u"\(T_T\) \(;_;\)"</span>: <span class="st" style="color: #20794D;">"Sad or Crying"</span>,</span>
<span id="cb26-152">    <span class="st" style="color: #20794D;">u"\(;_;"</span>: <span class="st" style="color: #20794D;">"Sad of Crying"</span>,</span>
<span id="cb26-153">    <span class="st" style="color: #20794D;">u"\(;_:\)"</span>: <span class="st" style="color: #20794D;">"Sad or Crying"</span>,</span>
<span id="cb26-154">    <span class="st" style="color: #20794D;">u"\(;O;\)"</span>: <span class="st" style="color: #20794D;">"Sad or Crying"</span>,</span>
<span id="cb26-155">    <span class="st" style="color: #20794D;">u"\(:_;\)"</span>: <span class="st" style="color: #20794D;">"Sad or Crying"</span>,</span>
<span id="cb26-156">    <span class="st" style="color: #20794D;">u"\(ToT\)"</span>: <span class="st" style="color: #20794D;">"Sad or Crying"</span>,</span>
<span id="cb26-157">    <span class="st" style="color: #20794D;">u";_;"</span>: <span class="st" style="color: #20794D;">"Sad or Crying"</span>,</span>
<span id="cb26-158">    <span class="st" style="color: #20794D;">u";-;"</span>: <span class="st" style="color: #20794D;">"Sad or Crying"</span>,</span>
<span id="cb26-159">    <span class="st" style="color: #20794D;">u";n;"</span>: <span class="st" style="color: #20794D;">"Sad or Crying"</span>,</span>
<span id="cb26-160">    <span class="st" style="color: #20794D;">u";;"</span>: <span class="st" style="color: #20794D;">"Sad or Crying"</span>,</span>
<span id="cb26-161">    <span class="st" style="color: #20794D;">u"Q\.Q"</span>: <span class="st" style="color: #20794D;">"Sad or Crying"</span>,</span>
<span id="cb26-162">    <span class="st" style="color: #20794D;">u"T\.T"</span>: <span class="st" style="color: #20794D;">"Sad or Crying"</span>,</span>
<span id="cb26-163">    <span class="st" style="color: #20794D;">u"QQ"</span>: <span class="st" style="color: #20794D;">"Sad or Crying"</span>,</span>
<span id="cb26-164">    <span class="st" style="color: #20794D;">u"Q_Q"</span>: <span class="st" style="color: #20794D;">"Sad or Crying"</span>,</span>
<span id="cb26-165">    <span class="st" style="color: #20794D;">u"\(-\.-\)"</span>: <span class="st" style="color: #20794D;">"Shame"</span>,</span>
<span id="cb26-166">    <span class="st" style="color: #20794D;">u"\(-_-\)"</span>: <span class="st" style="color: #20794D;">"Shame"</span>,</span>
<span id="cb26-167">    <span class="st" style="color: #20794D;">u"\(一一\)"</span>: <span class="st" style="color: #20794D;">"Shame"</span>,</span>
<span id="cb26-168">    <span class="st" style="color: #20794D;">u"\(；一_一\)"</span>: <span class="st" style="color: #20794D;">"Shame"</span>,</span>
<span id="cb26-169">    <span class="st" style="color: #20794D;">u"\(=_=\)"</span>: <span class="st" style="color: #20794D;">"Tired"</span>,</span>
<span id="cb26-170">    <span class="st" style="color: #20794D;">u"\(=\^\·\^=\)"</span>: <span class="st" style="color: #20794D;">"cat"</span>,</span>
<span id="cb26-171">    <span class="st" style="color: #20794D;">u"\(=\^\·\·\^=\)"</span>: <span class="st" style="color: #20794D;">"cat"</span>,</span>
<span id="cb26-172">    <span class="st" style="color: #20794D;">u"=_\^= "</span>: <span class="st" style="color: #20794D;">"cat"</span>,</span>
<span id="cb26-173">    <span class="st" style="color: #20794D;">u"\(\.\.\)"</span>: <span class="st" style="color: #20794D;">"Looking down"</span>,</span>
<span id="cb26-174">    <span class="st" style="color: #20794D;">u"\(\._\.\)"</span>: <span class="st" style="color: #20794D;">"Looking down"</span>,</span>
<span id="cb26-175">    <span class="st" style="color: #20794D;">u"\^m\^"</span>: <span class="st" style="color: #20794D;">"Giggling with hand covering mouth"</span>,</span>
<span id="cb26-176">    <span class="st" style="color: #20794D;">u"\(\・\・?"</span>: <span class="st" style="color: #20794D;">"Confusion"</span>,</span>
<span id="cb26-177">    <span class="st" style="color: #20794D;">u"\(?_?\)"</span>: <span class="st" style="color: #20794D;">"Confusion"</span>,</span>
<span id="cb26-178">    <span class="st" style="color: #20794D;">u"&gt;\^_\^&lt;"</span>: <span class="st" style="color: #20794D;">"Normal Laugh"</span>,</span>
<span id="cb26-179">    <span class="st" style="color: #20794D;">u"&lt;\^!\^&gt;"</span>: <span class="st" style="color: #20794D;">"Normal Laugh"</span>,</span>
<span id="cb26-180">    <span class="st" style="color: #20794D;">u"\^/\^"</span>: <span class="st" style="color: #20794D;">"Normal Laugh"</span>,</span>
<span id="cb26-181">    <span class="st" style="color: #20794D;">u"\（\*\^_\^\*）"</span>: <span class="st" style="color: #20794D;">"Normal Laugh"</span>,</span>
<span id="cb26-182">    <span class="st" style="color: #20794D;">u"\(\^&lt;\^\) \(\^\.\^\)"</span>: <span class="st" style="color: #20794D;">"Normal Laugh"</span>,</span>
<span id="cb26-183">    <span class="st" style="color: #20794D;">u"\(^\^\)"</span>: <span class="st" style="color: #20794D;">"Normal Laugh"</span>,</span>
<span id="cb26-184">    <span class="st" style="color: #20794D;">u"\(\^\.\^\)"</span>: <span class="st" style="color: #20794D;">"Normal Laugh"</span>,</span>
<span id="cb26-185">    <span class="st" style="color: #20794D;">u"\(\^_\^\.\)"</span>: <span class="st" style="color: #20794D;">"Normal Laugh"</span>,</span>
<span id="cb26-186">    <span class="st" style="color: #20794D;">u"\(\^_\^\)"</span>: <span class="st" style="color: #20794D;">"Normal Laugh"</span>,</span>
<span id="cb26-187">    <span class="st" style="color: #20794D;">u"\(\^\^\)"</span>: <span class="st" style="color: #20794D;">"Normal Laugh"</span>,</span>
<span id="cb26-188">    <span class="st" style="color: #20794D;">u"\(\^J\^\)"</span>: <span class="st" style="color: #20794D;">"Normal Laugh"</span>,</span>
<span id="cb26-189">    <span class="st" style="color: #20794D;">u"\(\*\^\.\^\*\)"</span>: <span class="st" style="color: #20794D;">"Normal Laugh"</span>,</span>
<span id="cb26-190">    <span class="st" style="color: #20794D;">u"\(\^—\^\）"</span>: <span class="st" style="color: #20794D;">"Normal Laugh"</span>,</span>
<span id="cb26-191">    <span class="st" style="color: #20794D;">u"\(#\^\.\^#\)"</span>: <span class="st" style="color: #20794D;">"Normal Laugh"</span>,</span>
<span id="cb26-192">    <span class="st" style="color: #20794D;">u"\（\^—\^\）"</span>: <span class="st" style="color: #20794D;">"Waving"</span>,</span>
<span id="cb26-193">    <span class="st" style="color: #20794D;">u"\(;_;\)/~~~"</span>: <span class="st" style="color: #20794D;">"Waving"</span>,</span>
<span id="cb26-194">    <span class="st" style="color: #20794D;">u"\(\^\.\^\)/~~~"</span>: <span class="st" style="color: #20794D;">"Waving"</span>,</span>
<span id="cb26-195">    <span class="st" style="color: #20794D;">u"\(-_-\)/~~~ \($\·\·\)/~~~"</span>: <span class="st" style="color: #20794D;">"Waving"</span>,</span>
<span id="cb26-196">    <span class="st" style="color: #20794D;">u"\(T_T\)/~~~"</span>: <span class="st" style="color: #20794D;">"Waving"</span>,</span>
<span id="cb26-197">    <span class="st" style="color: #20794D;">u"\(ToT\)/~~~"</span>: <span class="st" style="color: #20794D;">"Waving"</span>,</span>
<span id="cb26-198">    <span class="st" style="color: #20794D;">u"\(\*\^0\^\*\)"</span>: <span class="st" style="color: #20794D;">"Excited"</span>,</span>
<span id="cb26-199">    <span class="st" style="color: #20794D;">u"\(\*_\*\)"</span>: <span class="st" style="color: #20794D;">"Amazed"</span>,</span>
<span id="cb26-200">    <span class="st" style="color: #20794D;">u"\(\*_\*;"</span>: <span class="st" style="color: #20794D;">"Amazed"</span>,</span>
<span id="cb26-201">    <span class="st" style="color: #20794D;">u"\(\+_\+\) \(@_@\)"</span>: <span class="st" style="color: #20794D;">"Amazed"</span>,</span>
<span id="cb26-202">    <span class="st" style="color: #20794D;">u"\(\*\^\^\)v"</span>: <span class="st" style="color: #20794D;">"Laughing,Cheerful"</span>,</span>
<span id="cb26-203">    <span class="st" style="color: #20794D;">u"\(\^_\^\)v"</span>: <span class="st" style="color: #20794D;">"Laughing,Cheerful"</span>,</span>
<span id="cb26-204">    <span class="st" style="color: #20794D;">u"\(\(d[-_-]b\)\)"</span>: <span class="st" style="color: #20794D;">"Headphones,Listening to music"</span>,</span>
<span id="cb26-205">    <span class="st" style="color: #20794D;">u'\(-"-\)'</span>: <span class="st" style="color: #20794D;">"Worried"</span>,</span>
<span id="cb26-206">    <span class="st" style="color: #20794D;">u"\(ーー;\)"</span>: <span class="st" style="color: #20794D;">"Worried"</span>,</span>
<span id="cb26-207">    <span class="st" style="color: #20794D;">u"\(\^0_0\^\)"</span>: <span class="st" style="color: #20794D;">"Eyeglasses"</span>,</span>
<span id="cb26-208">    <span class="st" style="color: #20794D;">u"\(\＾ｖ\＾\)"</span>: <span class="st" style="color: #20794D;">"Happy"</span>,</span>
<span id="cb26-209">    <span class="st" style="color: #20794D;">u"\(\＾ｕ\＾\)"</span>: <span class="st" style="color: #20794D;">"Happy"</span>,</span>
<span id="cb26-210">    <span class="st" style="color: #20794D;">u"\(\^\)o\(\^\)"</span>: <span class="st" style="color: #20794D;">"Happy"</span>,</span>
<span id="cb26-211">    <span class="st" style="color: #20794D;">u"\(\^O\^\)"</span>: <span class="st" style="color: #20794D;">"Happy"</span>,</span>
<span id="cb26-212">    <span class="st" style="color: #20794D;">u"\(\^o\^\)"</span>: <span class="st" style="color: #20794D;">"Happy"</span>,</span>
<span id="cb26-213">    <span class="st" style="color: #20794D;">u"\)\^o\^\("</span>: <span class="st" style="color: #20794D;">"Happy"</span>,</span>
<span id="cb26-214">    <span class="st" style="color: #20794D;">u":O o_O"</span>: <span class="st" style="color: #20794D;">"Surprised"</span>,</span>
<span id="cb26-215">    <span class="st" style="color: #20794D;">u"o_0"</span>: <span class="st" style="color: #20794D;">"Surprised"</span>,</span>
<span id="cb26-216">    <span class="st" style="color: #20794D;">u"o\.O"</span>: <span class="st" style="color: #20794D;">"Surpised"</span>,</span>
<span id="cb26-217">    <span class="st" style="color: #20794D;">u"\(o\.o\)"</span>: <span class="st" style="color: #20794D;">"Surprised"</span>,</span>
<span id="cb26-218">    <span class="st" style="color: #20794D;">u"oO"</span>: <span class="st" style="color: #20794D;">"Surprised"</span>,</span>
<span id="cb26-219">    <span class="st" style="color: #20794D;">u"\(\*￣m￣\)"</span>: <span class="st" style="color: #20794D;">"Dissatisfied"</span>,</span>
<span id="cb26-220">    <span class="st" style="color: #20794D;">u"\(‘A`\)"</span>: <span class="st" style="color: #20794D;">"Snubbed or Deflated"</span></span>
<span id="cb26-221">}</span></code></pre></div>
</details>
</div>
<div class="cell" data-execution_count="144">
<div class="sourceCode cell-code" id="cb27" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb27-1"><span class="kw" style="color: #003B4F;">def</span> remove_emoticons(text):</span>
<span id="cb27-2">    emoticons_pattern <span class="op" style="color: #5E5E5E;">=</span> re.<span class="bu" style="color: null;">compile</span>(</span>
<span id="cb27-3">        <span class="st" style="color: #20794D;">u'('</span> <span class="op" style="color: #5E5E5E;">+</span> <span class="st" style="color: #20794D;">u'|'</span>.join(emo <span class="cf" style="color: #003B4F;">for</span> emo <span class="kw" style="color: #003B4F;">in</span> EMOTICONS) <span class="op" style="color: #5E5E5E;">+</span> <span class="st" style="color: #20794D;">u')'</span>)</span>
<span id="cb27-4">    <span class="cf" style="color: #003B4F;">return</span> emoticons_pattern.sub(<span class="vs" style="color: #20794D;">r''</span>, text)</span></code></pre></div>
</div>
<div class="cell" data-execution_count="145">
<div class="sourceCode cell-code" id="cb28" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb28-1">remove_emoticons(<span class="st" style="color: #20794D;">"Hello :-&gt;"</span>)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="145">
<pre><code>'Hello '</code></pre>
</div>
</div>
<div class="cell" data-execution_count="146">
<div class="sourceCode cell-code" id="cb30" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb30-1"><span class="co" style="color: #5E5E5E;"># Remove emoticons from text</span></span>
<span id="cb30-2">df.text <span class="op" style="color: #5E5E5E;">=</span> df.text.<span class="bu" style="color: null;">apply</span>(<span class="kw" style="color: #003B4F;">lambda</span> x: remove_emoticons(x))</span></code></pre></div>
</div>
</section>
<section id="hashtags-and-mentions" class="level3">
<h3 class="anchored" data-anchor-id="hashtags-and-mentions">Hashtags and Mentions</h3>
<p>We are habituated to use hashtags and mentions in our tweet either to indicate the context or bring attention to an individual. Hashtags can be used to extract features, to see what’s trending and in various other applications.</p>
<p>Since, we don’t require them we’ll remove them.</p>
<div class="cell" data-execution_count="147">
<div class="sourceCode cell-code" id="cb31" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb31-1"><span class="kw" style="color: #003B4F;">def</span> remove_tags_mentions(text):</span>
<span id="cb31-2">    pattern <span class="op" style="color: #5E5E5E;">=</span> re.<span class="bu" style="color: null;">compile</span>(<span class="vs" style="color: #20794D;">r'(@\S+|#\S+)'</span>)</span>
<span id="cb31-3">    <span class="cf" style="color: #003B4F;">return</span> pattern.sub(<span class="st" style="color: #20794D;">''</span>, text)</span></code></pre></div>
</div>
<div class="cell" data-execution_count="152">
<div class="sourceCode cell-code" id="cb32" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb32-1">text <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">"live @flippinginja on #younow - jonah and jareddddd"</span></span>
<span id="cb32-2">remove_tags_mentions(text)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="152">
<pre><code>'live  on  - jonah and jareddddd'</code></pre>
</div>
</div>
<div class="cell" data-execution_count="153">
<div class="sourceCode cell-code" id="cb34" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb34-1"><span class="co" style="color: #5E5E5E;"># Remove hashtags and mentions</span></span>
<span id="cb34-2">df.text <span class="op" style="color: #5E5E5E;">=</span> df.text.<span class="bu" style="color: null;">apply</span>(<span class="kw" style="color: #003B4F;">lambda</span> x: remove_tags_mentions(x))</span></code></pre></div>
</div>
</section>
<section id="punctuations" class="level3">
<h3 class="anchored" data-anchor-id="punctuations">Punctuations</h3>
<p>Punctuations are character other than alphaters and digits. These include [!“#$%&amp;'()*+,-./:;&lt;=&gt;?@\^_`{|}~]</p>
<p>It is better remove or convert emoticons before removing the punctuations, since if we do the other we around we might loose the emoticons from the text. Another example, if the text contains $10.50 then we’ll remove the .(dot) and the value will loose it’s meaning.</p>
<div class="cell" data-execution_count="154">
<div class="sourceCode cell-code" id="cb35" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb35-1">PUNCTUATIONS <span class="op" style="color: #5E5E5E;">=</span> string.punctuation</span>
<span id="cb35-2"></span>
<span id="cb35-3"></span>
<span id="cb35-4"><span class="kw" style="color: #003B4F;">def</span> remove_punctuation(text):</span>
<span id="cb35-5">    <span class="cf" style="color: #003B4F;">return</span> text.translate(<span class="bu" style="color: null;">str</span>.maketrans(<span class="st" style="color: #20794D;">''</span>, <span class="st" style="color: #20794D;">''</span>, PUNCTUATIONS))</span></code></pre></div>
</div>
<div class="cell" data-execution_count="155">
<div class="sourceCode cell-code" id="cb36" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb36-1">df.text <span class="op" style="color: #5E5E5E;">=</span> df[<span class="st" style="color: #20794D;">"text"</span>].<span class="bu" style="color: null;">apply</span>(<span class="kw" style="color: #003B4F;">lambda</span> text: remove_punctuation(text))</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="155">

<div>

<table class="dataframe table table-sm table-striped">
  <thead>
    <tr>
      <th></th>
      <th>text</th>
      <th>label</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td>username changed d</td>
      <td>1</td>
    </tr>
    <tr>
      <th>1</th>
      <td>unnieeee</td>
      <td>1</td>
    </tr>
    <tr>
      <th>2</th>
      <td>thanks i hope youve got a good book to keep you company</td>
      <td>1</td>
    </tr>
    <tr>
      <th>3</th>
      <td>where are you situated</td>
      <td>1</td>
    </tr>
    <tr>
      <th>4</th>
      <td>youre welcome im glad you liked it</td>
      <td>1</td>
    </tr>
  </tbody>
</table>
</div>
</div>
</div>
</section>
<section id="stopwords" class="level3">
<h3 class="anchored" data-anchor-id="stopwords">Stopwords</h3>
<p>Stopwords are commonly occuring words in any language. Such as, in english these words are ‘the’, ‘a’, ‘an’, &amp; many more. They are in most cases not useful and should be removed.</p>
<p>There are certain tasks in which these words are useful such as Part-of-Speech(POS) tagging, language translation. Stopwords are compiled for many languages, for english language we can use the list from the nltk package.</p>
<div class="cell" data-execution_count="163">
<div class="sourceCode cell-code" id="cb37" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb37-1">STOPWORDS <span class="op" style="color: #5E5E5E;">=</span> <span class="bu" style="color: null;">set</span>(stopwords.words(<span class="st" style="color: #20794D;">'english'</span>))</span>
<span id="cb37-2"></span>
<span id="cb37-3"></span>
<span id="cb37-4"><span class="kw" style="color: #003B4F;">def</span> remove_stopwords(text):</span>
<span id="cb37-5">    <span class="cf" style="color: #003B4F;">return</span> <span class="st" style="color: #20794D;">' '</span>.join([word <span class="cf" style="color: #003B4F;">for</span> word <span class="kw" style="color: #003B4F;">in</span> text.split() <span class="cf" style="color: #003B4F;">if</span> word <span class="kw" style="color: #003B4F;">not</span> <span class="kw" style="color: #003B4F;">in</span> STOPWORDS])</span></code></pre></div>
</div>
<div class="cell" data-execution_count="162">
<div class="sourceCode cell-code" id="cb38" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb38-1"><span class="co" style="color: #5E5E5E;"># Remove stopwords</span></span>
<span id="cb38-2">df.text <span class="op" style="color: #5E5E5E;">=</span> df.text.<span class="bu" style="color: null;">apply</span>(<span class="kw" style="color: #003B4F;">lambda</span> text: remove_stopwords(text))</span>
<span id="cb38-3">df.head()</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="162">

<div>

<table class="dataframe table table-sm table-striped">
  <thead>
    <tr>
      <th></th>
      <th>text</th>
      <th>label</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td>username changed</td>
      <td>1</td>
    </tr>
    <tr>
      <th>1</th>
      <td>unnieeee</td>
      <td>1</td>
    </tr>
    <tr>
      <th>2</th>
      <td>thanks hope youve got good book keep company</td>
      <td>1</td>
    </tr>
    <tr>
      <th>3</th>
      <td>situated</td>
      <td>1</td>
    </tr>
    <tr>
      <th>4</th>
      <td>youre welcome im glad liked</td>
      <td>1</td>
    </tr>
  </tbody>
</table>
</div>
</div>
</div>
</section>
<section id="numbers" class="level3">
<h3 class="anchored" data-anchor-id="numbers">Numbers</h3>
<p>We may remove numbers if they are not useful in our analysis. But analysis in the financial domain, numbers are very useful.</p>
<div class="cell" data-execution_count="165">
<div class="sourceCode cell-code" id="cb39" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb39-1">df.text <span class="op" style="color: #5E5E5E;">=</span> df.text.<span class="bu" style="color: null;">str</span>.replace(<span class="vs" style="color: #20794D;">r'\d+'</span>, <span class="st" style="color: #20794D;">''</span>, regex<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>)</span></code></pre></div>
</div>
</section>
<section id="extra-whitespaces" class="level3">
<h3 class="anchored" data-anchor-id="extra-whitespaces">Extra whitespaces</h3>
<p>After usually after preprocessing the text there might be extra whitespaces that might be created after transforming, removing various characters. Also, there is a need to remove all the new line, tab characters as well from our text.</p>
<div class="cell" data-execution_count="176">
<div class="sourceCode cell-code" id="cb40" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb40-1"><span class="kw" style="color: #003B4F;">def</span> remove_whitespaces(text):</span>
<span id="cb40-2">    <span class="cf" style="color: #003B4F;">return</span> <span class="st" style="color: #20794D;">" "</span>.join(text.split())</span></code></pre></div>
</div>
<div class="cell" data-execution_count="177">
<div class="sourceCode cell-code" id="cb41" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb41-1">text <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">"  Whitespaces in the beginning are removed  </span><span class="ch" style="color: #20794D;">\t</span><span class="st" style="color: #20794D;"> as well </span><span class="ch" style="color: #20794D;">\n</span><span class="st" style="color: #20794D;">  as in between  the text   "</span></span>
<span id="cb41-2"></span>
<span id="cb41-3">clean_text <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">" "</span>.join(text.split())</span>
<span id="cb41-4">clean_text</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="177">
<pre><code>'Whitespaces in the beginning are removed as well as in between the text'</code></pre>
</div>
</div>
<div class="cell" data-execution_count="178">
<div class="sourceCode cell-code" id="cb43" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb43-1">df.text <span class="op" style="color: #5E5E5E;">=</span> df.text.<span class="bu" style="color: null;">apply</span>(<span class="kw" style="color: #003B4F;">lambda</span> x: remove_whitespaces(x))</span></code></pre></div>
</div>
</section>
<section id="frequent-words" class="level3">
<h3 class="anchored" data-anchor-id="frequent-words">Frequent words</h3>
<p>Previously we have removed stopwords which are common in any language. If we are working in any domain, we can also remove the common words used in that domain which don’t provide us with much information.</p>
<div class="cell" data-execution_count="183">
<div class="sourceCode cell-code" id="cb44" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb44-1"><span class="kw" style="color: #003B4F;">def</span> freq_words(text):</span>
<span id="cb44-2">    tokens <span class="op" style="color: #5E5E5E;">=</span> word_tokenize(text)</span>
<span id="cb44-3">    FrequentWords <span class="op" style="color: #5E5E5E;">=</span> []</span>
<span id="cb44-4"></span>
<span id="cb44-5">    <span class="cf" style="color: #003B4F;">for</span> word <span class="kw" style="color: #003B4F;">in</span> tokens:</span>
<span id="cb44-6">        counter[word] <span class="op" style="color: #5E5E5E;">+=</span> <span class="dv" style="color: #AD0000;">1</span></span>
<span id="cb44-7"></span>
<span id="cb44-8">    <span class="cf" style="color: #003B4F;">for</span> (word, word_count) <span class="kw" style="color: #003B4F;">in</span> counter.most_common(<span class="dv" style="color: #AD0000;">10</span>):</span>
<span id="cb44-9">        FrequentWords.append(word)</span>
<span id="cb44-10">    <span class="cf" style="color: #003B4F;">return</span> FrequentWords</span>
<span id="cb44-11"></span>
<span id="cb44-12"></span>
<span id="cb44-13"><span class="kw" style="color: #003B4F;">def</span> remove_fw(text, FrequentWords):</span>
<span id="cb44-14">    tokens <span class="op" style="color: #5E5E5E;">=</span> word_tokenize(text)</span>
<span id="cb44-15">    without_fw <span class="op" style="color: #5E5E5E;">=</span> []</span>
<span id="cb44-16">    <span class="cf" style="color: #003B4F;">for</span> word <span class="kw" style="color: #003B4F;">in</span> tokens:</span>
<span id="cb44-17">        <span class="cf" style="color: #003B4F;">if</span> word <span class="kw" style="color: #003B4F;">not</span> <span class="kw" style="color: #003B4F;">in</span> FrequentWords:</span>
<span id="cb44-18">            without_fw.append(word)</span>
<span id="cb44-19"></span>
<span id="cb44-20">    without_fw <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">' '</span>.join(without_fw)</span>
<span id="cb44-21">    <span class="cf" style="color: #003B4F;">return</span> without_fw</span>
<span id="cb44-22"></span>
<span id="cb44-23"></span>
<span id="cb44-24">counter <span class="op" style="color: #5E5E5E;">=</span> Counter()</span></code></pre></div>
</div>
<div class="cell" data-execution_count="187">
<div class="sourceCode cell-code" id="cb45" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb45-1">text <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">"""</span></span>
<span id="cb45-2"><span class="st" style="color: #20794D;">Natural Language Processing is the technology used to aid computers to understand the human’s natural language. It’s not an easy task teaching machines to understand how we communicate. Leand Romaf, an experienced software engineer who is passionate at teaching people how artificial intelligence systems work, says that “in recent years, there have been significant breakthroughs in empowering computers to understand language just as we do.” This article will give a simple introduction to Natural Language Processing and how it can be achieved. Natural Language Processing, usually shortened as NLP, is a branch of artificial intelligence that deals with the interaction between computers and humans using the natural language. The ultimate objective of NLP is to read, decipher, understand, and make sense of the human languages in a manner that is valuable. Most NLP techniques rely on machine learning to derive meaning from human languages.</span></span>
<span id="cb45-3"><span class="st" style="color: #20794D;">"""</span></span></code></pre></div>
</div>
<div class="cell" data-execution_count="188">
<div class="sourceCode cell-code" id="cb46" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb46-1">FrequentWords <span class="op" style="color: #5E5E5E;">=</span> freq_words(text)</span>
<span id="cb46-2"><span class="bu" style="color: null;">print</span>(FrequentWords)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[',', 'to', '.', 'is', 'the', 'understand', 'Natural', 'Language', 'Processing', 'computers']</code></pre>
</div>
</div>
<div class="cell" data-execution_count="189">
<div class="sourceCode cell-code" id="cb48" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb48-1">fw_result <span class="op" style="color: #5E5E5E;">=</span> remove_fw(text, FrequentWords)</span>
<span id="cb48-2">fw_result</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="189">
<pre><code>'technology used aid human ’ s natural language It ’ s not an easy task teaching machines how we communicate Leand Romaf an experienced software engineer who passionate at teaching people how artificial intelligence systems work says that “ in recent years there have been significant breakthroughs in empowering language just as we do. ” This article will give a simple introduction and how it can be achieved usually shortened as NLP a branch of artificial intelligence that deals with interaction between and humans using natural language The ultimate objective of NLP read decipher and make sense of human languages in a manner that valuable Most NLP techniques rely on machine learning derive meaning from human languages'</code></pre>
</div>
</div>
</section>
<section id="rare-words" class="level3">
<h3 class="anchored" data-anchor-id="rare-words">Rare words</h3>
<p>Rare words are similar to frequent words. We can remove them because they are so less that they cannot add any value to the purpose.</p>
<div class="cell" data-execution_count="193">
<div class="sourceCode cell-code" id="cb50" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb50-1"><span class="kw" style="color: #003B4F;">def</span> rare_words(text):</span>
<span id="cb50-2">    <span class="co" style="color: #5E5E5E;"># tokenization</span></span>
<span id="cb50-3">    tokens <span class="op" style="color: #5E5E5E;">=</span> word_tokenize(text)</span>
<span id="cb50-4">    <span class="cf" style="color: #003B4F;">for</span> word <span class="kw" style="color: #003B4F;">in</span> tokens:</span>
<span id="cb50-5">        counter[word] <span class="op" style="color: #5E5E5E;">=</span> <span class="op" style="color: #5E5E5E;">+</span><span class="dv" style="color: #AD0000;">1</span></span>
<span id="cb50-6"></span>
<span id="cb50-7">    RareWords <span class="op" style="color: #5E5E5E;">=</span> []</span>
<span id="cb50-8">    number_rare_words <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">10</span></span>
<span id="cb50-9">    <span class="co" style="color: #5E5E5E;"># take top 10 frequent words</span></span>
<span id="cb50-10">    frequentWords <span class="op" style="color: #5E5E5E;">=</span> counter.most_common()</span>
<span id="cb50-11">    <span class="cf" style="color: #003B4F;">for</span> (word, word_count) <span class="kw" style="color: #003B4F;">in</span> frequentWords[:<span class="op" style="color: #5E5E5E;">-</span>number_rare_words:<span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">1</span>]:</span>
<span id="cb50-12">        RareWords.append(word)</span>
<span id="cb50-13"></span>
<span id="cb50-14">    <span class="cf" style="color: #003B4F;">return</span> RareWords</span>
<span id="cb50-15"></span>
<span id="cb50-16"></span>
<span id="cb50-17"><span class="kw" style="color: #003B4F;">def</span> remove_rw(text, RareWords):</span>
<span id="cb50-18">    tokens <span class="op" style="color: #5E5E5E;">=</span> word_tokenize(text)</span>
<span id="cb50-19">    without_rw <span class="op" style="color: #5E5E5E;">=</span> []</span>
<span id="cb50-20">    <span class="cf" style="color: #003B4F;">for</span> word <span class="kw" style="color: #003B4F;">in</span> tokens:</span>
<span id="cb50-21">        <span class="cf" style="color: #003B4F;">if</span> word <span class="kw" style="color: #003B4F;">not</span> <span class="kw" style="color: #003B4F;">in</span> RareWords:</span>
<span id="cb50-22">            without_rw.append(word)</span>
<span id="cb50-23"></span>
<span id="cb50-24">    without_rw <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">' '</span>.join(without_fw)</span>
<span id="cb50-25">    <span class="cf" style="color: #003B4F;">return</span> without_rw</span>
<span id="cb50-26"></span>
<span id="cb50-27"></span>
<span id="cb50-28">counter <span class="op" style="color: #5E5E5E;">=</span> Counter()</span></code></pre></div>
</div>
<div class="cell" data-execution_count="194">
<div class="sourceCode cell-code" id="cb51" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb51-1">text <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">"""</span></span>
<span id="cb51-2"><span class="st" style="color: #20794D;">Natural Language Processing is the technology used to aid computers to understand the human’s natural language. It’s not an easy task teaching machines to understand how we communicate. Leand Romaf, an experienced software engineer who is passionate at teaching people how artificial intelligence systems work, says that “in recent years, there have been significant breakthroughs in empowering computers to understand language just as we do.” This article will give a simple introduction to Natural Language Processing and how it can be achieved. Natural Language Processing, usually shortened as NLP, is a branch of artificial intelligence that deals with the interaction between computers and humans using the natural language. The ultimate objective of NLP is to read, decipher, understand, and make sense of the human languages in a manner that is valuable. Most NLP techniques rely on machine learning to derive meaning from human languages.</span></span>
<span id="cb51-3"><span class="st" style="color: #20794D;">"""</span></span></code></pre></div>
</div>
<div class="cell" data-execution_count="195">
<div class="sourceCode cell-code" id="cb52" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb52-1">RareWords <span class="op" style="color: #5E5E5E;">=</span> rare_words(text)</span>
<span id="cb52-2">RareWords</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="195">
<pre><code>['from',
 'meaning',
 'derive',
 'learning',
 'machine',
 'on',
 'rely',
 'techniques',
 'Most']</code></pre>
</div>
</div>
<div class="cell" data-execution_count="197">
<div class="sourceCode cell-code" id="cb54" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb54-1">rw_result <span class="op" style="color: #5E5E5E;">=</span> remove_fw(text, RareWords)</span>
<span id="cb54-2">rw_result</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="197">
<pre><code>'Natural Language Processing is the technology used to aid computers to understand the human ’ s natural language . It ’ s not an easy task teaching machines to understand how we communicate . Leand Romaf , an experienced software engineer who is passionate at teaching people how artificial intelligence systems work , says that “ in recent years , there have been significant breakthroughs in empowering computers to understand language just as we do. ” This article will give a simple introduction to Natural Language Processing and how it can be achieved . Natural Language Processing , usually shortened as NLP , is a branch of artificial intelligence that deals with the interaction between computers and humans using the natural language . The ultimate objective of NLP is to read , decipher , understand , and make sense of the human languages in a manner that is valuable . NLP to human languages .'</code></pre>
</div>
</div>
</section>
</section>
<section id="conversion-of-emoji-to-words" class="level2">
<h2 class="anchored" data-anchor-id="conversion-of-emoji-to-words">Conversion of Emoji to Words</h2>
<p>To remove or not is done based on the purpose of the application. Example if we are building a sentiment analysis system emoji’s can be useful.</p>
<p>“The movie was 🔥” or “The movie was 💩”</p>
<p>If we remove the emoji’s the meaning of the sentence changes completely. In these cases we can convert emoji’s to words.</p>
<p>demoji requires an initial data download from the Unicode Consortium’s <a href="http://unicode.org/Public/emoji/12.0/emoji-test.txt">emoji code repository</a>.</p>
<p>On first use of the package, call download_codes().<br> This will store the Unicode hex-notated symbols at ~/.demoji/codes.json for future use.</p>
<p>Read more about demoji on <a href="https://pypi.org/project/demoji/">pypi.org</a></p>
<div class="cell" data-execution_count="44">
<div class="sourceCode cell-code" id="cb56" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb56-1">demoji.download_codes()</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Downloading emoji data ...
... OK (Got response in 1.35 seconds)
Writing emoji data to C:\Users\sagar\.demoji\codes.json ...
... OK</code></pre>
</div>
</div>
<div class="cell" data-execution_count="45">
<div class="sourceCode cell-code" id="cb58" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb58-1"><span class="kw" style="color: #003B4F;">def</span> emoji_to_words(text):</span>
<span id="cb58-2">    <span class="cf" style="color: #003B4F;">return</span> demoji.replace_with_desc(text, sep<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"__"</span>)</span></code></pre></div>
</div>
<div class="cell" data-execution_count="46">
<div class="sourceCode cell-code" id="cb59" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb59-1">text <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">"game is on 🔥 🚣🏼"</span></span>
<span id="cb59-2">emoji_to_words(text)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="46">
<pre><code>'game is on __fire__ __person rowing boat: medium-light skin tone__'</code></pre>
</div>
</div>
</section>
<section id="conversion-of-emoticons-to-words" class="level2">
<h2 class="anchored" data-anchor-id="conversion-of-emoticons-to-words">Conversion of Emoticons to Words</h2>
<p>As we did for emoji’s, we convert emoticons to words for the same purpose.</p>
<div class="cell" data-execution_count="73">
<div class="sourceCode cell-code" id="cb61" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb61-1"><span class="kw" style="color: #003B4F;">def</span> emoticons_to_words(text):</span>
<span id="cb61-2">    <span class="cf" style="color: #003B4F;">for</span> emot <span class="kw" style="color: #003B4F;">in</span> EMOTICONS:</span>
<span id="cb61-3">        text <span class="op" style="color: #5E5E5E;">=</span> re.sub(</span>
<span id="cb61-4">            <span class="st" style="color: #20794D;">u'('</span><span class="op" style="color: #5E5E5E;">+</span>emot<span class="op" style="color: #5E5E5E;">+</span><span class="st" style="color: #20794D;">')'</span>, <span class="st" style="color: #20794D;">"_"</span>.join(EMOTICONS[emot].replace(<span class="st" style="color: #20794D;">","</span>, <span class="st" style="color: #20794D;">""</span>).replace(<span class="st" style="color: #20794D;">":"</span>, <span class="st" style="color: #20794D;">""</span>).split()), text)</span>
<span id="cb61-5">    <span class="cf" style="color: #003B4F;">return</span> text</span></code></pre></div>
</div>
<div class="cell" data-execution_count="74">
<div class="sourceCode cell-code" id="cb62" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb62-1">text <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">"Hey there!! :-)"</span></span>
<span id="cb62-2">emoticons_to_words(text)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="74">
<pre><code>'Hey there!! Happy_face_smiley'</code></pre>
</div>
</div>
</section>
<section id="converting-numbers-to-words" class="level2">
<h2 class="anchored" data-anchor-id="converting-numbers-to-words">Converting Numbers to Words</h2>
<p>If our analysis require us to use information based on the numbers in the text, we can convert them to words.</p>
<p>Read more about num2words on <a href="https://github.com/savoirfairelinux/num2words">github</a></p>
<div class="cell" data-execution_count="198">
<div class="sourceCode cell-code" id="cb64" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb64-1"><span class="kw" style="color: #003B4F;">def</span> nums_to_words(text):</span>
<span id="cb64-2">    new_text <span class="op" style="color: #5E5E5E;">=</span> []</span>
<span id="cb64-3">    <span class="cf" style="color: #003B4F;">for</span> word <span class="kw" style="color: #003B4F;">in</span> text.split():</span>
<span id="cb64-4">        <span class="cf" style="color: #003B4F;">if</span> word.isdigit():</span>
<span id="cb64-5">            new_text.append(num2words(word))</span>
<span id="cb64-6">        <span class="cf" style="color: #003B4F;">else</span>:</span>
<span id="cb64-7">            new_text.append(word)</span>
<span id="cb64-8">    <span class="cf" style="color: #003B4F;">return</span> <span class="st" style="color: #20794D;">" "</span>.join(new_text)</span></code></pre></div>
</div>
<div class="cell" data-execution_count="199">
<div class="sourceCode cell-code" id="cb65" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb65-1">text <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">"I ran this track 30 times"</span></span>
<span id="cb65-2">nums_to_words(text)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="199">
<pre><code>'I ran this track thirty times'</code></pre>
</div>
</div>
</section>
<section id="chat-words-conversion" class="level2">
<h2 class="anchored" data-anchor-id="chat-words-conversion">Chat words Conversion</h2>
<p>The more we use social media, we have become lazy to type the whole phrase or word. Due to which slang words came into existance such as “omg” which represents “Oh my god”. Such slang words don’t provide much information and if we need to use them we have to convert them.</p>
<p>Thank you: <a href="https://github.com/rishabhverma17/sms_slang_translator/blob/master/slang.txt">GitHub repo</a> for the list of slang words</p>
<div class="cell" data-execution_count="200">
<details>
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb67" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb67-1">chat_words <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">"""</span></span>
<span id="cb67-2"><span class="st" style="color: #20794D;">AFAIK=As Far As I Know</span></span>
<span id="cb67-3"><span class="st" style="color: #20794D;">AFK=Away From Keyboard</span></span>
<span id="cb67-4"><span class="st" style="color: #20794D;">ASAP=As Soon As Possible</span></span>
<span id="cb67-5"><span class="st" style="color: #20794D;">ATK=At The Keyboard</span></span>
<span id="cb67-6"><span class="st" style="color: #20794D;">ATM=At The Moment</span></span>
<span id="cb67-7"><span class="st" style="color: #20794D;">A3=Anytime, Anywhere, Anyplace</span></span>
<span id="cb67-8"><span class="st" style="color: #20794D;">BAK=Back At Keyboard</span></span>
<span id="cb67-9"><span class="st" style="color: #20794D;">BBL=Be Back Later</span></span>
<span id="cb67-10"><span class="st" style="color: #20794D;">BBS=Be Back Soon</span></span>
<span id="cb67-11"><span class="st" style="color: #20794D;">BFN=Bye For Now</span></span>
<span id="cb67-12"><span class="st" style="color: #20794D;">B4N=Bye For Now</span></span>
<span id="cb67-13"><span class="st" style="color: #20794D;">BRB=Be Right Back</span></span>
<span id="cb67-14"><span class="st" style="color: #20794D;">BRT=Be Right There</span></span>
<span id="cb67-15"><span class="st" style="color: #20794D;">BTW=By The Way</span></span>
<span id="cb67-16"><span class="st" style="color: #20794D;">B4=Before</span></span>
<span id="cb67-17"><span class="st" style="color: #20794D;">B4N=Bye For Now</span></span>
<span id="cb67-18"><span class="st" style="color: #20794D;">CU=See You</span></span>
<span id="cb67-19"><span class="st" style="color: #20794D;">CUL8R=See You Later</span></span>
<span id="cb67-20"><span class="st" style="color: #20794D;">CYA=See You</span></span>
<span id="cb67-21"><span class="st" style="color: #20794D;">FAQ=Frequently Asked Questions</span></span>
<span id="cb67-22"><span class="st" style="color: #20794D;">FC=Fingers Crossed</span></span>
<span id="cb67-23"><span class="st" style="color: #20794D;">FWIW=For What It's Worth</span></span>
<span id="cb67-24"><span class="st" style="color: #20794D;">FYI=For Your Information</span></span>
<span id="cb67-25"><span class="st" style="color: #20794D;">GAL=Get A Life</span></span>
<span id="cb67-26"><span class="st" style="color: #20794D;">GG=Good Game</span></span>
<span id="cb67-27"><span class="st" style="color: #20794D;">GN=Good Night</span></span>
<span id="cb67-28"><span class="st" style="color: #20794D;">GMTA=Great Minds Think Alike</span></span>
<span id="cb67-29"><span class="st" style="color: #20794D;">GR8=Great!</span></span>
<span id="cb67-30"><span class="st" style="color: #20794D;">G9=Genius</span></span>
<span id="cb67-31"><span class="st" style="color: #20794D;">IC=I See</span></span>
<span id="cb67-32"><span class="st" style="color: #20794D;">ICQ=I Seek you (also a chat program)</span></span>
<span id="cb67-33"><span class="st" style="color: #20794D;">ILU=ILU: I Love You</span></span>
<span id="cb67-34"><span class="st" style="color: #20794D;">IMHO=In My Honest/Humble Opinion</span></span>
<span id="cb67-35"><span class="st" style="color: #20794D;">IMO=In My Opinion</span></span>
<span id="cb67-36"><span class="st" style="color: #20794D;">IOW=In Other Words</span></span>
<span id="cb67-37"><span class="st" style="color: #20794D;">IRL=In Real Life</span></span>
<span id="cb67-38"><span class="st" style="color: #20794D;">KISS=Keep It Simple, Stupid</span></span>
<span id="cb67-39"><span class="st" style="color: #20794D;">LDR=Long Distance Relationship</span></span>
<span id="cb67-40"><span class="st" style="color: #20794D;">LMAO=Laugh My A.. Off</span></span>
<span id="cb67-41"><span class="st" style="color: #20794D;">LOL=Laughing Out Loud</span></span>
<span id="cb67-42"><span class="st" style="color: #20794D;">LTNS=Long Time No See</span></span>
<span id="cb67-43"><span class="st" style="color: #20794D;">L8R=Later</span></span>
<span id="cb67-44"><span class="st" style="color: #20794D;">MTE=My Thoughts Exactly</span></span>
<span id="cb67-45"><span class="st" style="color: #20794D;">M8=Mate</span></span>
<span id="cb67-46"><span class="st" style="color: #20794D;">NRN=No Reply Necessary</span></span>
<span id="cb67-47"><span class="st" style="color: #20794D;">OIC=Oh I See</span></span>
<span id="cb67-48"><span class="st" style="color: #20794D;">PITA=Pain In The A..</span></span>
<span id="cb67-49"><span class="st" style="color: #20794D;">PRT=Party</span></span>
<span id="cb67-50"><span class="st" style="color: #20794D;">PRW=Parents Are Watching</span></span>
<span id="cb67-51"><span class="st" style="color: #20794D;">QPSA?=Que Pasa?</span></span>
<span id="cb67-52"><span class="st" style="color: #20794D;">ROFL=Rolling On The Floor Laughing</span></span>
<span id="cb67-53"><span class="st" style="color: #20794D;">ROFLOL=Rolling On The Floor Laughing Out Loud</span></span>
<span id="cb67-54"><span class="st" style="color: #20794D;">ROTFLMAO=Rolling On The Floor Laughing My A.. Off</span></span>
<span id="cb67-55"><span class="st" style="color: #20794D;">SK8=Skate</span></span>
<span id="cb67-56"><span class="st" style="color: #20794D;">STATS=Your sex and age</span></span>
<span id="cb67-57"><span class="st" style="color: #20794D;">ASL=Age, Sex, Location</span></span>
<span id="cb67-58"><span class="st" style="color: #20794D;">THX=Thank You</span></span>
<span id="cb67-59"><span class="st" style="color: #20794D;">TTFN=Ta-Ta For Now!</span></span>
<span id="cb67-60"><span class="st" style="color: #20794D;">TTYL=Talk To You Later</span></span>
<span id="cb67-61"><span class="st" style="color: #20794D;">U=You</span></span>
<span id="cb67-62"><span class="st" style="color: #20794D;">U2=You Too</span></span>
<span id="cb67-63"><span class="st" style="color: #20794D;">U4E=Yours For Ever</span></span>
<span id="cb67-64"><span class="st" style="color: #20794D;">WB=Welcome Back</span></span>
<span id="cb67-65"><span class="st" style="color: #20794D;">WTF=What The F...</span></span>
<span id="cb67-66"><span class="st" style="color: #20794D;">WTG=Way To Go!</span></span>
<span id="cb67-67"><span class="st" style="color: #20794D;">WUF=Where Are You From?</span></span>
<span id="cb67-68"><span class="st" style="color: #20794D;">W8=Wait...</span></span>
<span id="cb67-69"><span class="st" style="color: #20794D;">7K=Sick:-D Laugher</span></span>
<span id="cb67-70"><span class="st" style="color: #20794D;">OMG=Oh my god"""</span></span></code></pre></div>
</details>
</div>
<div class="cell" data-execution_count="202">
<div class="sourceCode cell-code" id="cb68" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb68-1">chat_words_dict <span class="op" style="color: #5E5E5E;">=</span> <span class="bu" style="color: null;">dict</span>()</span>
<span id="cb68-2">chat_words_set <span class="op" style="color: #5E5E5E;">=</span> <span class="bu" style="color: null;">set</span>()</span>
<span id="cb68-3"></span>
<span id="cb68-4"></span>
<span id="cb68-5"><span class="kw" style="color: #003B4F;">def</span> cw_conversion(text):</span>
<span id="cb68-6">    new_text <span class="op" style="color: #5E5E5E;">=</span> []</span>
<span id="cb68-7">    <span class="cf" style="color: #003B4F;">for</span> word <span class="kw" style="color: #003B4F;">in</span> text.split():</span>
<span id="cb68-8">        <span class="cf" style="color: #003B4F;">if</span> word.upper() <span class="kw" style="color: #003B4F;">in</span> chat_words_set:</span>
<span id="cb68-9">            new_text.append(chat_words_dict[word.upper()])</span>
<span id="cb68-10">        <span class="cf" style="color: #003B4F;">else</span>:</span>
<span id="cb68-11">            new_text.append(word)</span>
<span id="cb68-12">    <span class="cf" style="color: #003B4F;">return</span> <span class="st" style="color: #20794D;">" "</span>.join(new_text)</span>
<span id="cb68-13"></span>
<span id="cb68-14"></span>
<span id="cb68-15"><span class="cf" style="color: #003B4F;">for</span> line <span class="kw" style="color: #003B4F;">in</span> chat_words.split(<span class="st" style="color: #20794D;">'</span><span class="ch" style="color: #20794D;">\n</span><span class="st" style="color: #20794D;">'</span>):</span>
<span id="cb68-16">    <span class="cf" style="color: #003B4F;">if</span> line <span class="op" style="color: #5E5E5E;">!=</span> <span class="st" style="color: #20794D;">''</span>:</span>
<span id="cb68-17">        cw, cw_expanded <span class="op" style="color: #5E5E5E;">=</span> line.split(<span class="st" style="color: #20794D;">'='</span>)[<span class="dv" style="color: #AD0000;">0</span>], line.split(<span class="st" style="color: #20794D;">'='</span>)[<span class="dv" style="color: #AD0000;">1</span>]</span>
<span id="cb68-18"></span>
<span id="cb68-19">        chat_words_set.add(cw)</span>
<span id="cb68-20">        chat_words_dict[cw] <span class="op" style="color: #5E5E5E;">=</span> cw_expanded</span></code></pre></div>
</div>
<div class="cell" data-execution_count="203">
<div class="sourceCode cell-code" id="cb69" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb69-1">text <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">"omg that's awesome."</span></span>
<span id="cb69-2">cw_conversion(text)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="203">
<pre><code>"Oh my god that's awesome."</code></pre>
</div>
</div>
</section>
<section id="expanding-contractions" class="level2">
<h2 class="anchored" data-anchor-id="expanding-contractions">Expanding Contractions</h2>
<p>Contractions are words or combinations of words created by dropping a few letters and replacing those letters by an apostrophe.</p>
<p>Example:</p>
<ul>
<li>don’t: do not</li>
<li>we’ll: we will</li>
</ul>
<p>Our nlp model don’t understand these contractions i.e.&nbsp;they don’t understand that “don’t” and “do not” are the same thing. If our problem statement requires them then we can expand them or else leave it as it is.</p>
<div class="cell" data-execution_count="204">
<div class="sourceCode cell-code" id="cb71" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb71-1"><span class="kw" style="color: #003B4F;">def</span> expand_contractions(text):</span>
<span id="cb71-2">    expanded_text <span class="op" style="color: #5E5E5E;">=</span> []</span>
<span id="cb71-3">    <span class="cf" style="color: #003B4F;">for</span> line <span class="kw" style="color: #003B4F;">in</span> text:</span>
<span id="cb71-4">        expanded_text.append(contractions.fix(line))</span>
<span id="cb71-5">    <span class="cf" style="color: #003B4F;">return</span> expanded_text</span></code></pre></div>
</div>
<div class="cell" data-execution_count="205">
<div class="sourceCode cell-code" id="cb72" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb72-1">text <span class="op" style="color: #5E5E5E;">=</span> [<span class="st" style="color: #20794D;">"I'll be there within 15 minutes."</span>,</span>
<span id="cb72-2">        <span class="st" style="color: #20794D;">"It's awesome to meet your new friends."</span>]</span>
<span id="cb72-3">expand_contractions(text)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="205">
<pre><code>['I will be there within 15 minutes.',
 'it is awesome to meet your new friends.']</code></pre>
</div>
</div>
</section>
<section id="stemming" class="level2">
<h2 class="anchored" data-anchor-id="stemming">Stemming</h2>
<p>In stemming we reduce the word to it’s base or root form by removing the suffix characters from the word. It is one of the technique to normalize text.</p>
<p>Stemming for root word “like” include:</p>
<ul>
<li>“likes”</li>
<li>“liked”</li>
<li>“likely”</li>
<li>“liking”</li>
</ul>
<p>Stemmed word doesn’t always match the words in our dictionary such as:</p>
<ul>
<li>console -&gt; consol</li>
<li>company -&gt; compani</li>
<li>welcome -&gt; welcom</li>
</ul>
<p>Due to which stemming is not performed in all nlp tasks.</p>
<p>There are various algorithms used for stemming but the most widely used is PorterStemmer. In this post we have used the PorterStemmer as well.</p>
<div class="cell" data-execution_count="55">
<div class="sourceCode cell-code" id="cb74" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb74-1">stemmer <span class="op" style="color: #5E5E5E;">=</span> PorterStemmer()</span>
<span id="cb74-2"></span>
<span id="cb74-3"></span>
<span id="cb74-4"><span class="kw" style="color: #003B4F;">def</span> stem_words(text):</span>
<span id="cb74-5">    <span class="cf" style="color: #003B4F;">return</span> <span class="st" style="color: #20794D;">' '</span>.join([stemmer.stem(word) <span class="cf" style="color: #003B4F;">for</span> word <span class="kw" style="color: #003B4F;">in</span> text.split()])</span></code></pre></div>
</div>
<div class="cell" data-execution_count="211">
<div class="sourceCode cell-code" id="cb75" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb75-1">df[<span class="st" style="color: #20794D;">'text_stemmed'</span>] <span class="op" style="color: #5E5E5E;">=</span> df.text.<span class="bu" style="color: null;">apply</span>(<span class="kw" style="color: #003B4F;">lambda</span> text: stem_words(text))</span>
<span id="cb75-2">df[[<span class="st" style="color: #20794D;">'text'</span>, <span class="st" style="color: #20794D;">'text_stemmed'</span>]].head()</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="211">

<div>

<table class="dataframe table table-sm table-striped">
  <thead>
    <tr>
      <th></th>
      <th>text</th>
      <th>text_stemmed</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td>username changed</td>
      <td>usernam chang</td>
    </tr>
    <tr>
      <th>1</th>
      <td>unnieeee</td>
      <td>unnieee</td>
    </tr>
    <tr>
      <th>2</th>
      <td>thanks hope youve got good book keep company</td>
      <td>thank hope youv got good book keep compani</td>
    </tr>
    <tr>
      <th>3</th>
      <td>situated</td>
      <td>situat</td>
    </tr>
    <tr>
      <th>4</th>
      <td>youre welcome im glad liked</td>
      <td>your welcom im glad like</td>
    </tr>
  </tbody>
</table>
</div>
</div>
</div>
<p>PorterStemmer can be used only for english. If we are working with other than english then we can use SnowballStemmer.</p>
<div class="cell" data-execution_count="59">
<div class="sourceCode cell-code" id="cb76" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb76-1">SnowballStemmer.languages</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="59">
<pre><code>('arabic',
 'danish',
 'dutch',
 'english',
 'finnish',
 'french',
 'german',
 'hungarian',
 'italian',
 'norwegian',
 'porter',
 'portuguese',
 'romanian',
 'russian',
 'spanish',
 'swedish')</code></pre>
</div>
</div>
</section>
<section id="lemmatization" class="level2">
<h2 class="anchored" data-anchor-id="lemmatization">Lemmatization</h2>
<p>Lemmatization tried to perform the similar task as that of stemming i.e.&nbsp;trying to reduce the inflection words to it’s base form. But lemmatization does it by using a different approach.</p>
<p>Lemmatizations takes into consideration of the morphological analysis of the word. It tries to reduce to words to it’s dictionary form which is known as lemma.</p>
<div class="cell" data-execution_count="212">
<div class="sourceCode cell-code" id="cb78" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb78-1">lemmatizer <span class="op" style="color: #5E5E5E;">=</span> WordNetLemmatizer()</span>
<span id="cb78-2"></span>
<span id="cb78-3"></span>
<span id="cb78-4"><span class="kw" style="color: #003B4F;">def</span> text_lemmatize(text):</span>
<span id="cb78-5">    <span class="cf" style="color: #003B4F;">return</span> <span class="st" style="color: #20794D;">' '</span>.join([lemmatizer.lemmatize(word) <span class="cf" style="color: #003B4F;">for</span> word <span class="kw" style="color: #003B4F;">in</span> text.split()])</span></code></pre></div>
</div>
<div class="cell" data-execution_count="214">
<div class="sourceCode cell-code" id="cb79" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb79-1">df[<span class="st" style="color: #20794D;">'text_lemmatized'</span>] <span class="op" style="color: #5E5E5E;">=</span> df.text.<span class="bu" style="color: null;">apply</span>(<span class="kw" style="color: #003B4F;">lambda</span> text: text_lemmatize(text))</span>
<span id="cb79-2">df[[<span class="st" style="color: #20794D;">'text'</span>, <span class="st" style="color: #20794D;">'text_stemmed'</span>, <span class="st" style="color: #20794D;">'text_lemmatized'</span>]].head()</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="214">

<div>

<table class="dataframe table table-sm table-striped">
  <thead>
    <tr>
      <th></th>
      <th>text</th>
      <th>text_stemmed</th>
      <th>text_lemmatized</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td>username changed</td>
      <td>usernam chang</td>
      <td>username changed</td>
    </tr>
    <tr>
      <th>1</th>
      <td>unnieeee</td>
      <td>unnieee</td>
      <td>unnieeee</td>
    </tr>
    <tr>
      <th>2</th>
      <td>thanks hope youve got good book keep company</td>
      <td>thank hope youv got good book keep compani</td>
      <td>thanks hope youve got good book keep company</td>
    </tr>
    <tr>
      <th>3</th>
      <td>situated</td>
      <td>situat</td>
      <td>situated</td>
    </tr>
    <tr>
      <th>4</th>
      <td>youre welcome im glad liked</td>
      <td>your welcom im glad like</td>
      <td>youre welcome im glad liked</td>
    </tr>
  </tbody>
</table>
</div>
</div>
</div>
<p>Difference between Stemming and Lemmatization:</p>
<table class="table">
<colgroup>
<col style="width: 55%">
<col style="width: 44%">
</colgroup>
<thead>
<tr class="header">
<th>Stemming</th>
<th>Lemmatization</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>Fast compared to lemmatization</td>
<td>Slow compared to stemming</td>
</tr>
<tr class="even">
<td>Reduces the word to it’s base form by removing the suffix</td>
<td>Uses lexical knowledge to get the base form of the word</td>
</tr>
<tr class="odd">
<td>Does not always provide meaning or dictionary form of the original word</td>
<td>Resulting words are always meaningful and dictionary words</td>
</tr>
</tbody>
</table>
</section>
<section id="spelling-correction" class="level2">
<h2 class="anchored" data-anchor-id="spelling-correction">Spelling Correction</h2>
<p>We as human always make mistake. Normally incorrect spelling in text are know as typos.</p>
<p>Since the NLP model doesn’t know the difference between a correct and an incorrect word. For the model “thanks” and “thnks” are two different words. Therefore, spelling correction is an important step to bring the incorrect words in the correct format.</p>
<div class="cell" data-execution_count="215">
<div class="sourceCode cell-code" id="cb80" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb80-1">spell <span class="op" style="color: #5E5E5E;">=</span> SpellChecker()</span>
<span id="cb80-2"></span>
<span id="cb80-3"></span>
<span id="cb80-4"><span class="kw" style="color: #003B4F;">def</span> correct_spelling(text):</span>
<span id="cb80-5">    correct_text <span class="op" style="color: #5E5E5E;">=</span> []</span>
<span id="cb80-6">    misspelled_words <span class="op" style="color: #5E5E5E;">=</span> spell.unknown(text.split())</span>
<span id="cb80-7">    <span class="cf" style="color: #003B4F;">for</span> word <span class="kw" style="color: #003B4F;">in</span> text.split():</span>
<span id="cb80-8">        <span class="cf" style="color: #003B4F;">if</span> word <span class="kw" style="color: #003B4F;">in</span> misspelled_words:</span>
<span id="cb80-9">            correct_text.append(spell.correction(word))</span>
<span id="cb80-10">        <span class="cf" style="color: #003B4F;">else</span>:</span>
<span id="cb80-11">            correct_text.append(word)</span>
<span id="cb80-12">    <span class="cf" style="color: #003B4F;">return</span> <span class="st" style="color: #20794D;">" "</span>.join(correct_text)</span></code></pre></div>
</div>
<div class="cell" data-execution_count="216">
<div class="sourceCode cell-code" id="cb81" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb81-1">text <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">"Hi, hwo are you doin? I'm good thnks for asking"</span></span>
<span id="cb81-2">correct_spelling(text)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="216">
<pre><code>"Hi, how are you doing I'm good thanks for asking"</code></pre>
</div>
</div>
<div class="cell" data-execution_count="217">
<div class="sourceCode cell-code" id="cb83" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb83-1">text <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">"hw are you doin? I'm god thnks"</span></span>
<span id="cb83-2">correct_spelling(text)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="217">
<pre><code>"he are you doing I'm god thanks"</code></pre>
</div>
</div>
</section>
<section id="convert-accented-characters-to-ascii-characters" class="level2">
<h2 class="anchored" data-anchor-id="convert-accented-characters-to-ascii-characters">Convert accented characters to ASCII characters</h2>
<p>Accent marks (also referred to as diacritics or diacriticals) usually appear above a character when we press the character for a long time. These need to be remove cause the model cannot distinguish between “dèèp” and “deep”. It will consider them as two different words.</p>
<div class="cell" data-execution_count="218">
<div class="sourceCode cell-code" id="cb85" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb85-1"><span class="kw" style="color: #003B4F;">def</span> accented_to_ascii(text):</span>
<span id="cb85-2">    <span class="cf" style="color: #003B4F;">return</span> unidecode.unidecode(text)</span></code></pre></div>
</div>
<div class="cell" data-execution_count="219">
<div class="sourceCode cell-code" id="cb86" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb86-1">text <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">"This is an example text with accented characters like dèèp lèarning ánd cömputer vísíön etc."</span></span>
<span id="cb86-2">accented_to_ascii(text)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="219">
<pre><code>'This is an example text with accented characters like deep learning and computer vision etc.'</code></pre>
</div>
</div>
</section>
<section id="ekphrasis" class="level2">
<h2 class="anchored" data-anchor-id="ekphrasis">Ekphrasis</h2>
<p>Collection of lightweight text tools, geared towards text from social networks, such as Twitter or Facebook, for tokenization, word normalization, word segmentation (for splitting hashtags) and spell correction, using word statistics from 2 big corpora (english Wikipedia, twitter - 330mil english tweets).</p>
<p>ekphrasis was developed as part of the text processing pipeline for DataStories team’s submission for SemEval-2017 Task 4 (English), Sentiment Analysis in Twitter (<a href="https://github.com/cbaziotis/ekphrasis">source</a>)</p>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2023-01-21T04:17:13.930595Z&quot;,&quot;iopub.status.busy&quot;:&quot;2023-01-21T04:17:13.930184Z&quot;,&quot;iopub.status.idle&quot;:&quot;2023-01-21T04:17:19.501586Z&quot;,&quot;shell.execute_reply&quot;:&quot;2023-01-21T04:17:19.500047Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2023-01-21T04:17:13.930564Z&quot;}" data-execution_count="14">
<div class="sourceCode cell-code" id="cb88" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb88-1"><span class="co" style="color: #5E5E5E;"># Referred from: https://github.com/cbaziotis/ekphrasis</span></span>
<span id="cb88-2"></span>
<span id="cb88-3">text_processor <span class="op" style="color: #5E5E5E;">=</span> TextPreProcessor(</span>
<span id="cb88-4">    <span class="co" style="color: #5E5E5E;"># terms that will be normalized</span></span>
<span id="cb88-5">    normalize<span class="op" style="color: #5E5E5E;">=</span>[<span class="st" style="color: #20794D;">'url'</span>, <span class="st" style="color: #20794D;">'email'</span>, <span class="st" style="color: #20794D;">'percent'</span>, <span class="st" style="color: #20794D;">'money'</span>, <span class="st" style="color: #20794D;">'phone'</span>, <span class="st" style="color: #20794D;">'user'</span>,</span>
<span id="cb88-6">               <span class="st" style="color: #20794D;">'time'</span>, <span class="st" style="color: #20794D;">'url'</span>, <span class="st" style="color: #20794D;">'date'</span>, <span class="st" style="color: #20794D;">'number'</span>],</span>
<span id="cb88-7"></span>
<span id="cb88-8">    <span class="co" style="color: #5E5E5E;"># terms that will be annotated</span></span>
<span id="cb88-9">    annotate<span class="op" style="color: #5E5E5E;">=</span>{<span class="st" style="color: #20794D;">"hashtag"</span>, <span class="st" style="color: #20794D;">"allcaps"</span>, <span class="st" style="color: #20794D;">"elongated"</span>, <span class="st" style="color: #20794D;">"repeated"</span>,</span>
<span id="cb88-10">              <span class="st" style="color: #20794D;">'emphasis'</span>, <span class="st" style="color: #20794D;">'censored'</span>},</span>
<span id="cb88-11">    fix_html<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>,  <span class="co" style="color: #5E5E5E;"># fix HTML tokens</span></span>
<span id="cb88-12"></span>
<span id="cb88-13">    <span class="co" style="color: #5E5E5E;"># corpus from which the word statistics are going to be used</span></span>
<span id="cb88-14">    <span class="co" style="color: #5E5E5E;"># for word segmentation</span></span>
<span id="cb88-15">    segmenter<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"twitter"</span>,</span>
<span id="cb88-16"></span>
<span id="cb88-17">    <span class="co" style="color: #5E5E5E;"># corpus from which the word statistics are going to be used</span></span>
<span id="cb88-18">    <span class="co" style="color: #5E5E5E;"># for spell correction</span></span>
<span id="cb88-19">    corrector<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"twitter"</span>,</span>
<span id="cb88-20"></span>
<span id="cb88-21">    unpack_hashtags<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>,  <span class="co" style="color: #5E5E5E;"># perform word segmentation on hashtags</span></span>
<span id="cb88-22">    unpack_contractions<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>,  <span class="co" style="color: #5E5E5E;"># Unpack contractions (can't -&gt; can not)</span></span>
<span id="cb88-23">    spell_correct_elong<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">False</span>,  <span class="co" style="color: #5E5E5E;"># spell correction for elongated words</span></span>
<span id="cb88-24"></span>
<span id="cb88-25">    <span class="co" style="color: #5E5E5E;"># select a tokenizer. You can use SocialTokenizer, or pass your own</span></span>
<span id="cb88-26">    <span class="co" style="color: #5E5E5E;"># the tokenizer, should take as input a string and return a list of tokens</span></span>
<span id="cb88-27">    tokenizer<span class="op" style="color: #5E5E5E;">=</span>SocialTokenizer(lowercase<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>).tokenize,</span>
<span id="cb88-28"></span>
<span id="cb88-29">    <span class="co" style="color: #5E5E5E;"># list of dictionaries, for replacing tokens extracted from the text,</span></span>
<span id="cb88-30">    <span class="co" style="color: #5E5E5E;"># with other expressions. You can pass more than one dictionaries.</span></span>
<span id="cb88-31">    dicts<span class="op" style="color: #5E5E5E;">=</span>[emoticons]</span>
<span id="cb88-32">)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Reading twitter - 1grams ...
Reading twitter - 2grams ...
Reading twitter - 1grams ...</code></pre>
</div>
</div>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2023-01-21T04:20:17.487043Z&quot;,&quot;iopub.status.busy&quot;:&quot;2023-01-21T04:20:17.486659Z&quot;,&quot;iopub.status.idle&quot;:&quot;2023-01-21T04:20:20.279963Z&quot;,&quot;shell.execute_reply&quot;:&quot;2023-01-21T04:20:20.278757Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2023-01-21T04:20:17.487015Z&quot;}" data-execution_count="17">
<div class="sourceCode cell-code" id="cb90" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb90-1"><span class="co" style="color: #5E5E5E;"># Clean text based on function defined above</span></span>
<span id="cb90-2">df[<span class="st" style="color: #20794D;">'clean_tweets'</span>] <span class="op" style="color: #5E5E5E;">=</span> [</span>
<span id="cb90-3">    <span class="st" style="color: #20794D;">" "</span>.join(text_processor.pre_process_doc(tweet)) <span class="cf" style="color: #003B4F;">for</span> tweet <span class="kw" style="color: #003B4F;">in</span> df.text]</span></code></pre></div>
</div>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2023-01-21T04:20:24.982893Z&quot;,&quot;iopub.status.busy&quot;:&quot;2023-01-21T04:20:24.982499Z&quot;,&quot;iopub.status.idle&quot;:&quot;2023-01-21T04:20:25.000469Z&quot;,&quot;shell.execute_reply&quot;:&quot;2023-01-21T04:20:24.998929Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2023-01-21T04:20:24.982864Z&quot;}" data-execution_count="18">
<div class="sourceCode cell-code" id="cb91" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb91-1"><span class="co" style="color: #5E5E5E;"># Display the clean text</span></span>
<span id="cb91-2">df.head()</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="18">

<div>

<table class="dataframe table table-sm table-striped">
  <thead>
    <tr>
      <th></th>
      <th>text</th>
      <th>label</th>
      <th>clean_tweets</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td>@ManiMint_ you're welcome :)</td>
      <td>1</td>
      <td>&lt;user&gt; you are welcome &lt;happy&gt;</td>
    </tr>
    <tr>
      <th>1</th>
      <td>Expired and I used BIS money now I'm broke ):(...</td>
      <td>0</td>
      <td>expired and i used &lt;allcaps&gt; bis &lt;/allcaps&gt; mo...</td>
    </tr>
    <tr>
      <th>2</th>
      <td>Thank you :) https://t.co/DuVcLseonQ</td>
      <td>1</td>
      <td>thank you &lt;happy&gt; &lt;url&gt;</td>
    </tr>
    <tr>
      <th>3</th>
      <td>@DeMoorSophie Hii, can you follow me, please? ...</td>
      <td>1</td>
      <td>&lt;user&gt; hii , can you follow me , please ? i ' ...</td>
    </tr>
    <tr>
      <th>4</th>
      <td>@hellasugg @MyNamesChai and sacconejoly's (@Jo...</td>
      <td>0</td>
      <td>&lt;user&gt; &lt;user&gt; and sacconejoly ' s ( &lt;user&gt; and...</td>
    </tr>
  </tbody>
</table>
</div>
</div>
</div>
</section>
<section id="conclusion" class="level2">
<h2 class="anchored" data-anchor-id="conclusion">Conclusion</h2>
<p>In this article, most of the text pre-processing techniques are explanied. I’ll update this post as I learn more techniques to pre-process text.</p>
<p>Share if you liked it, comment if you loved it. Hope to see you guys in the next one. Peace!</p>


</section>

 ]]></description>
  <category>Text Preprocessing</category>
  <category>Natural Language Processing</category>
  <category>NLP</category>
  <guid>https://sagarthacker.com/posts/nlp/text-preprocessing.html</guid>
  <pubDate>Mon, 19 Apr 2021 04:00:00 GMT</pubDate>
  <media:content url="https://sagarthacker.com/posts/nlp/text_preprocessing.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>What is Natural Language Processing?</title>
  <dc:creator>Sagar Thacker</dc:creator>
  <link>https://sagarthacker.com/posts/nlp/into-nlp.html</link>
  <description><![CDATA[ 




<p>Natural language processing is a branch of Artificial Intelligence which aims to bridge the gap between how a computer and human communicate with each other. The two major handles used for communication are speech and written i.e.&nbsp;text.</p>
<section id="history-of-natural-language-processing" class="level2">
<h2 class="anchored" data-anchor-id="history-of-natural-language-processing">History of Natural Language Processing</h2>
<p>The dawn of NLP can be dated back to the early 1900s. In 1950, Alan Turing published his famous article <a href="https://en.wikipedia.org/wiki/Computing_Machinery_and_Intelligence" class="external" target="_blank">“Computing Machinery and Intelligence”</a> which proposed what is now called the Turing test as a criterion of intelligence. It tests the ability of the computer program to impersonate a human in a real-time conversation with a human judge where the judge is unable to distinguish the human from the computer program. In 1954, the <a href="https://en.wikipedia.org/wiki/Georgetown%E2%80%93IBM_experiment" class="external" target="_blank">Georgetown experiment</a> automatically translated more than sixty Russian words into English.</p>
<p>In 1957, Noam Chomsky’s Syntactic Structures a rule-based system of syntactic structures with <a href="https://en.wikipedia.org/wiki/Universal_grammar" class="external" target="_blank">“universal grammar”</a> was an incredible advancement. Up to the 1980’s most of the NLP systems were based on complex hand-written rules but in the late 1980s by the introduction of machine learning algorithms for language processing revolutionized the field. A steady increase in computational power resulting from <a href="https://en.wikipedia.org/wiki/Moore%27s_law" class="external" target="_blank">Moore’s law</a> and use of statistical models that use probabilistic measures to map the features making up the input data. Watson an artificial intelligence software designed as a question answering system won the Jeopardy contest, defeating the best human players in February 2011.</p>
<p>Development of famous virtual assistants like Siri in 2011, Amazon Alexa in 2014, and Google Assistant in 2016. The use of deep learning produced better results than the state-of-the-art in many natural language processing tasks, such as machine translation, text classification, and many more. Recent advancements include the use of network architecture of the transformer which is based on the attention mechanism that has produced better results in various NLP tasks.</p>
<p>We humans in our daily life overlook the powerful ability of our human brain to read, understand the meaning of a word, it’s context (how does it relate to each other), understand humor, sarcasm, and thousand other things. How do we teach this to a computer?</p>
</section>
<section id="challenges" class="level2">
<h2 class="anchored" data-anchor-id="challenges">Challenges</h2>
<p><strong>1. Ambiguity</strong>: <br> In a natural language, words are unique but their meaning may differ based on the context in which it is used. One classical example used is: - The bank is a financial institution where customers can save or borrow money. - Tom was sitting by the banks of the river.</p>
<p>In this example, we can see that the word “bank” is used in two different ways. The word is the same but the meaning is different. This is because the context in which the word is used is different.</p>
<p><strong>2. Co-Referencing</strong>:<br> It is a process to find all the phrases in the document that refer to the same entity. Example: Harry kept the paneer on the plate and ate it. Here it refers to the paneer that he ate which was kept on the plate.</p>
<p><strong>3. Information Extraction</strong>:<br> Identifying phrases in a language that refer to specific types of entities and relations in text. Named Entity Recognition (NER) is the task used to identify the names of people, organizations, places, etc, in a text.<br> Example:<br> Tom used to work at FedEx and lives in Mumbai, India.<br> where Person = Tom, organization = FedEx and Place = Mumbai, India</p>
<p><strong>4. Personality, intention, emotions, and style</strong>:<br> Different authors may have different personalities, intentions, emotions, and styles to convey the same idea. Based on these factors the underlying idea can be interpreted in different ways. Use of humor or sarcasm may convey a meaning that is opposite of the literal one.</p>
</section>
<section id="applications" class="level2">
<h2 class="anchored" data-anchor-id="applications">Applications</h2>
<p><strong>1. Machine Translation</strong>: <br> The idea behind machine translation is to develop a system that is capable of translating text from one language to another without any human intervention. Only translating the text from one language to another is not the key. Understanding the meaning behind the text and translating it to some other language is the crux of it.<br> Example: Google Translate</p>
<p><strong>2. Automatic summarization</strong>: <br> We all love to read storybooks and always a good storybook will have a summary at the end that highlights the important things about the story. Likewise take any piece of text, a story, a news article, etc, and develop a system that can automatically summary the piece of text.<br> Example: Inshorts – an app that summarizes each news article in 60 words.</p>
<p><strong>3. Sentiment Analysis</strong>: <br> It deals with the study of extracting opinions and sentiment that are not always explicitly expressed. For instance it helps the company to understand the level of consumer satisfaction for its goods and services.<br> Example: “I love the new iPhone and it has a great camera.”.</p>
<p>Another branch of sentiment analysis is “Aspect based Sentiment Analysis” where it tries to extract opinions for each aspect from the customer review.<br> Example: “The new iPhone is great it has a great camera but the battery life is not that good.” Here the customer is satisfied with the camera aspect of the iPhone but not the battery life.</p>
<p><strong>4. Text Classification</strong>: <br> Organizing text documents into predefined categories enables to classify the information or any activity.<br> Examples: Classifying an email as spam or not spam.</p>
<p><strong>5. Question Answering</strong>: <br> Question answering deals with a system that can answer questions posed by humans in natural language. Sounds simple yet building the knowledge base, understanding the text, and to answer in natural language is altogether a thing in itself.</p>
<p><strong>6. Chatbots</strong>: <br> Chatbots are a piece of software that can simulate a conversation (or chat) with a user in natural language through websites, apps, messaging applications, etc. Chatbots are a natural evolution of question answering system but are one step further with their ability to understand the text and engage in a conversation.</p>
<p><strong>7. Speech Recognition</strong>: <br> Using our voice to interact with our phones has become a common phenomenon.<br> For example to ask questions to our voice assistants like Google Assistant/Siri/Cortana, use of voice to type a piece of text.<br> Recognizing speech has replaced the method by which we interact with our devices and made it so convenient.</p>
<p>Recent advancements in NLP have deepened our knowledge on how to tackle the various challenges in NLP. Also, this new decade will be filled with excitement and breakthroughs that awaits us. Stay tunned to deep dive into the world of NLP.</p>
<p>Share if you like it, comment if you loved it. Hope to see you guys in the next one. Peace!</p>


</section>

 ]]></description>
  <category>Natural Language Processing</category>
  <category>NLP</category>
  <guid>https://sagarthacker.com/posts/nlp/into-nlp.html</guid>
  <pubDate>Mon, 12 Apr 2021 04:00:00 GMT</pubDate>
  <media:content url="https://sagarthacker.com/posts/nlp/what_is_NLP.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Path to become a Machine Learning Expert</title>
  <dc:creator>Sagar Thacker</dc:creator>
  <link>https://sagarthacker.com/posts/ml/machine-learning-expert-path.html</link>
  <description><![CDATA[ 




<p>Path to becoming a Machine Learning (ML) Expert made easy. There are a lot of resources out there that can be overwhelming at the start. But don’t worry this learning path would provide structure and lay the foundational knowledge to begin a career in ML.</p>
<section id="learn-the-basics-of-descriptive-statistics-inferential-statistics-and-math-used-in-machine-learning" class="level2">
<h2 class="anchored" data-anchor-id="learn-the-basics-of-descriptive-statistics-inferential-statistics-and-math-used-in-machine-learning">1. Learn the basics of Descriptive Statistics, Inferential Statistics and Math used in Machine Learning</h2>
<p>Understanding the math used in ML can help in building the foundation strong. Udacity offers courses on <a href="https://www.udacity.com/course/intro-to-descriptive-statistics--ud827" target="_blank">descriptive statistics</a> and <a href="https://www.udacity.com/course/intro-to-inferential-statistics--ud201" target="_blank">inferential statistics</a>. These courses are free and use excel to teach the concepts.</p>
<p>Along with statistics and probabilities, concepts on linear algebra, multivariate calculus, optimization functions and many more form the building blocks for ML. There is an awesome youtube channel that makes these concepts very easy to learn. <a href="https://www.youtube.com/channel/UCYO_jab_esuFRV4b17AJtAw" target="_blank">3Brown1Blue</a> focuses on teaching mathematics using a distinct visual perspective.</p>
<p>More resources:</p>
<ul>
<li><a href="https://github.com/fastai/numerical-linear-algebra" target="_blank">Computational Linear Algebra for Coders</a><br></li>
<li><a href="https://ocw.mit.edu/courses/mathematics/18-06-linear-algebra-spring-2010/video-lectures/" target="_blank">Prof.&nbsp;Gilbert Strang’s Linear Algebra book/course</a><br></li>
<li><a href="https://www2.imm.dtu.dk/pubdb/edoc/imm3274.pdf" target="_blank">Matrix Cookbook by Kaare Brandt Petersen &amp; Michael Syskind Pedersen</a><br></li>
<li><a href="https://greenteapress.com/thinkstats2/thinkstats2.pdf" target="_blank">Think Stats (Exploratory Data Analysis in Python) by Allen Downey</a><br></li>
<li><a href="https://web.stanford.edu/~boyd/cvxbook/bv_cvxbook.pdf" target="_blank">Convex Optimization by Stephen Boyd and Lieven Vandenberghe</a><br></li>
<li><a href="https://cs.gmu.edu/~sean/book/metaheuristics/Essentials.pdf" target="_blank">Essentials of Metaheuristics by Sean Luke</a><br></li>
</ul>
</section>
<section id="learn-the-basics-of-python-and-its-packages" class="level2">
<h2 class="anchored" data-anchor-id="learn-the-basics-of-python-and-its-packages">2. Learn the basics of Python and it’s packages</h2>
<p>First, let’s install Python. The easiest way to do this is by installing <a href="https://docs.anaconda.com/anaconda/install/" target="_blank">Anaconda</a>. All the packages that are required come along with Anaconda.</p>
<p>You can start from learning the basics of Python i.e.&nbsp;data structures, functions, class, etc. and it’s libraries. I started learning about python in my college days, I read the book <a href="https://github.com/tranlamkhanhtuong/Learn-Python-3-The-Hard-Way" target="_blank">Learn Python the Hard Way</a>. A very good book for beginners. <a href="https://www.udacity.com/course/introduction-to-python--ud1110" target="_blank">Introduction to Python Programming</a> by Udacity is a free course that covers the basics of Python. <a href="https://courses.analyticsvidhya.com/courses/introduction-to-data-science" target="_blank">Introduction to Python</a> is another free course by Analytics Vidhya. Another free course by Google is <a href="https://developers.google.com/edu/python/" target="_blank">Google’s Python Class</a>.</p>
<p>Next, learn about how to use Regular Expression (also called regex) in Python. It will come in use for data cleaning, especially if you are working with text data. <a href="https://developers.google.com/edu/python/regular-expressions" target="_blank">Learn regular expressions</a> through Google class. A very good <a href="https://www.analyticsvidhya.com/blog/2015/06/regular-expression-python/" target="_blank">beginner tutorial for learning regular expression in python</a> on Analytics Vidhya. <a href="https://www.debuggex.com/cheatsheet/regex/python" target="_blank">Cheatsheet</a> for Regex.</p>
<p>Now comes the fun part of learning the various libraries in Python. Numpy, Pandas, Matplotlib, Seaborn, and Sklearn are the packages heavily used in ML.</p>
<ul>
<li>Numpy provides a high-performance multidimensional array and basic tools to compute with and manipulate these arrays. Numpy <a href="https://numpy.org/doc/stable/user/quickstart.html" target="_blank">quickstart tutorial</a> is a good place to start. This will form a good foundation for this to come. Practice numpy by solving <a href="https://github.com/arshahuja/numpy-practice" target="_blank">100 numpy exercises</a> to solve.</li>
<li>Pandas is used for data manipulation and analysis. The most used package in Python is Pandas. <a href="http://www.gregreda.com/2013/10/26/intro-to-pandas-data-structures/" target="_blank">Intro to pandas data structure</a> provides a detailed tutorial on pandas. A <a href="https://www.kaggle.com/learn/pandas" target="_blank">short course</a> by Kaggle on pandas.</li>
<li>Matplotlib is a visualization library in python. In the <a href="https://www.datacamp.com/community/tutorials/matplotlib-tutorial-python" target="_blank">matplotlib tutorial</a>, you will learn the basics of Python data visualization, the anatomy of a Matplotlib plot, and much more. <a href="https://matplotlib.org/tutorials/index.html" target="_blank">Official documentation</a> of matplotlib is one of the best ways to learn the library.</li>
<li>Seaborn is another visualization library built on top of matplotlib. Kaggle <a href="https://www.kaggle.com/learn/data-visualization" target="_blank">short course</a> on data visualization provides a good start point to learn the library.</li>
</ul>
</section>
<section id="data-explorationcleaningpreparation" class="level2">
<h2 class="anchored" data-anchor-id="data-explorationcleaningpreparation">3. Data Exploration/Cleaning/Preparation</h2>
<p>Real-world data is unstructured, contains missing values, outliers, typos, etc. This step is one of the most important steps for a data analyst to perform because how good the model will perform will depend on the quality of the data.</p>
<p>Learn different stages of data explorations:</p>
<ol type="1">
<li><a href="https://www.analyticsvidhya.com/blog/2016/01/guide-data-exploration/#one" target="_blank">Variable Identification, Univariate and Multivariate analysis</a></li>
<li><a href="https://www.analyticsvidhya.com/blog/2016/01/guide-data-exploration/#two" target="_blank">Missing values treatment</a></li>
<li><a href="https://www.analyticsvidhya.com/blog/2016/01/guide-data-exploration/#three" target="_blank">Outlier treatment</a></li>
<li><a href="https://www.analyticsvidhya.com/blog/2016/01/guide-data-exploration/#four" target="_blank">Feature Engineering</a></li>
</ol>
<p>Additional resources:</p>
<ul>
<li>You can also refer to the <a href="https://www.analyticsvidhya.com/blog/2015/04/comprehensive-guide-data-exploration-sas-using-python-numpy-scipy-matplotlib-pandas/" target="_blank">data exploration guide</a>.</li>
<li>Book on <a href="https://github.com/Jffrank/Books/blob/master/Python%20for%20Data%20Analysis.%20Data%20Wrangling%20with%20Pandas%2C%20NumPy%2C%20and%20IPython%20(2017%2C%20O%E2%80%99Reilly).pdf" target="_blank">Python for Data Analysis</a> by Wes McKinney</li>
</ul>
</section>
<section id="introduction-to-machine-learning" class="level2">
<h2 class="anchored" data-anchor-id="introduction-to-machine-learning">4. Introduction to Machine Learning</h2>
<p>Now it’s time to enter the belly of the beast. There are various resources to learn ML and I would suggest the following courses:</p>
<ol type="1">
<li><p><a href="https://www.coursera.org/learn/machine-learning" target="_blank">Machine Learning by Stanford (Coursera)</a><br> The Machine Learning course by Andrew Ng is one of the best courses out there and covers all the basic algorithms. Also, it introduces all the advanced topics in a very simple manner which is easy to understand. However, this course is taught in Octave rather than the popular languages like R/Python. Also, this course is <strong>NOT free</strong> but you can apply for financial aid.</p></li>
<li><p><a href="https://www.udemy.com/course/machinelearning/?LSNPUBID=bt30QTxEyjA&amp;ranEAID=bt30QTxEyjA&amp;ranMID=39197&amp;ranSiteID=bt30QTxEyjA-Z__CJ_iATD8yhClAGPkupg&amp;utm_medium=udemyads&amp;utm_source=aff-campaign" target="_blank">Machine Learning A-Z™: Hands-On Python &amp; R In Data Science (Udemy)</a><br> Good course for beginners. Explore complex topics such as natural language processing (NLP), reinforcement learning (RL), deep learning (DL) among many others. Tons of practice exercise and quizzes. This course is <strong>NOT free</strong> but comparatively not expensive.</p></li>
<li><p><a href="https://www.edx.org/course/machine-learning?source=aw&amp;awc=6798_1595771625_0c3e2e910a604788e98ca3faa15acb04&amp;utm_source=aw&amp;utm_medium=affiliate_partner&amp;utm_content=text-link&amp;utm_term=315645_LearnDataSci" target="_blank">Machine Learning (edx)</a><br> This is an <strong>advanced</strong> course that has the highest math prerequisite out of any other course in this list. You’ll need a very firm grasp of Linear Algebra, Calculus, Probability, and programming. This course is <strong>free</strong> of cost but to acquire a certificate payment is required.</p></li>
<li><p><a href="https://courses.analyticsvidhya.com/courses/a-comprehensive-learning-path-to-become-a-data-scientist-in-2020" target="_blank">Comprehensive learning path for Data Science (Analytics Vidhya)</a><br> This course covers every topic right from the beginning. Installing Python, data cleaning and preparation, Machine learning concepts, deep learning, and NLP. This course is <strong>free</strong> and does not come with any certification.</p></li>
</ol>
<p>Books:</p>
<ol type="1">
<li><a href="http://themlbook.com/wiki/doku.php" target="_blank">The Hundred Page Machine Learning Book</a></li>
<li><a href="https://web.stanford.edu/~hastie/Papers/ESLII.pdf" target="_blank">The Elements of Statistical Learning: Data Mining, Inference, and Prediction, Second Edition</a></li>
</ol>
<p><a href="https://hackr.io/blog/best-machine-learning-books" target="_blank">List</a> of best books for machine learning.</p>
<p>After learning about the various techniques in ML the next natural thing to do is apply those techniques. What better place than <a href="https://www.kaggle.com/" target="_blank">Kaggle</a>. It is one of the most popular websites among data science enthusiasts. Below two problem statement can be a good starting problem statement to begin with.</p>
<ol type="1">
<li><a href="https://www.kaggle.com/c/titanic" target="_blank">Titanic: Machine Learning from Disaster</a></li>
<li><a href="https://www.kaggle.com/c/house-prices-advanced-regression-techniques" target="_blank">House Prices: Advanced Regression Techniques</a></li>
</ol>
</section>
<section id="deep-learning" class="level2">
<h2 class="anchored" data-anchor-id="deep-learning">5. Deep Learning</h2>
<p>Using the idea to mimic a human brain has been around since the 1900s. There were various algorithms and techniques developed for the same but due to the lack of computing power, it was difficult to run those algorithms.</p>
<p>Due to the improvements in the hardware and the introduction to using GPUs to compute caught the attention of people passionate about working on neural net-based models. Today, state of the art results can be obtained using deep neural networks.</p>
<p>Courses from deeplearning.ai on Coursera are one of the most popular and fantastic courses on deep learning.</p>
<ol type="1">
<li><a href="https://www.coursera.org/learn/neural-networks-deep-learning" target="_blank">Neural Networks and Deep Learning</a></li>
<li><a href="https://www.coursera.org/specializations/deep-learning" target="_blank">Deep Learning Specialization</a></li>
</ol>
<p>Both the courses are paid but <strong>financial aid</strong> is available for both of them.</p>
<p>Additional Resources:</p>
<ol type="1">
<li><a href="https://videolectures.net/deeplearning2015_montreal/" target="_blank">Deep Learning Summer School, Montreal 2015</a></li>
<li><a href="https://computing.ece.vt.edu/~f15ece6504/" target="_blank">Deep Learning for Perception</a>, Virginia Tech, Electrical, and Computer Engineering</li>
<li><a href="https://www.youtube.com/playlist?list=PLzUTmXVwsnXod6WNdg57Yc3zFx_f-RYsq" target="_blank">CS231N 2017</a></li>
<li>A <a href="https://colah.github.io/" target="_blank">blog</a> that explains concepts on Convolutional Neural Nets (CNN)</li>
<li>(Book) <a href="https://drive.google.com/file/d/0B51wXUnyPM2ybVAwRXBrdFVPSk0/view" target="_blank">Deep Learning – Methods and Applications</a></li>
<li>(Youtube Channel) <a href="https://www.youtube.com/channel/UC9OeZkIwhzfv-_Cb7fCikLQ/videos" target="_blank">DeepLearning.TV</a></li>
<li>Deep Learning <a href="https://www.deeplearningbook.org/" target="_blank">book</a> from MIT</li>
<li><a href="http://neuralnetworksanddeeplearning.com/index.html" target="_blank">Neural Networks and Deep Learning</a> online Book</li>
<li>Comprehensive resources on <a href="https://deeplearning.net/" target="_blank">deeplearning.net</a></li>
</ol>
</section>
<section id="natural-language-processing" class="level2">
<h2 class="anchored" data-anchor-id="natural-language-processing">6. Natural Language Processing</h2>
<p>Natural language processing (NLP) is a branch of Artificial Intelligence which aims to bridge the gap between how a computer and human communicate with each other. The two major handles used for communication are speech and written i.e.&nbsp;text. If you are unfamiliar with what NLP is, this blog could help in understanding what NLP is.</p>
<p>Courses:</p>
<ol type="1">
<li>(Youtube) <a href="https://www.youtube.com/watch?v=n25JjoixM3I&amp;list=PLLssT5z_DsK8BdawOVCCaTCO99Ya58ryR" target="_blank">Natural Language Processing by University of Michigan</a></li>
<li><a href="https://web.stanford.edu/~jurafsky/slp3/" target="_blank">Speech and Language Processing</a></li>
<li><a href="https://www.youtube.com/watch?v=8rXD5-xhemo&amp;list=PLoROMvodv4rOhcuXMZkNm7j3fVwBBY42z" target="_blank">Stanford CS224N: NLP with Deep Learning</a> Winter 2019 – Stanford</li>
<li><a href="https://www.youtube.com/watch?v=OQQ-W_63UgQ&amp;list=PL3FW7Lu3i5Jsnh1rnUwq_TcylNr7EkRe6" target="_blank">Lecture Collection on Natural Language Processing with Deep Learning (Winter 2017)</a> – Stanford</li>
<li><a href="https://cs224d.stanford.edu/syllabus.html" target="_blank">CS224d: Deep Learning for Natural Language Processing</a> – Stanford</li>
<li><a href="https://www.coursera.org/specializations/natural-language-processing" target="_blank">Natural Language Processing Specialization</a> offered by deeplearning.ai on Coursera (Intermediate level)</li>
<li><a href="https://www.coursera.org/learn/language-processing" target="_blank">Natural Language Processing</a> offered by National Research University Higher School of Economics on Coursera (Advanced level course)</li>
</ol>
<p>Machine Learning in itself is a huge domain and the only way to master it is to explore and practice. I cannot stress more on practice because without practice is like trying to play the guitar without any strings.</p>
<p>Popular blogs to follow:</p>
<ol type="1">
<li><a href="https://www.analyticsvidhya.com/" target="_blank">Analytics Vidhya</a></li>
<li><a href="https://machinelearningmastery.com/" target="_blank">Machine Learning Mastery</a></li>
<li><a href="https://towardsdatascience.com/" target="_blank">Towards Data Science</a></li>
<li><a href="https://www.kdnuggets.com/" target="_blank">KDnuggets</a></li>
</ol>
<p>Additional Resources:</p>
<ol type="1">
<li><a href="https://www.analyticsvidhya.com/blog/2016/01/complete-tutorial-learn-data-science-python-scratch-2/" target="_blank">A Complete Python Tutorial to Learn Data Science from Scratch</a></li>
<li><a href="https://www.analyticsvidhya.com/blog/2019/01/comprehensive-learning-path-deep-learning-2019/" target="_blank">A Comprehensive Learning Path for Deep Learning in 2019</a> on Analytics Vidhya</li>
<li><a href="https://www.analyticsvidhya.com/blog/2020/01/computer-vision-learning-path-2020/" target="_blank">Learning Path to Master Computer Vision</a> in 2020 on Analytics Vidhya</li>
<li><a href="https://www.analyticsvidhya.com/blog/2020/01/learning-path-nlp-2020/" target="_blank">A Comprehensive Learning Path to Understand and Master NLP in 2020</a> on Analytics Vidhya</li>
<li><a href="https://www.analyticsvidhya.com/blog/2018/04/a-comprehensive-guide-to-understand-and-implement-text-classification-in-python/" target="_blank">A Comprehensive Guide to Understand and Implement Text Classification in Python</a> on Analytics Vidhya</li>
<li>Collection of <a href="https://courses.analyticsvidhya.com/courses/a-comprehensive-learning-path-to-become-a-data-scientist-in-2020" target="_blank">datasets for NLP</a></li>
<li><a href="https://courses.analyticsvidhya.com/courses/a-comprehensive-learning-path-to-become-a-data-scientist-in-2020" target="_blank">A comprehensive Learning path to becoming a data scientist in 2020</a> free course on Analytics Vidhya</li>
</ol>
<p>I wish you all the best on your journey to becoming a machine learning expert.</p>
<p>Share if you like it, comment if you loved it. Hope to see you guys in the next one. Peace!</p>


</section>

 ]]></description>
  <category>Machine Learning</category>
  <category>Learning Path</category>
  <guid>https://sagarthacker.com/posts/ml/machine-learning-expert-path.html</guid>
  <pubDate>Mon, 05 Apr 2021 04:00:00 GMT</pubDate>
  <media:content url="https://sagarthacker.com/posts/ml/path_to_master_ml.jpg" medium="image" type="image/jpeg"/>
</item>
</channel>
</rss>
