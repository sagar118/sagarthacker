{
  "hash": "14f65ebea64e5c51a3949d04318c5146",
  "result": {
    "markdown": "---\ntitle: AWS Instance Setup\ndescription: Step-by-step guide to setup AWS EC2 Instance and setup environment\nauthor: Sagar Thacker\ndate: '2023-05-19'\ncategories:\n  - AWS\n  - Python\n  - Docker\nexecute:\n  eval: false\n---\n\nIn this tutorial we will learn how to setup an AWS EC2 instance, setup key-pair and connect to the instance via ssh. We will also install python, docker and docker-compose on the instance.\n\nLet's dive in and get your environment up and running seamlessly!\n\n## Setup AWS Instance\n\n1. Go to `https://aws.amazon.com` to Sign in / Create an AWS Account.\n2. To launch EC2 instance, click on to `services` on the left-top corner of the page. Select `Compute` and `EC2`.\n\n![](./images/find_ec2.png)\n\n3. To launch a new instance, click on `Launch Instance`.\n\n![](./images/launch_instance.png)\n\n4. Set any `Name` to the instance and select `Ubuntu` in the `Application and OS Images` section. Also, choose `Ubuntu Server 20.04 LTS (HVM), SSD Volume Type` as the Amazon Machine Image (AMI).\n\n![](./images/choose_os_image.png)\n\n5. Select `t2.xlarge` as the Instance type for our instance. As 16GiB of memory should be ideal for our work.\n\n![](./images/choose_instance_type.png)\n\n6. If you don't already have a `Key pair`, you can create a new key pair. You would be asked to download and save your key pair.\n\n::: {.callout-tip}\nSave your key pair at `~/.ssh/` folder.\n:::\n\n<p align=\"center\">\n    <img src=\"./images/setup_key_pair.png\"/>\n</p>\n\n7. Lastly, increase the storage to `30 GiB` as we would be working with large file and docker images with would consume some space.\n\n![](./images/choose_storage.png)\n\n8. Click on `Launch Instance` to create and start the new instance.\n\n## Connect to Instance via SSH\n\nOnce your instance is running, you can go to the instance summary page to checkout your `Public IPv4 address` which will be used to connect to the instance via ssh.\n\nTo check whether you can establish a connection to your instance:\n\n\n```{bash}\nssh -i ~/.ssh/mlops-zc-key.pem ubuntu@<your-public-ipv4-address>\n```\n\n\nEg. `ssh -i ~/.ssh/mlops-zc-key ubuntu@34.236.146.20`\n\n::: {.callout-tip}\n## bad permissions error\n\nIf you receive an error like:\n\n**It is required that your private key files are NOT accessible by others. \nThis private key will be ignored.**\n\nChange the file permission using the command: \n\n\n```{sh}\nchmod go-r ~/.ssh/mlops-zc-key.pem\n```\n\n\n:::\n\n\nIf asked about _\"Are you sure you want to continue connecting (yes/no/[fingerprint])?\"_, type `yes`.\n\nRather than manually entering the whole command, you can save the configurations at `~/.ssh/config` file. If you don't already have an file name `config` in the `~/.ssh/` directory then go to your .ssh directory and use the command `touch config` to create the file.\n\nTo edit the file use the command `vim ~/.ssh/config`.\n\nIn the file add the following details:\n\n\n```{sh}\nHost mlops-zoomcamp\n    HostName <your-public-ipv4-address>\n    User ubuntu\n    IdentityFile ~/.ssh/mlops-zc-key.pem\n```\n\n\n::: {.callout-caution}\n## Caution\nEvery time you **stop and start** your instance you would have to edit the `config` file and change the `public ipv4 address` with the new ipv4 address.\n:::\n\n## Install Softwares\n\n### Python\n\n1. Create a directory called `downloads` and move into the directory.\n\n\n```{sh}\nmkdir downloads\ncd downloads\n```\n\n\n2. Download and Install Anaconda\n\n\n```{sh}\nwget https://repo.anaconda.com/archive/Anaconda3-2023.03-1-Linux-x86_64.sh\nbash Anaconda3-2023.03-1-Linux-x86_64.sh\n```\n\n\n3. For the following prompts:\n\n\n```{sh}\nAnaconda3 will now be installed into this location:\n/home/ubuntu/anaconda3\n```\n\n\n`Press Enter`\n\n\n```{sh}\nDo you wish the installer to initialize Anaconda3\nby running conda init? [yes|no]\n[no] >>>\n```\n\n\nType `yes`\n\nPython installed ðŸŽ‰\n\n### Docker\n\n1. Update packages using the command\n\n\n```{sh}\nsudo apt update\n```\n\n\n2. Install Docker\n\n\n```{sh}\nsudo apt install docker.io\n```\n\n\n3. Check docker is installed by running hello-world program in docker:\n\n\n```{sh}\nsudo docker run hello-world\n```\n\n\nWe don't want to use sudo everytime we run docker. To do that, create the docker group and add your user: \n\n1. Create the docker group.\n\n```{sh}\nsudo groupadd docker\n``` \n\n\n2. Add your user to the docker group.\n\n\n```{sh}\nsudo usermod -aG docker $USER\n```\n\n\n3. Log out and log back in so that your group membership is re-evaluated.\n\n::: {.callout-note}\nIf youâ€™re running Linux in a virtual machine, it may be necessary to restart the virtual machine for changes to take effect.\n:::\n\n- To check if you can run docker without using sudo, use the command\n\n\n```{sh}\ndocker --help\n```\n\n\nDocker installed ðŸŽ‰\n\n### docker-compose\n\n1. Move to the home directory. It will look like\n\n\n```{sh}\nubuntu@ip-172-31-19-228:~/downloads$ cd ..\nubuntu@ip-172-31-19-228:~$ ls\nanaconda3 downloads\n```\n\n2. Create a folder named `soft` and move into the folder.\n\n\n```{sh}\nmkdir soft\ncd soft\n```\n\n\n3. Download docker-compose and make the file executable\n\n\n```{sh}\nwget https://github.com/docker/compose/releases/download/v2.18.1/docker-compose-linux-x86_64 -O docker-compose\n\nchmod +x docker-compose\n```\n\n\nTo access docker-compose from any location we need to add the PATH to the bashrc file. Again move to the home directory.\n\n4. Open the `.bashrc` file using the command\n\n\n```{sh}\nvim .bashrc\n```\n\n\n- Move to the end of the file and press `i` to go into `Insert` Mode.\n- Add the following peice of code in the file.\n\n\n```{sh}\nexport PATH=\"${HOME}/soft:${PATH}\"\n```\n\n\n- Save and Exit the file:\n    1. Press `esc` key\n    2. Type `:wq` and hit `enter`\n\n5. Run the command to execute the file: \n\n\n```{sh}\nsource .bashrc\n```\n\n\n- Cross-check by typing `which docker-compose`. You'll get the output as `/home/ubuntu/soft/docker-compose`\n\ndocker-compose installed ðŸŽ‰\n\n::: {.callout-tip}\n## STOP EC2 instance\n\nPlease remember to stop the EC2 instance after completing your work to avoid incurring any additional charges. \n:::\n\nThank you for reading and I hope you found this notebook helpful. Upvote if you liked it, comment if you loved it. Hope to see you guys in the next one. Peace!\n\n",
    "supporting": [
      "aws_setup_files"
    ],
    "filters": [],
    "includes": {}
  }
}